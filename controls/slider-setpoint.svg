<?xml version="1.0" encoding="UTF-8"?>
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <style>
      .label-text {
        fill: #555;
        font-family: Arial, sans-serif;
        font-size: 12px;
        font-weight: bold;
      }
      .value-text {
        fill: #2196F3;
        font-family: Arial, sans-serif;
        font-size: 20px;
        font-weight: bold;
        text-anchor: middle;
      }
      .unit-text {
        fill: #777;
        font-family: Arial, sans-serif;
        font-size: 10px;
      }
      .slider-track {
        fill: #e0e0e0;
        stroke: #999;
        stroke-width: 1;
      }
      .slider-fill {
        fill: #2196F3;
        transition: width 0.1s;
      }
      .slider-thumb {
        fill: #1976D2;
        stroke: white;
        stroke-width: 2;
        cursor: grab;
        transition: all 0.1s;
      }
      .slider-thumb:hover {
        fill: #1565C0;
        r: 12;
      }
      .slider-thumb:active {
        cursor: grabbing;
        fill: #0D47A1;
      }
      .range-text {
        fill: #999;
        font-family: Arial, sans-serif;
        font-size: 9px;
        text-anchor: middle;
      }
    </style>
  </defs>

  <!-- Header -->
  <text class="label-text" x="10" y="18">SETPOINT</text>

  <!-- Value Display -->
  <text class="value-text" id="valueText" x="150" y="48">50.0</text>
  <text class="unit-text" id="unitText" x="185" y="48">%</text>

  <!-- Slider Track -->
  <rect class="slider-track" x="20" y="65" width="260" height="8" rx="4"/>

  <!-- Slider Fill -->
  <rect class="slider-fill" id="sliderFill" x="20" y="65" width="130" height="8" rx="4"/>

  <!-- Slider Thumb -->
  <circle class="slider-thumb" id="sliderThumb" cx="150" cy="69" r="10"/>

  <!-- Range Labels -->
  <text class="range-text" id="minText" x="20" y="90">0</text>
  <text class="range-text" id="maxText" x="280" y="90">100</text>

  <script><![CDATA[
//!export-start
let _pn_minValue = 0;       // Minimum value
let _pn_maxValue = 100;     // Maximum value
let _pn_currentValue = 50;  // Current value
let _ps_units = '%';        // Units string
let _pn_decimals = 1;       // Number of decimal places
//!export-end

function init() {
  update();
}

function update() {
  const sliderThumb = document.getElementById('sliderThumb');
  const sliderFill = document.getElementById('sliderFill');
  const valueText = document.getElementById('valueText');
  const unitText = document.getElementById('unitText');
  const minText = document.getElementById('minText');
  const maxText = document.getElementById('maxText');

  if (!sliderThumb) return;

  // Slider dimensions
  const sliderX = 20;
  const sliderWidth = 260;

  // Calculate position
  const percentage = (_pn_currentValue - _pn_minValue) / (_pn_maxValue - _pn_minValue);
  const thumbX = sliderX + (percentage * sliderWidth);
  const fillWidth = percentage * sliderWidth;

  // Update visuals
  sliderThumb.setAttribute('cx', thumbX);
  sliderFill.setAttribute('width', fillWidth);
  valueText.textContent = _pn_currentValue.toFixed(_pn_decimals);
  minText.textContent = _pn_minValue.toFixed(_pn_decimals);
  maxText.textContent = _pn_maxValue.toFixed(_pn_decimals);
  unitText.textContent = _ps_units;
}

function putValue(id, value) {
  if (id === '_pn_minValue') {
    _pn_minValue = Number(value) || 0;
  } else if (id === '_pn_maxValue') {
    _pn_maxValue = Number(value) || 0;
  } else if (id === '_pn_currentValue') {
    _pn_currentValue = Number(value) || 0;
  } else if (id === '_ps_units') {
    _ps_units = String(value);
  } else if (id === '_pn_decimals') {
    _pn_decimals = Number(value) || 0;
  }

  update();
}

init();

]]></script>
</svg>
