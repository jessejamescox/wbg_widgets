<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 300" width="100%" height="100%">
  <defs>
    <style>
      .vav-box { fill: #34495e; stroke: #2c3e50; stroke-width: 2; }
      .vav-duct { fill: #95a5a6; stroke: #7f8c8d; stroke-width: 2; }
      .vav-damper { fill: #7f8c8d; stroke: #2c3e50; stroke-width: 2; }
      .vav-text { fill: #ecf0f1; font-family: Arial, sans-serif; font-size: 14px; }
      .vav-label { fill: #bdc3c7; font-family: Arial, sans-serif; font-size: 11px; }
      .vav-value { fill: #3498db; font-family: Arial, monospace; font-size: 13px; font-weight: bold; }
      .vav-arrow { fill: none; stroke: #3498db; stroke-width: 2; }
      .vav-flow { fill: #3498db; opacity: 0.3; }
      .vav-flow-active { animation: flow 2s linear infinite; }
      .status-ok { fill: #27ae60; }
      .status-alarm { fill: #e74c3c; }
      @keyframes flow {
        0% { opacity: 0.1; }
        50% { opacity: 0.5; }
        100% { opacity: 0.1; }
      }
    </style>
  </defs>

  <!-- Title -->
  <text class="vav-text" x="200" y="25" text-anchor="middle" font-size="16" font-weight="bold">
    VAV Box
  </text>

  <!-- Supply Duct -->
  <rect class="vav-duct" x="20" y="100" width="120" height="60"/>
  <text class="vav-label" x="80" y="95" text-anchor="middle">SUPPLY</text>

  <!-- VAV Box Body -->
  <rect class="vav-box" x="140" y="80" width="140" height="100" rx="5"/>

  <!-- Damper (rotatable) -->
  <g id="damper" transform="translate(210, 130)">
    <rect class="vav-damper" x="-40" y="-3" width="80" height="6" rx="2"/>
    <circle fill="#2c3e50" cx="0" cy="0" r="5"/>
  </g>

  <!-- Discharge Duct -->
  <rect class="vav-duct" x="280" y="100" width="100" height="60"/>
  <text class="vav-label" x="330" y="95" text-anchor="middle">ZONE</text>

  <!-- Airflow Arrows -->
  <g id="flowArrows">
    <path class="vav-arrow" d="M 50 120 L 70 120 M 65 115 L 70 120 L 65 125" stroke-width="2"/>
    <path class="vav-arrow" d="M 80 140 L 100 140 M 95 135 L 100 140 L 95 145" stroke-width="2"/>
    <circle class="vav-flow vav-flow-active" cx="60" cy="120" r="4"/>
    <circle class="vav-flow vav-flow-active" cx="90" cy="140" r="4" style="animation-delay: 0.5s"/>
  </g>

  <!-- Data Panel -->
  <rect fill="#2c3e50" stroke="#34495e" stroke-width="1" x="20" y="200" width="360" height="80" rx="5"/>

  <!-- Damper Position -->
  <text class="vav-label" x="40" y="225">Damper Position:</text>
  <text id="damperPos" class="vav-value" x="40" y="245">65%</text>

  <!-- Airflow -->
  <text class="vav-label" x="150" y="225">Airflow:</text>
  <text id="airflow" class="vav-value" x="150" y="245">450 CFM</text>

  <!-- Zone Temperature -->
  <text class="vav-label" x="260" y="225">Zone Temp:</text>
  <text id="zoneTemp" class="vav-value" x="260" y="245">72.5°F</text>

  <!-- Setpoint -->
  <text class="vav-label" x="40" y="260">Setpoint:</text>
  <text id="setpoint" class="vav-value" x="40" y="275">72.0°F</text>

  <!-- Status -->
  <text class="vav-label" x="150" y="260">Status:</text>
  <g id="statusIndicator">
    <circle id="statusLight" class="status-ok" cx="195" cy="268" r="6"/>
    <text id="statusText" class="vav-value" x="210" y="275">Normal</text>
  </g>

  <!-- Min/Max Flow -->
  <text class="vav-label" x="260" y="260">Min/Max:</text>
  <text id="minMaxFlow" class="vav-value" x="260" y="275">150/800 CFM</text>

  <script><![CDATA[
//!export-start
let _pn_damperPosition = 65;   // Damper position (0-100%, 0=closed, 100=open)
let _pn_airflow = 450;         // Measured airflow in CFM
let _pn_zoneTemp = 72.5;       // Zone temperature (°F)
let _pn_setpoint = 72.0;       // Zone temperature setpoint (°F)
let _pn_minFlow = 150;         // Minimum airflow setpoint in CFM
let _pn_maxFlow = 800;         // Maximum airflow setpoint in CFM
let _pb_alarmActive = false;   // Alarm active status
let _pb_enabled = true;        // VAV box enabled status
//!export-end

function init() {
  update();
}

// Exported variables for FUXA

    function updateDisplay() {
      // Update damper position text
      document.getElementById('damperPos').textContent = _pn_damperPosition.toFixed(0) + '%';

      // Rotate damper visual (0% = closed/horizontal, 100% = open/vertical)
let damperAngle = (_pn_damperPosition / 100) * 90;
      document.getElementById('damper').setAttribute('transform',
        'translate(210, 130) rotate(' + damperAngle + ')');

      // Update _pn_airflow
      document.getElementById('airflow').textContent = _pn_airflow.toFixed(0) + ' CFM';

      // Update zone temperature
      document.getElementById('zoneTemp').textContent = _pn_zoneTemp.toFixed(1) + '°F';

      // Update _pn_setpoint
      document.getElementById('setpoint').textContent = _pn_setpoint.toFixed(1) + '°F';

      // Update min/max
      document.getElementById('minMaxFlow').textContent = _pn_minFlow + '/' + _pn_maxFlow + ' CFM';

      // Update status
const statusLight = document.getElementById('statusLight');
const statusText = document.getElementById('statusText');

      if (!_pb_enabled) {
        statusLight.setAttribute('class', 'status-alarm');
        statusText.textContent = 'Disabled';
        statusText.style.fill = '#e74c3c';
      } else if (_pb_alarmActive) {
        statusLight.setAttribute('class', 'status-alarm');
        statusText.textContent = 'Alarm';
        statusText.style.fill = '#e74c3c';
      } else {
        statusLight.setAttribute('class', 'status-ok');
        statusText.textContent = 'Normal';
        statusText.style.fill = '#27ae60';
      }

      // Show/hide flow arrows based on _pn_airflow
const flowArrows = document.getElementById('flowArrows');
      if (_pn_airflow > 50) {
        flowArrows.style.display = 'block';
      } else {
        flowArrows.style.display = 'none';
      }

      // Check for alarm conditions
      _pb_alarmActive = _pn_airflow < _pn_minFlow - 50 || _pn_airflow > _pn_maxFlow + 50 ||
                    Math.abs(_pn_zoneTemp - _pn_setpoint) > 5;
    }

    // Initialize display
    updateDisplay();

    // Update display every 100ms
    setInterval(updateDisplay, 100);

function putValue(id, value) {
  if (id === '_pn_damperPosition') {
    _pn_damperPosition = Number(value) || 0;
    update();
  } else if (id === '_pn_airflow') {
    _pn_airflow = Number(value) || 0;
    update();
  } else if (id === '_pn_zoneTemp') {
    _pn_zoneTemp = Number(value) || 0;
    update();
  } else if (id === '_pn_setpoint') {
    _pn_setpoint = Number(value) || 0;
    update();
  } else if (id === '_pn_minFlow') {
    _pn_minFlow = Number(value) || 0;
    update();
  } else if (id === '_pn_maxFlow') {
    _pn_maxFlow = Number(value) || 0;
    update();
  } else if (id === '_pb_alarmActive') {
    _pb_alarmActive = !!value;
    update();
  } else if (id === '_pb_enabled') {
    _pb_enabled = !!value;
    update();
  }
}

init();

]]></script>
</svg>
