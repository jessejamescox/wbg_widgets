<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 380 450" width="380" height="450">
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#1a1a2e;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#16213e;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="batteryBody" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#34495e;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2c3e50;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="chargeGradient" x1="0%" y1="100%" x2="0%" y2="0%">
      <stop offset="0%" style="stop-color:#27ae60;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#2ecc71;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#a8e6cf;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="lowChargeGradient" x1="0%" y1="100%" x2="0%" y2="0%">
      <stop offset="0%" style="stop-color:#e74c3c;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#e67e22;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f39c12;stop-opacity:1" />
    </linearGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    <filter id="shadow">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-opacity="0.5"/>
    </filter>
  </defs>

  <!-- Background -->
  <rect width="380" height="450" fill="url(#bgGradient)" rx="10"/>

  <!-- Title -->
  <text x="190" y="25" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#ecf0f1" text-anchor="middle">BATTERY STORAGE</text>

  <!-- Battery Graphic -->
  <g id="batteryGraphic" transform="translate(190, 170)">
    <!-- Battery terminal -->
    <rect x="-20" y="-95" width="40" height="15" fill="url(#batteryBody)" stroke="#7f8c8d" stroke-width="2" rx="3"/>

    <!-- Battery body -->
    <rect x="-70" y="-80" width="140" height="160" fill="url(#batteryBody)" stroke="#7f8c8d" stroke-width="3" rx="8" filter="url(#shadow)"/>

    <!-- Battery charge level (filled portion) -->
    <rect id="chargeLevel" x="-65" y="30" width="130" height="45" fill="url(#chargeGradient)" rx="5"/>

    <!-- Battery segments (visual divisions) -->
    <line x1="-65" y1="-40" x2="65" y2="-40" stroke="#2c3e50" stroke-width="1" opacity="0.5"/>
    <line x1="-65" y1="-10" x2="65" y2="-10" stroke="#2c3e50" stroke-width="1" opacity="0.5"/>
    <line x1="-65" y1="20" x2="65" y2="20" stroke="#2c3e50" stroke-width="1" opacity="0.5"/>
    <line x1="-65" y1="50" x2="65" y2="50" stroke="#2c3e50" stroke-width="1" opacity="0.5"/>

    <!-- SOC Percentage Text on Battery -->
    <text id="socText" x="0" y="10" font-family="Arial" font-size="42" font-weight="bold" fill="#ecf0f1" text-anchor="middle" filter="url(#glow)">75%</text>

    <!-- Charging/Discharging indicator -->
    <g id="flowIndicator">
      <!-- Charging arrows (upward) -->
      <g id="chargingArrows" opacity="0">
        <polygon points="-15,-100 0,-115 15,-100" fill="#27ae60" filter="url(#glow)"/>
        <polygon points="-15,-120 0,-135 15,-120" fill="#27ae60" opacity="0.6"/>
      </g>

      <!-- Discharging arrows (downward) -->
      <g id="dischargingArrows" opacity="0">
        <polygon points="-15,95 0,110 15,95" fill="#e74c3c" filter="url(#glow)"/>
        <polygon points="-15,115 0,130 15,115" fill="#e74c3c" opacity="0.6"/>
      </g>
    </g>
  </g>

  <!-- Status Display -->
  <rect x="20" y="50" width="150" height="55" fill="rgba(26, 26, 26, 0.9)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
  <text x="95" y="68" font-family="Arial" font-size="11" fill="#95a5a6" text-anchor="middle">STATUS</text>
  <text id="batteryStatus" x="95" y="93" font-family="Arial" font-size="18" font-weight="bold" fill="#27ae60" text-anchor="middle">CHARGING</text>

  <!-- Charge/Discharge Rate -->
  <rect x="210" y="50" width="150" height="55" fill="rgba(26, 26, 26, 0.9)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
  <text x="285" y="68" font-family="Arial" font-size="11" fill="#95a5a6" text-anchor="middle">POWER FLOW</text>
  <text id="powerFlow" x="285" y="93" font-family="Arial" font-size="18" font-weight="bold" fill="#27ae60" text-anchor="middle">+2.5 kW</text>

  <!-- Metrics Grid -->
  <g id="metricsGrid">
    <!-- Voltage -->
    <rect x="20" y="315" width="105" height="60" fill="rgba(44, 62, 80, 0.8)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="72.5" y="332" font-family="Arial" font-size="10" fill="#95a5a6" text-anchor="middle">VOLTAGE</text>
    <text id="voltage" x="72.5" y="356" font-family="Arial" font-size="22" font-weight="bold" fill="#3498db" text-anchor="middle">51.2 V</text>
    <text id="voltageRange" x="72.5" y="370" font-family="Arial" font-size="8" fill="#7f8c8d" text-anchor="middle">48-54V</text>

    <!-- Current -->
    <rect x="137.5" y="315" width="105" height="60" fill="rgba(44, 62, 80, 0.8)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="190" y="332" font-family="Arial" font-size="10" fill="#95a5a6" text-anchor="middle">CURRENT</text>
    <text id="current" x="190" y="356" font-family="Arial" font-size="22" font-weight="bold" fill="#9b59b6" text-anchor="middle">48.8 A</text>
    <text id="currentDir" x="190" y="370" font-family="Arial" font-size="8" fill="#27ae60" text-anchor="middle">IN</text>

    <!-- Temperature -->
    <rect x="255" y="315" width="105" height="60" fill="rgba(44, 62, 80, 0.8)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="307.5" y="332" font-family="Arial" font-size="10" fill="#95a5a6" text-anchor="middle">TEMPERATURE</text>
    <text id="temperature" x="307.5" y="356" font-family="Arial" font-size="22" font-weight="bold" fill="#27ae60" text-anchor="middle">28.5Â°C</text>
    <text id="tempStatus" x="307.5" y="370" font-family="Arial" font-size="8" fill="#27ae60" text-anchor="middle">NORMAL</text>
  </g>

  <!-- Bottom Info Panel -->
  <g id="infoPanel">
    <!-- Capacity -->
    <rect x="20" y="390" width="110" height="45" fill="rgba(26, 26, 26, 0.9)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="75" y="405" font-family="Arial" font-size="9" fill="#95a5a6" text-anchor="middle">CAPACITY</text>
    <text id="capacity" x="75" y="423" font-family="Arial" font-size="16" font-weight="bold" fill="#ecf0f1" text-anchor="middle">37.5 kWh</text>

    <!-- Cycles -->
    <rect x="140" y="390" width="100" height="45" fill="rgba(26, 26, 26, 0.9)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="190" y="405" font-family="Arial" font-size="9" fill="#95a5a6" text-anchor="middle">CYCLES</text>
    <text id="cycles" x="190" y="423" font-family="Arial" font-size="16" font-weight="bold" fill="#ecf0f1" text-anchor="middle">1,247</text>

    <!-- Health -->
    <rect x="250" y="390" width="110" height="45" fill="rgba(26, 26, 26, 0.9)" stroke="#7f8c8d" stroke-width="2" rx="5"/>
    <text x="305" y="405" font-family="Arial" font-size="9" fill="#95a5a6" text-anchor="middle">HEALTH</text>
    <g id="healthIndicator">
      <rect x="260" y="410" width="90" height="18" fill="#34495e" stroke="#7f8c8d" stroke-width="1" rx="9"/>
      <rect id="healthBar" x="260" y="410" width="81" height="18" fill="#27ae60" stroke="none" rx="9"/>
      <text id="healthText" x="305" y="424" font-family="Arial" font-size="14" font-weight="bold" fill="#ecf0f1" text-anchor="middle">95%</text>
    </g>
  </g>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      // FUXA Variable Bindings
      var bindings = {
        soc: 'battery.soc',                       // State of Charge (0-100%)
        voltage: 'battery.voltage',               // Volts
        current: 'battery.current',               // Amperes (positive=charging, negative=discharging)
        power: 'battery.power',                   // kW (positive=charging, negative=discharging)
        temperature: 'battery.temperature',       // Celsius
        capacity: 'battery.capacity',             // kWh (current capacity)
        maxCapacity: 'battery.maxCapacity',       // kWh (design capacity)
        cycles: 'battery.cycles',                 // Number of charge cycles
        health: 'battery.health',                 // Battery health (0-100%)
        status: 'battery.status',                 // 0=idle, 1=charging, 2=discharging, 3=fault
        timeToFull: 'battery.timeToFull',         // Minutes (when charging)
        timeToEmpty: 'battery.timeToEmpty'        // Minutes (when discharging)
      };

      var arrowAnimationId = null;

      function updateSOC(soc) {
        var socText = document.getElementById('socText');
        var chargeLevel = document.getElementById('chargeLevel');

        if (!socText || !chargeLevel) return;

        var value = Math.max(0, Math.min(100, soc));
        socText.textContent = value.toFixed(0) + '%';

        // Calculate charge level height (max 150px)
        var height = (value / 100) * 150;
        var yPos = 75 - height; // Start from bottom (75) and go up

        chargeLevel.setAttribute('y', yPos);
        chargeLevel.setAttribute('height', height);

        // Change color based on charge level
        if (value < 20) {
          chargeLevel.setAttribute('fill', 'url(#lowChargeGradient)');
          socText.setAttribute('fill', '#e74c3c');
        } else if (value < 50) {
          chargeLevel.setAttribute('fill', '#f39c12');
          socText.setAttribute('fill', '#f39c12');
        } else {
          chargeLevel.setAttribute('fill', 'url(#chargeGradient)');
          socText.setAttribute('fill', '#ecf0f1');
        }
      }

      function updateStatus(status, power) {
        var statusText = document.getElementById('batteryStatus');
        var chargingArrows = document.getElementById('chargingArrows');
        var dischargingArrows = document.getElementById('dischargingArrows');

        if (!statusText) return;

        // Stop any existing animation
        if (arrowAnimationId) {
          cancelAnimationFrame(arrowAnimationId);
          arrowAnimationId = null;
        }

        switch(status) {
          case 0: // Idle
            statusText.textContent = 'IDLE';
            statusText.setAttribute('fill', '#95a5a6');
            if (chargingArrows) chargingArrows.setAttribute('opacity', '0');
            if (dischargingArrows) dischargingArrows.setAttribute('opacity', '0');
            break;

          case 1: // Charging
            statusText.textContent = 'CHARGING';
            statusText.setAttribute('fill', '#27ae60');
            if (dischargingArrows) dischargingArrows.setAttribute('opacity', '0');
            animateArrows(chargingArrows, true);
            break;

          case 2: // Discharging
            statusText.textContent = 'DISCHARGING';
            statusText.setAttribute('fill', '#e74c3c');
            if (chargingArrows) chargingArrows.setAttribute('opacity', '0');
            animateArrows(dischargingArrows, false);
            break;

          case 3: // Fault
            statusText.textContent = 'FAULT';
            statusText.setAttribute('fill', '#e74c3c');
            if (chargingArrows) chargingArrows.setAttribute('opacity', '0');
            if (dischargingArrows) dischargingArrows.setAttribute('opacity', '0');

            // Blink effect
            var blinkCount = 0;
            var blinkInterval = setInterval(function() {
              blinkCount++;
              var opacity = (blinkCount % 2 === 0) ? '1' : '0.3';
              statusText.setAttribute('opacity', opacity);
              if (blinkCount > 8) {
                clearInterval(blinkInterval);
                statusText.setAttribute('opacity', '1');
              }
            }, 300);
            break;
        }
      }

      function animateArrows(arrowGroup, isCharging) {
        if (!arrowGroup) return;

        var opacity = 0;
        var increasing = true;

        function animate() {
          if (increasing) {
            opacity += 0.02;
            if (opacity >= 1) {
              opacity = 1;
              increasing = false;
            }
          } else {
            opacity -= 0.02;
            if (opacity <= 0.3) {
              opacity = 0.3;
              increasing = true;
            }
          }

          arrowGroup.setAttribute('opacity', opacity);
          arrowAnimationId = requestAnimationFrame(animate);
        }

        animate();
      }

      function updatePowerFlow(power) {
        var powerText = document.getElementById('powerFlow');
        if (!powerText) return;

        var absValue = Math.abs(power);
        var sign = power >= 0 ? '+' : '-';
        var displayValue = absValue >= 1 ? absValue.toFixed(2) + ' kW' : (absValue * 1000).toFixed(0) + ' W';

        powerText.textContent = sign + displayValue;

        if (power > 0) {
          powerText.setAttribute('fill', '#27ae60');
        } else if (power < 0) {
          powerText.setAttribute('fill', '#e74c3c');
        } else {
          powerText.setAttribute('fill', '#95a5a6');
        }
      }

      function updateVoltage(voltage) {
        var voltageText = document.getElementById('voltage');
        if (voltageText) {
          voltageText.textContent = voltage.toFixed(1) + ' V';

          // Color based on voltage range (assuming 48V nominal)
          if (voltage < 44 || voltage > 58) {
            voltageText.setAttribute('fill', '#e74c3c');
          } else if (voltage < 46 || voltage > 56) {
            voltageText.setAttribute('fill', '#f39c12');
          } else {
            voltageText.setAttribute('fill', '#3498db');
          }
        }
      }

      function updateCurrent(current) {
        var currentText = document.getElementById('current');
        var currentDir = document.getElementById('currentDir');

        if (currentText) {
          var absValue = Math.abs(current);
          currentText.textContent = absValue.toFixed(1) + ' A';
        }

        if (currentDir) {
          if (current > 0.5) {
            currentDir.textContent = 'IN';
            currentDir.setAttribute('fill', '#27ae60');
          } else if (current < -0.5) {
            currentDir.textContent = 'OUT';
            currentDir.setAttribute('fill', '#e74c3c');
          } else {
            currentDir.textContent = '---';
            currentDir.setAttribute('fill', '#95a5a6');
          }
        }
      }

      function updateTemperature(temp) {
        var tempText = document.getElementById('temperature');
        var tempStatus = document.getElementById('tempStatus');

        if (tempText) {
          tempText.textContent = temp.toFixed(1) + 'Â°C';

          var status, color;
          if (temp < 0) {
            status = 'COLD';
            color = '#3498db';
          } else if (temp < 15) {
            status = 'COOL';
            color = '#5dade2';
          } else if (temp < 35) {
            status = 'NORMAL';
            color = '#27ae60';
          } else if (temp < 45) {
            status = 'WARM';
            color = '#f39c12';
          } else if (temp < 55) {
            status = 'HOT';
            color = '#e67e22';
          } else {
            status = 'CRITICAL';
            color = '#e74c3c';
          }

          tempText.setAttribute('fill', color);
          if (tempStatus) {
            tempStatus.textContent = status;
            tempStatus.setAttribute('fill', color);
          }
        }
      }

      function updateCapacity(capacity, maxCapacity) {
        var capacityText = document.getElementById('capacity');
        if (capacityText) {
          if (maxCapacity !== undefined && maxCapacity > 0) {
            capacityText.textContent = capacity.toFixed(1) + '/' + maxCapacity.toFixed(0) + ' kWh';
          } else {
            capacityText.textContent = capacity.toFixed(1) + ' kWh';
          }
        }
      }

      function updateCycles(cycles) {
        var cyclesText = document.getElementById('cycles');
        if (cyclesText) {
          cyclesText.textContent = cycles.toLocaleString();
        }
      }

      function updateHealth(health) {
        var healthBar = document.getElementById('healthBar');
        var healthText = document.getElementById('healthText');

        if (healthBar && healthText) {
          var value = Math.max(0, Math.min(100, health));
          healthText.textContent = value.toFixed(0) + '%';

          // Calculate bar width (max 90px)
          var width = (value / 100) * 90;
          healthBar.setAttribute('width', width);

          // Color based on health
          var color;
          if (value < 50) {
            color = '#e74c3c';
          } else if (value < 70) {
            color = '#e67e22';
          } else if (value < 85) {
            color = '#f39c12';
          } else {
            color = '#27ae60';
          }

          healthBar.setAttribute('fill', color);
        }
      }

      // Main update function called by FUXA
      window.updateBatteryStorage = function(values) {
        if (values.soc !== undefined) {
          updateSOC(values.soc);
        }

        if (values.status !== undefined) {
          updateStatus(values.status, values.power);
        }

        if (values.power !== undefined) {
          updatePowerFlow(values.power);
        }

        if (values.voltage !== undefined) {
          updateVoltage(values.voltage);
        }

        if (values.current !== undefined) {
          updateCurrent(values.current);
        }

        if (values.temperature !== undefined) {
          updateTemperature(values.temperature);
        }

        if (values.capacity !== undefined) {
          updateCapacity(values.capacity, values.maxCapacity);
        }

        if (values.cycles !== undefined) {
          updateCycles(values.cycles);
        }

        if (values.health !== undefined) {
          updateHealth(values.health);
        }
      };

      // Initialize
      updateSOC(75);
      updateStatus(1, 2.5);
      updatePowerFlow(2.5);
      updateVoltage(51.2);
      updateCurrent(48.8);
      updateTemperature(28.5);
      updateCapacity(37.5, 50);
      updateCycles(1247);
      updateHealth(95);

      // Expose bindings for FUXA
      window.batteryStorageBindings = bindings;
    })();
    ]]>
  </script>
</svg>
