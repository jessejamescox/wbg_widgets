<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 500" id="water-meter">
  <defs>
    <style>
      .meter-bg { fill: #f5f7fa; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00aaff; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #1976d2; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .water-fill { fill: #00aaff; opacity: 0.7; }
      .pipe-stroke { stroke: #00aaff; stroke-width: 3; fill: none; }
      .leak-icon { fill: #ff0000; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="480" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">WATER METER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Flow Rate Display (Large) -->
  <g id="flowDisplay">
    <text class="label-text" x="200" y="65" text-anchor="middle">FLOW RATE</text>
    <text id="flowValue" class="value-text" x="200" y="95" text-anchor="middle" font-size="32">0.0</text>
    <text class="unit-text" x="200" y="115" text-anchor="middle">GPM</text>
  </g>

  <!-- Flow Visualization -->
  <g id="flowVisualization" transform="translate(50, 140)">
    <rect class="meter-bg" x="0" y="0" width="300" height="60" rx="5"/>
    <rect x="5" y="15" width="290" height="30" rx="15" fill="#0a3d5c"/>

    <!-- Animated flow particles -->
    <circle id="particle1" class="water-fill" cx="20" cy="30" r="5">
      <animate attributeName="cx" from="20" to="280" dur="2s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0;0.7;0" dur="2s" repeatCount="indefinite"/>
    </circle>
    <circle id="particle2" class="water-fill" cx="20" cy="30" r="5">
      <animate attributeName="cx" from="20" to="280" dur="2s" begin="0.5s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0;0.7;0" dur="2s" begin="0.5s" repeatCount="indefinite"/>
    </circle>
    <circle id="particle3" class="water-fill" cx="20" cy="30" r="5">
      <animate attributeName="cx" from="20" to="280" dur="2s" begin="1s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0;0.7;0" dur="2s" begin="1s" repeatCount="indefinite"/>
    </circle>
  </g>

  <!-- Pressure Display -->
  <g id="pressureDisplay">
    <rect class="meter-bg" x="25" y="220" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="240" text-anchor="middle">PRESSURE</text>
    <text id="pressureValue" class="value-text" x="107.5" y="270" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="290" text-anchor="middle">PSI</text>
  </g>

  <!-- Temperature Display -->
  <g id="tempDisplay">
    <rect class="meter-bg" x="210" y="220" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="240" text-anchor="middle">TEMPERATURE</text>
    <text id="tempValue" class="value-text" x="292.5" y="270" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="290" text-anchor="middle">°F</text>
  </g>

  <!-- Total Volume Display -->
  <g id="totalDisplay">
    <rect class="meter-bg" x="25" y="315" width="350" height="70" rx="5"/>
    <text class="label-text" x="200" y="335" text-anchor="middle">TOTAL VOLUME</text>
    <text id="totalValue" class="value-text" x="200" y="365" text-anchor="middle">0</text>
    <text class="unit-text" x="200" y="380" text-anchor="middle">Gallons</text>
  </g>

  <!-- Daily Usage -->
  <g id="dailyDisplay">
    <rect class="meter-bg" x="25" y="400" width="165" height="70" rx="5"/>
    <text class="label-text" x="107.5" y="420" text-anchor="middle">TODAY'S USAGE</text>
    <text id="dailyValue" class="value-text" x="107.5" y="450" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="465" text-anchor="middle">Gal</text>
  </g>

  <!-- Leak Detection -->
  <g id="leakDisplay">
    <rect class="meter-bg" x="210" y="400" width="165" height="70" rx="5"/>
    <text class="label-text" x="292.5" y="420" text-anchor="middle">LEAK STATUS</text>
    <g id="leakIcon" transform="translate(292.5, 445)">
      <path class="leak-icon" d="M0,-12 Q-5,-12 -8,-8 Q-10,-4 -8,0 Q-5,4 0,8 Q5,4 8,0 Q10,-4 8,-8 Q5,-12 0,-12 Z" opacity="0"/>
      <circle id="leakIndicator" class="status-ok" cx="0" cy="0" r="8"/>
    </g>
    <text id="leakText" class="unit-text" x="292.5" y="465" text-anchor="middle">NO LEAK</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_flowRate = 0;      // Flow rate (GPM - Gallons Per Minute)
let _pn_pressure = 0;      // Pressure (PSI)
let _pn_temperature = 0;   // Water temperature (°F)
let _pn_totalVolume = 0;   // Total volume (gallons)
let _pn_dailyUsage = 0;    // Daily usage (gallons)
let _pn_leakDetected = 0;  // Leak detected: 0=no leak, 1=leak
let _pn_alarm = 0;         // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const flowValue = document.getElementById('flowValue');
  const pressureValue = document.getElementById('pressureValue');
  const tempValue = document.getElementById('tempValue');
  const totalValue = document.getElementById('totalValue');
  const dailyValue = document.getElementById('dailyValue');
  const statusIndicator = document.getElementById('statusIndicator');
  const leakIndicator = document.getElementById('leakIndicator');
  const leakText = document.getElementById('leakText');
  const leakIcon = document.querySelector('#leakIcon .leak-icon');

  if (!flowValue) return;

  // Configuration
  const maxFlowRate = 100;   // GPM
  const minPressure = 30;    // PSI
  const maxPressure = 80;    // PSI

  // Update flow rate display
  flowValue.textContent = _pn_flowRate.toFixed(1);

  // Control animation speed based on flow rate
  const particles = [
    document.getElementById('particle1'),
    document.getElementById('particle2'),
    document.getElementById('particle3')
  ];

  if (_pn_flowRate > 0) {
    const duration = Math.max(0.5, 3 - (_pn_flowRate / maxFlowRate * 2.5));
    particles.forEach(function(particle) {
      const anims = particle.getElementsByTagName('animate');
      for (let i = 0; i < anims.length; i++) {
        anims[i].setAttribute('dur', duration + 's');
      }
    });
  }

  // Update pressure display
  pressureValue.textContent = _pn_pressure.toFixed(1);
  if (_pn_pressure < minPressure) {
    pressureValue.setAttribute('fill', '#ffaa00');
  } else if (_pn_pressure > maxPressure) {
    pressureValue.setAttribute('fill', '#ff0000');
  } else {
    pressureValue.setAttribute('fill', '#1976d2');
  }

  // Update temperature display
  tempValue.textContent = _pn_temperature.toFixed(1);

  // Update total volume display
  if (_pn_totalVolume >= 1000000) {
    totalValue.textContent = (_pn_totalVolume / 1000000).toFixed(2);
    document.querySelector('#totalDisplay .unit-text').textContent = 'Million Gallons';
  } else if (_pn_totalVolume >= 1000) {
    totalValue.textContent = (_pn_totalVolume / 1000).toFixed(1);
    document.querySelector('#totalDisplay .unit-text').textContent = 'K Gallons';
  } else {
    totalValue.textContent = _pn_totalVolume.toFixed(0);
    document.querySelector('#totalDisplay .unit-text').textContent = 'Gallons';
  }

  // Update daily usage display
  if (_pn_dailyUsage >= 1000) {
    dailyValue.textContent = (_pn_dailyUsage / 1000).toFixed(1) + 'K';
  } else {
    dailyValue.textContent = _pn_dailyUsage.toFixed(0);
  }

  // Update leak status
  if (_pn_leakDetected) {
    leakIndicator.setAttribute('class', 'status-alarm');
    leakText.textContent = 'LEAK DETECTED';
    leakText.setAttribute('fill', '#ff0000');
    leakIcon.setAttribute('opacity', '1');
    leakIcon.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';
  } else {
    leakIndicator.setAttribute('class', 'status-ok');
    leakText.textContent = 'NO LEAK';
    leakText.setAttribute('fill', '#a0a0a0');
    leakIcon.setAttribute('opacity', '0');
  }

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
  } else {
    statusIndicator.setAttribute('class', 'status-ok');
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_flowRate') {
    _pn_flowRate = num;
  } else if (id === '_pn_pressure') {
    _pn_pressure = num;
  } else if (id === '_pn_temperature') {
    _pn_temperature = num;
  } else if (id === '_pn_totalVolume') {
    _pn_totalVolume = num;
  } else if (id === '_pn_dailyUsage') {
    _pn_dailyUsage = num;
  } else if (id === '_pn_leakDetected') {
    _pn_leakDetected = num;
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
