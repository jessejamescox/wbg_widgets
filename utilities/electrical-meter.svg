<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 500" id="electrical-meter">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00d4ff; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .gauge-bg { fill: none; stroke: #333; stroke-width: 8; }
      .gauge-fill { fill: none; stroke: #00d4ff; stroke-width: 8; stroke-linecap: round; }
      .demand-indicator { fill: #ff6b00; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="480" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">ELECTRICAL METER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Power Display (Large) -->
  <g id="powerDisplay">
    <text class="label-text" x="200" y="65" text-anchor="middle">ACTIVE POWER</text>
    <text id="powerValue" class="value-text" x="200" y="95" text-anchor="middle" font-size="32">0.00</text>
    <text class="unit-text" x="200" y="115" text-anchor="middle">kW</text>
  </g>

  <!-- Power Gauge -->
  <g id="powerGauge" transform="translate(200, 180)">
    <circle class="gauge-bg" r="60" cx="0" cy="0"/>
    <circle id="powerGaugeFill" class="gauge-fill" r="60" cx="0" cy="0"
            stroke-dasharray="377" stroke-dashoffset="377"
            transform="rotate(-90)"/>
    <text id="powerPercent" class="value-text" x="0" y="5" text-anchor="middle" font-size="16">0%</text>
  </g>

  <!-- Voltage and Current -->
  <g id="voltageDisplay">
    <rect class="meter-bg" x="25" y="260" width="165" height="70" rx="5"/>
    <text class="label-text" x="107.5" y="280" text-anchor="middle">VOLTAGE</text>
    <text id="voltageValue" class="value-text" x="107.5" y="305" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="322" text-anchor="middle">V</text>
  </g>

  <g id="currentDisplay">
    <rect class="meter-bg" x="210" y="260" width="165" height="70" rx="5"/>
    <text class="label-text" x="292.5" y="280" text-anchor="middle">CURRENT</text>
    <text id="currentValue" class="value-text" x="292.5" y="305" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="322" text-anchor="middle">A</text>
  </g>

  <!-- Power Factor and Frequency -->
  <g id="pfDisplay">
    <rect class="meter-bg" x="25" y="345" width="165" height="70" rx="5"/>
    <text class="label-text" x="107.5" y="365" text-anchor="middle">POWER FACTOR</text>
    <text id="pfValue" class="value-text" x="107.5" y="390" text-anchor="middle">0.00</text>
    <circle id="pfIndicator" class="status-ok" cx="107.5" cy="405" r="5"/>
  </g>

  <g id="freqDisplay">
    <rect class="meter-bg" x="210" y="345" width="165" height="70" rx="5"/>
    <text class="label-text" x="292.5" y="365" text-anchor="middle">FREQUENCY</text>
    <text id="freqValue" class="value-text" x="292.5" y="390" text-anchor="middle">60.0</text>
    <text class="unit-text" x="292.5" y="407" text-anchor="middle">Hz</text>
  </g>

  <!-- Energy Counter -->
  <g id="energyDisplay">
    <rect class="meter-bg" x="25" y="430" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="450" text-anchor="middle">ENERGY CONSUMPTION</text>
    <text id="energyValue" class="value-text" x="200" y="472" text-anchor="middle">0.00</text>
    <text class="unit-text" x="280" y="472">kWh</text>
  </g>

  <!-- Demand Indicator -->
  <g id="demandDisplay">
    <text class="label-text" x="30" y="145" text-anchor="start">DEMAND</text>
    <rect x="30" y="150" width="340" height="15" rx="3" fill="#333"/>
    <rect id="demandBar" class="demand-indicator" x="30" y="150" width="0" height="15" rx="3"/>
    <text id="demandValue" class="unit-text" x="375" y="162" text-anchor="end">0 kW</text>
  </g>

  <script><![CDATA[
function init() {
  update();
}

// FUXA Variable Mappings
let variables = {
      power: 'electrical_meter_power',           // kW
      voltage: 'electrical_meter_voltage',       // V
      current: 'electrical_meter_current',       // A
      powerFactor: 'electrical_meter_pf',        // 0-1
      frequency: 'electrical_meter_freq',        // Hz
      energy: 'electrical_meter_energy',         // kWh
      demand: 'electrical_meter_demand',         // kW
      maxDemand: 'electrical_meter_max_demand',  // kW
      alarm: 'electrical_meter_alarm'            // boolean
    };

    // Configuration
let config = {
      maxPower: 500,      // kW
      maxCurrent: 1000,   // A
      nominalVoltage: 480, // V
      nominalFreq: 60,    // Hz
      lowPF: 0.85         // Power factor threshold
    };

    // Update function called by FUXA
    function updateValues(tag, value) {
      try {
        switch(tag) {
          case variables.power:
            updatePower(value);
            break;
          case variables.voltage:
            updateVoltage(value);
            break;
          case variables.current:
            updateCurrent(value);
            break;
          case variables.powerFactor:
            updatePowerFactor(value);
            break;
          case variables.frequency:
            updateFrequency(value);
            break;
          case variables.energy:
            updateEnergy(value);
            break;
          case variables.demand:
            updateDemand(value);
            break;
          case variables.alarm:
            updateAlarmStatus(value);
            break;
        }
      } catch(e) {
        console.error('Error updating electrical meter:', e);
      }
    }

    function updatePower(value) {
let power = parseFloat(value) || 0;
      document.getElementById('powerValue').textContent = power.toFixed(2);

      // Update gauge
let percent = Math.min((power / config.maxPower) * 100, 100);
      document.getElementById('powerPercent').textContent = percent.toFixed(0) + '%';
let circumference = 2 * Math.PI * 60;
let offset = circumference - (percent / 100) * circumference;
let gaugeFill = document.getElementById('powerGaugeFill');
      gaugeFill.setAttribute('stroke-dashoffset', offset);

      // Change color based on load
      if (percent > 90) {
        gaugeFill.setAttribute('stroke', '#ff0000');
      } else if (percent > 75) {
        gaugeFill.setAttribute('stroke', '#ffaa00');
      } else {
        gaugeFill.setAttribute('stroke', '#00d4ff');
      }
    }

    function updateVoltage(value) {
let voltage = parseFloat(value) || 0;
      document.getElementById('voltageValue').textContent = voltage.toFixed(0);
    }

    function updateCurrent(value) {
let current = parseFloat(value) || 0;
      document.getElementById('currentValue').textContent = current.toFixed(1);
    }

    function updatePowerFactor(value) {
let pf = parseFloat(value) || 0;
      document.getElementById('pfValue').textContent = pf.toFixed(2);
let indicator = document.getElementById('pfIndicator');
      if (pf < config.lowPF) {
        indicator.setAttribute('class', 'status-alarm');
      } else if (pf < 0.95) {
        indicator.setAttribute('class', 'status-warning');
      } else {
        indicator.setAttribute('class', 'status-ok');
      }
    }

    function updateFrequency(value) {
let freq = parseFloat(value) || 0;
      document.getElementById('freqValue').textContent = freq.toFixed(1);
    }

    function updateEnergy(value) {
let energy = parseFloat(value) || 0;
      if (energy >= 1000) {
        document.getElementById('energyValue').textContent = (energy / 1000).toFixed(2);
        document.querySelector('#energyDisplay .unit-text').textContent = 'MWh';
      } else {
        document.getElementById('energyValue').textContent = energy.toFixed(2);
        document.querySelector('#energyDisplay .unit-text').textContent = 'kWh';
      }
    }

    function updateDemand(value) {
let demand = parseFloat(value) || 0;
let maxDemand = config.maxPower;

      document.getElementById('demandValue').textContent = demand.toFixed(0) + ' kW';
let width = Math.min((demand / maxDemand) * 340, 340);
      document.getElementById('demandBar').setAttribute('width', width);
    }

    function updateAlarmStatus(value) {
let alarm = Boolean(value);
let indicator = document.getElementById('statusIndicator');

      if (alarm) {
        indicator.setAttribute('class', 'status-alarm');
      } else {
        indicator.setAttribute('class', 'status-ok');
      }
    }

    // Initialize
    if (typeof window !== 'undefined') {
      // For FUXA integration
      window.updateValues = updateValues;
    }

init();
]]></script>
</svg>
