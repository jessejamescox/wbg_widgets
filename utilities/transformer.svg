<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 500" id="transformer">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #ff9900; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .coil-primary { fill: none; stroke: #ff4444; stroke-width: 3; }
      .coil-secondary { fill: none; stroke: #4444ff; stroke-width: 3; }
      .core { fill: #606060; stroke: #404040; stroke-width: 2; }
      .load-bar { fill: #00d4ff; }
      .temp-bar { fill: #ff6600; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="480" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">TRANSFORMER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Transformer Visual Representation -->
  <g id="transformerVisual" transform="translate(200, 130)">
    <!-- Core -->
    <rect class="core" x="-8" y="-50" width="16" height="100" rx="3"/>

    <!-- Primary Coil (Left) -->
    <g id="primaryCoil" transform="translate(-40, 0)">
      <circle class="coil-primary" cx="0" cy="-30" r="8"/>
      <circle class="coil-primary" cx="0" cy="-15" r="8"/>
      <circle class="coil-primary" cx="0" cy="0" r="8"/>
      <circle class="coil-primary" cx="0" cy="15" r="8"/>
      <circle class="coil-primary" cx="0" cy="30" r="8"/>
      <text class="label-text" x="0" y="-45" text-anchor="middle">PRIMARY</text>
    </g>

    <!-- Secondary Coil (Right) -->
    <g id="secondaryCoil" transform="translate(40, 0)">
      <circle class="coil-secondary" cx="0" cy="-30" r="8"/>
      <circle class="coil-secondary" cx="0" cy="-15" r="8"/>
      <circle class="coil-secondary" cx="0" cy="0" r="8"/>
      <circle class="coil-secondary" cx="0" cy="15" r="8"/>
      <circle class="coil-secondary" cx="0" cy="30" r="8"/>
      <text class="label-text" x="0" y="-45" text-anchor="middle">SECONDARY</text>
    </g>

    <!-- Energy Flow Animation -->
    <g id="energyFlow">
      <circle class="status-ok" cx="-40" cy="0" r="3" opacity="0">
        <animate attributeName="cx" from="-40" to="40" dur="2s" repeatCount="indefinite"/>
        <animate attributeName="opacity" values="0;0.8;0" dur="2s" repeatCount="indefinite"/>
      </circle>
      <circle class="status-ok" cx="-40" cy="0" r="3" opacity="0">
        <animate attributeName="cx" from="-40" to="40" dur="2s" begin="0.5s" repeatCount="indefinite"/>
        <animate attributeName="opacity" values="0;0.8;0" dur="2s" begin="0.5s" repeatCount="indefinite"/>
      </circle>
    </g>
  </g>

  <!-- Voltage Displays -->
  <g id="primaryVoltageDisplay">
    <rect class="meter-bg" x="25" y="230" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="250" text-anchor="middle">PRIMARY VOLTAGE</text>
    <circle class="coil-primary" cx="70" cy="245" r="4"/>
    <text id="primaryVoltage" class="value-text" x="107.5" y="280" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="300" text-anchor="middle">V</text>
  </g>

  <g id="secondaryVoltageDisplay">
    <rect class="meter-bg" x="210" y="230" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="250" text-anchor="middle">SECONDARY VOLTAGE</text>
    <circle class="coil-secondary" cx="255" cy="245" r="4"/>
    <text id="secondaryVoltage" class="value-text" x="292.5" y="280" text-anchor="middle">0</text>
    <text class="unit-text" x="292.5" y="300" text-anchor="middle">V</text>
  </g>

  <!-- Load Display -->
  <g id="loadDisplay">
    <rect class="meter-bg" x="25" y="325" width="350" height="70" rx="5"/>
    <text class="label-text" x="200" y="345" text-anchor="middle">LOAD</text>
    <text id="loadValue" class="value-text" x="200" y="375" text-anchor="middle">0.0</text>
    <text class="unit-text" x="250" y="375">kVA</text>

    <!-- Load Bar -->
    <rect x="30" y="385" width="340" height="5" rx="2" fill="#333"/>
    <rect id="loadBar" class="load-bar" x="30" y="385" width="0" height="5" rx="2"/>
  </g>

  <!-- Temperature Display -->
  <g id="temperatureDisplay">
    <rect class="meter-bg" x="25" y="410" width="165" height="70" rx="5"/>
    <text class="label-text" x="107.5" y="430" text-anchor="middle">TEMPERATURE</text>
    <text id="temperatureValue" class="value-text" x="107.5" y="460" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="475" text-anchor="middle">째C</text>
  </g>

  <!-- Efficiency Display -->
  <g id="efficiencyDisplay">
    <rect class="meter-bg" x="210" y="410" width="165" height="70" rx="5"/>
    <text class="label-text" x="292.5" y="430" text-anchor="middle">EFFICIENCY</text>
    <text id="efficiencyValue" class="value-text" x="292.5" y="460" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="475" text-anchor="middle">%</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_primaryVoltage = 0;      // Primary voltage (V)
let _pn_secondaryVoltage = 0;    // Secondary voltage (V)
let _pn_load = 0;                // Load (kVA)
let _pn_maxLoad = 1000;          // Max load rating (kVA)
let _pn_temperature = 0;         // Temperature (째C)
let _pn_efficiency = 0;          // Efficiency (%)
let _pn_alarm = 0;               // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const primaryVoltage = document.getElementById('primaryVoltage');
  const secondaryVoltage = document.getElementById('secondaryVoltage');
  const loadValue = document.getElementById('loadValue');
  const loadBar = document.getElementById('loadBar');
  const temperatureValue = document.getElementById('temperatureValue');
  const efficiencyValue = document.getElementById('efficiencyValue');
  const statusIndicator = document.getElementById('statusIndicator');

  if (!primaryVoltage) return;

  // Configuration
  const maxTemp = 150;            // 째C
  const warningTemp = 120;        // 째C
  const highLoadThreshold = 0.9;  // 90%
  const warnLoadThreshold = 0.75; // 75%

  // Update primary voltage
  primaryVoltage.textContent = _pn_primaryVoltage.toFixed(0);

  // Update secondary voltage
  secondaryVoltage.textContent = _pn_secondaryVoltage.toFixed(0);

  // Update load
  loadValue.textContent = _pn_load.toFixed(1);

  // Update load bar
  const loadPercent = Math.min((_pn_load / _pn_maxLoad) * 100, 100);
  const barWidth = (loadPercent / 100) * 340;
  loadBar.setAttribute('width', barWidth);

  // Change color based on load
  if (loadPercent >= highLoadThreshold * 100) {
    loadBar.setAttribute('fill', '#ff0000');
    loadValue.setAttribute('fill', '#ff0000');
  } else if (loadPercent >= warnLoadThreshold * 100) {
    loadBar.setAttribute('fill', '#ffaa00');
    loadValue.setAttribute('fill', '#ffaa00');
  } else {
    loadBar.setAttribute('fill', '#00d4ff');
    loadValue.setAttribute('fill', '#ffffff');
  }

  // Control energy flow animation speed
  const flowCircles = document.querySelectorAll('#energyFlow circle');
  if (_pn_load > 0) {
    const speed = Math.max(0.5, 2 - (loadPercent / 100) * 1.5);
    flowCircles.forEach(function(circle) {
      const anims = circle.getElementsByTagName('animate');
      for (let i = 0; i < anims.length; i++) {
        anims[i].setAttribute('dur', speed + 's');
      }
    });
  }

  // Update temperature
  temperatureValue.textContent = _pn_temperature.toFixed(0);
  if (_pn_temperature >= maxTemp) {
    temperatureValue.setAttribute('fill', '#ff0000');
  } else if (_pn_temperature >= warningTemp) {
    temperatureValue.setAttribute('fill', '#ffaa00');
  } else {
    temperatureValue.setAttribute('fill', '#ffffff');
  }

  // Update efficiency
  efficiencyValue.textContent = _pn_efficiency.toFixed(1);
  if (_pn_efficiency < 85) {
    efficiencyValue.setAttribute('fill', '#ffaa00');
  } else {
    efficiencyValue.setAttribute('fill', '#00ff00');
  }

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
  } else {
    statusIndicator.setAttribute('class', 'status-ok');
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_primaryVoltage') {
    _pn_primaryVoltage = num;
  } else if (id === '_pn_secondaryVoltage') {
    _pn_secondaryVoltage = num;
  } else if (id === '_pn_load') {
    _pn_load = num;
  } else if (id === '_pn_maxLoad') {
    _pn_maxLoad = num;
  } else if (id === '_pn_temperature') {
    _pn_temperature = num;
  } else if (id === '_pn_efficiency') {
    _pn_efficiency = num;
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
