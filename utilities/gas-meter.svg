<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 500" id="gas-meter">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #ffa500; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .gas-color { fill: #ffa500; }
      .flame-icon { fill: #ff6600; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="480" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">GAS METER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Flow Rate Display (Large) -->
  <g id="flowDisplay">
    <text class="label-text" x="200" y="65" text-anchor="middle">FLOW RATE</text>
    <text id="flowValue" class="value-text" x="200" y="95" text-anchor="middle" font-size="32">0.0</text>
    <text class="unit-text" x="200" y="115" text-anchor="middle">CFH</text>
  </g>

  <!-- Gas Flow Animation -->
  <g id="gasFlow" transform="translate(100, 140)">
    <rect class="meter-bg" x="0" y="0" width="200" height="80" rx="5"/>

    <!-- Flame Icon -->
    <g transform="translate(100, 40)">
      <path class="flame-icon" d="M0,-20 Q-8,-15 -10,-5 Q-8,5 -5,10 Q0,15 5,10 Q8,5 10,-5 Q8,-15 0,-20 Z">
        <animate attributeName="d"
                 values="M0,-20 Q-8,-15 -10,-5 Q-8,5 -5,10 Q0,15 5,10 Q8,5 10,-5 Q8,-15 0,-20 Z;
                         M0,-22 Q-10,-17 -12,-5 Q-10,7 -3,12 Q0,17 3,12 Q10,7 12,-5 Q10,-17 0,-22 Z;
                         M0,-20 Q-8,-15 -10,-5 Q-8,5 -5,10 Q0,15 5,10 Q8,5 10,-5 Q8,-15 0,-20 Z"
                 dur="1.5s" repeatCount="indefinite"/>
        <animate attributeName="opacity" values="0.7;1;0.7" dur="1.5s" repeatCount="indefinite"/>
      </path>
      <path fill="#ff9900" d="M0,-15 Q-5,-12 -6,-5 Q-5,2 -2,6 Q0,8 2,6 Q5,2 6,-5 Q5,-12 0,-15 Z">
        <animate attributeName="opacity" values="0.8;1;0.8" dur="1s" repeatCount="indefinite"/>
      </path>
    </g>
  </g>

  <!-- Pressure Display -->
  <g id="pressureDisplay">
    <rect class="meter-bg" x="25" y="240" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="260" text-anchor="middle">PRESSURE</text>
    <text id="pressureValue" class="value-text" x="107.5" y="290" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="310" text-anchor="middle">PSI</text>
  </g>

  <!-- BTU Content Display -->
  <g id="btuDisplay">
    <rect class="meter-bg" x="210" y="240" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="260" text-anchor="middle">BTU CONTENT</text>
    <text id="btuValue" class="value-text" x="292.5" y="290" text-anchor="middle">1000</text>
    <text class="unit-text" x="292.5" y="310" text-anchor="middle">BTU/CF</text>
  </g>

  <!-- Total Volume Display -->
  <g id="totalDisplay">
    <rect class="meter-bg" x="25" y="335" width="350" height="70" rx="5"/>
    <text class="label-text" x="200" y="355" text-anchor="middle">TOTAL VOLUME</text>
    <text id="totalValue" class="value-text" x="200" y="385" text-anchor="middle">0</text>
    <text class="unit-text" x="200" y="400" text-anchor="middle">CCF</text>
  </g>

  <!-- Energy Consumption -->
  <g id="energyDisplay">
    <rect class="meter-bg" x="25" y="420" width="165" height="70" rx="5"/>
    <text class="label-text" x="107.5" y="440" text-anchor="middle">ENERGY</text>
    <text id="energyValue" class="value-text" x="107.5" y="470" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="485" text-anchor="middle">MMBTU</text>
  </g>

  <!-- Flow Status -->
  <g id="flowStatus">
    <rect class="meter-bg" x="210" y="420" width="165" height="70" rx="5"/>
    <text class="label-text" x="292.5" y="440" text-anchor="middle">FLOW STATUS</text>
    <circle id="flowIndicator" class="status-ok" cx="292.5" cy="460" r="12"/>
    <text id="flowStatusText" class="unit-text" x="292.5" y="485" text-anchor="middle">NORMAL</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_flowRate = 0;        // Flow rate (CFH - Cubic Feet per Hour)
let _pn_pressure = 0;        // Pressure (PSI)
let _pn_btuContent = 1000;   // BTU content (BTU/CF)
let _pn_totalVolume = 0;     // Total volume (CCF - 100 Cubic Feet)
let _pn_energyTotal = 0;     // Total energy (MMBTU - Million BTU)
let _pn_alarm = 0;           // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const flowValue = document.getElementById('flowValue');
  const pressureValue = document.getElementById('pressureValue');
  const btuValue = document.getElementById('btuValue');
  const totalValue = document.getElementById('totalValue');
  const energyValue = document.getElementById('energyValue');
  const statusIndicator = document.getElementById('statusIndicator');
  const flowIndicator = document.getElementById('flowIndicator');
  const flowStatusText = document.getElementById('flowStatusText');

  if (!flowValue) return;

  // Configuration
  const maxFlowRate = 1000;     // CFH
  const minPressure = 5;        // PSI
  const maxPressure = 15;       // PSI
  const highFlowThreshold = 800; // CFH

  // Update flow rate display
  flowValue.textContent = _pn_flowRate.toFixed(1);

  // Update flow status
  if (_pn_flowRate === 0) {
    flowIndicator.setAttribute('class', 'status-ok');
    flowStatusText.textContent = 'NO FLOW';
  } else if (_pn_flowRate > highFlowThreshold) {
    flowIndicator.setAttribute('class', 'status-warning');
    flowStatusText.textContent = 'HIGH FLOW';
  } else {
    flowIndicator.setAttribute('class', 'status-ok');
    flowStatusText.textContent = 'NORMAL';
  }

  // Control flame animation speed
  const flames = document.querySelectorAll('#gasFlow path');
  if (_pn_flowRate > 0) {
    const speed = Math.max(0.5, 2 - (_pn_flowRate / maxFlowRate * 1.5));
    flames.forEach(function(flame) {
      const anims = flame.getElementsByTagName('animate');
      for (let i = 0; i < anims.length; i++) {
        anims[i].setAttribute('dur', speed + 's');
      }
    });
    flames.forEach(function(flame) {
      flame.style.display = 'block';
    });
  } else {
    flames.forEach(function(flame) {
      flame.style.display = 'none';
    });
  }

  // Update pressure display
  pressureValue.textContent = _pn_pressure.toFixed(1);
  if (_pn_pressure < minPressure) {
    pressureValue.setAttribute('fill', '#ffaa00');
  } else if (_pn_pressure > maxPressure) {
    pressureValue.setAttribute('fill', '#ff0000');
  } else {
    pressureValue.setAttribute('fill', '#ffffff');
  }

  // Update BTU content display
  btuValue.textContent = _pn_btuContent.toFixed(0);

  // Update total volume display
  if (_pn_totalVolume >= 10000) {
    totalValue.textContent = (_pn_totalVolume / 1000).toFixed(1);
    document.querySelector('#totalDisplay .unit-text').textContent = 'MCF';
  } else {
    totalValue.textContent = _pn_totalVolume.toFixed(0);
    document.querySelector('#totalDisplay .unit-text').textContent = 'CCF';
  }

  // Update energy display
  energyValue.textContent = _pn_energyTotal.toFixed(1);

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
  } else {
    statusIndicator.setAttribute('class', 'status-ok');
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_flowRate') {
    _pn_flowRate = num;
  } else if (id === '_pn_pressure') {
    _pn_pressure = num;
  } else if (id === '_pn_btuContent') {
    _pn_btuContent = num;
  } else if (id === '_pn_totalVolume') {
    _pn_totalVolume = num;
  } else if (id === '_pn_energyTotal') {
    _pn_energyTotal = num;
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
