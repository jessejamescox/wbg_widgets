<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 550" id="generator">
  <defs>
    <style>
      .meter-bg { fill: #f5f7fa; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #1976d2; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #1976d2; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .status-off { fill: #666666; }
      .gen-body { fill: #2a3a4a; stroke: #1a2a3a; stroke-width: 2; }
      .fuel-fill { fill: #ffaa00; }
      .exhaust { fill: #666666; opacity: 0.5; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="530" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">EMERGENCY GENERATOR</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-off" cx="370" cy="25" r="8"/>

  <!-- Generator Visual -->
  <g id="generatorVisual" transform="translate(200, 120)">
    <!-- Generator Body -->
    <rect class="gen-body" x="-80" y="-40" width="160" height="80" rx="5"/>

    <!-- Cooling Vents -->
    <line stroke="#1a2a3a" stroke-width="2" x1="-60" y1="-30" x2="-60" y2="30"/>
    <line stroke="#1a2a3a" stroke-width="2" x1="-50" y1="-30" x2="-50" y2="30"/>
    <line stroke="#1a2a3a" stroke-width="2" x1="-40" y1="-30" x2="-40" y2="30"/>

    <!-- Rotating Indicator (when running) -->
    <g id="rotatingIndicator">
      <circle fill="#1976d2" cx="20" cy="0" r="15" opacity="0.3"/>
      <line stroke="#1976d2" stroke-width="3" x1="20" y1="0" x2="20" y2="-12"/>
    </g>

    <!-- Exhaust Animation (when running) -->
    <circle id="exhaust1" class="exhaust" cx="70" cy="-30" r="5" opacity="0">
      <animate attributeName="cy" from="-30" to="-60" dur="2s" repeatCount="indefinite"/>
      <animate attributeName="r" from="5" to="15" dur="2s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.5;0;0" dur="2s" repeatCount="indefinite"/>
    </circle>
    <circle id="exhaust2" class="exhaust" cx="70" cy="-30" r="5" opacity="0">
      <animate attributeName="cy" from="-30" to="-60" dur="2s" begin="0.7s" repeatCount="indefinite"/>
      <animate attributeName="r" from="5" to="15" dur="2s" begin="0.7s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.5;0;0" dur="2s" begin="0.7s" repeatCount="indefinite"/>
    </circle>

    <!-- Status Label -->
    <text id="genStatusText" class="label-text" x="0" y="60" text-anchor="middle">STANDBY</text>
  </g>

  <!-- Run Status Display -->
  <g id="runStatusDisplay">
    <rect class="meter-bg" x="25" y="195" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="215" text-anchor="middle">GENERATOR STATUS</text>
    <text id="runStatus" class="value-text" x="200" y="237" text-anchor="middle" fill="#666666">STOPPED</text>
  </g>

  <!-- Voltage and Frequency -->
  <g id="voltageDisplay">
    <rect class="meter-bg" x="25" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="280" text-anchor="middle">VOLTAGE</text>
    <text id="voltageValue" class="value-text" x="107.5" y="310" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="330" text-anchor="middle">V</text>
  </g>

  <g id="frequencyDisplay">
    <rect class="meter-bg" x="210" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="280" text-anchor="middle">FREQUENCY</text>
    <text id="frequencyValue" class="value-text" x="292.5" y="310" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="330" text-anchor="middle">Hz</text>
  </g>

  <!-- Power Output and Load -->
  <g id="powerDisplay">
    <rect class="meter-bg" x="25" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="375" text-anchor="middle">POWER OUTPUT</text>
    <text id="powerValue" class="value-text" x="107.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="425" text-anchor="middle">kW</text>
  </g>

  <g id="loadDisplay">
    <rect class="meter-bg" x="210" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="375" text-anchor="middle">LOAD</text>
    <text id="loadValue" class="value-text" x="292.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="292.5" y="425" text-anchor="middle">%</text>
  </g>

  <!-- Fuel Level Display -->
  <g id="fuelDisplay">
    <rect class="meter-bg" x="25" y="450" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="470" text-anchor="middle">FUEL LEVEL</text>

    <!-- Fuel Tank Visualization -->
    <g transform="translate(107.5, 500)">
      <rect x="-25" y="-20" width="50" height="40" rx="3" fill="#1a2a3a" stroke="#404040" stroke-width="1"/>
      <rect id="fuelBar" class="fuel-fill" x="-23" y="18" width="46" height="0" rx="2"/>
    </g>

    <text id="fuelValue" class="value-text" x="107.5" y="515" text-anchor="middle" font-size="16">0%</text>
  </g>

  <!-- Runtime Display -->
  <g id="runtimeDisplay">
    <rect class="meter-bg" x="210" y="450" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="470" text-anchor="middle">RUNTIME</text>
    <text id="runtimeValue" class="value-text" x="292.5" y="500" text-anchor="middle" font-size="18">0:00:00</text>
    <text class="unit-text" x="292.5" y="520" text-anchor="middle">HH:MM:SS</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_running = 0;         // Running status: 0=stopped, 1=running
let _pn_voltage = 0;         // Output voltage (V)
let _pn_frequency = 0;       // Output frequency (Hz)
let _pn_power = 0;           // Power output (kW)
let _pn_load = 0;            // Load percentage (%)
let _pn_fuelLevel = 0;       // Fuel level (%)
let _pn_runtime = 0;         // Runtime (seconds)
let _pn_alarm = 0;           // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const runStatus = document.getElementById('runStatus');
  const genStatusText = document.getElementById('genStatusText');
  const statusIndicator = document.getElementById('statusIndicator');
  const rotatingIndicator = document.getElementById('rotatingIndicator');
  const voltageValue = document.getElementById('voltageValue');
  const frequencyValue = document.getElementById('frequencyValue');
  const powerValue = document.getElementById('powerValue');
  const loadValue = document.getElementById('loadValue');
  const fuelValue = document.getElementById('fuelValue');
  const fuelBar = document.getElementById('fuelBar');
  const runtimeValue = document.getElementById('runtimeValue');

  if (!runStatus) return;

  // Configuration
  const nominalVoltage = 480;         // V
  const nominalFreq = 60;             // Hz
  const lowFuelThreshold = 25;        // %
  const criticalFuelThreshold = 10;   // %

  const isRunning = _pn_running > 0;
  const exhausts = [document.getElementById('exhaust1'), document.getElementById('exhaust2')];

  // Update running status
  if (isRunning) {
    runStatus.textContent = 'RUNNING';
    runStatus.setAttribute('fill', '#00ff00');
    genStatusText.textContent = 'ONLINE';
    statusIndicator.setAttribute('class', 'status-ok');

    // Add rotation animation
    const animateTransform = document.createElementNS('http://www.w3.org/2000/svg', 'animateTransform');
    animateTransform.setAttribute('attributeName', 'transform');
    animateTransform.setAttribute('type', 'rotate');
    animateTransform.setAttribute('from', '0 20 0');
    animateTransform.setAttribute('to', '360 20 0');
    animateTransform.setAttribute('dur', '2s');
    animateTransform.setAttribute('repeatCount', 'indefinite');
    let oldAnims = rotatingIndicator.getElementsByTagName('animateTransform');
    while (oldAnims.length > 0) {
      rotatingIndicator.removeChild(oldAnims[0]);
    }
    rotatingIndicator.appendChild(animateTransform);

    // Show exhaust
    exhausts.forEach(function(exhaust) {
      exhaust.style.display = 'block';
    });
  } else {
    runStatus.textContent = 'STOPPED';
    runStatus.setAttribute('fill', '#666666');
    genStatusText.textContent = 'STANDBY';
    statusIndicator.setAttribute('class', 'status-off');

    // Remove rotation animation
    let oldAnims = rotatingIndicator.getElementsByTagName('animateTransform');
    while (oldAnims.length > 0) {
      rotatingIndicator.removeChild(oldAnims[0]);
    }

    // Hide exhaust
    exhausts.forEach(function(exhaust) {
      exhaust.style.display = 'none';
    });
  }

  // Update voltage
  voltageValue.textContent = _pn_voltage.toFixed(0);
  const voltageDeviation = Math.abs(_pn_voltage - nominalVoltage) / nominalVoltage;
  if (isRunning && voltageDeviation > 0.1) {
    voltageValue.setAttribute('fill', '#ff0000');
  } else if (isRunning && voltageDeviation > 0.05) {
    voltageValue.setAttribute('fill', '#ffaa00');
  } else {
    voltageValue.setAttribute('fill', '#1976d2');
  }

  // Update frequency
  frequencyValue.textContent = _pn_frequency.toFixed(1);
  const freqDeviation = Math.abs(_pn_frequency - nominalFreq) / nominalFreq;
  if (isRunning && freqDeviation > 0.03) {
    frequencyValue.setAttribute('fill', '#ff0000');
  } else if (isRunning && freqDeviation > 0.01) {
    frequencyValue.setAttribute('fill', '#ffaa00');
  } else {
    frequencyValue.setAttribute('fill', '#1976d2');
  }

  // Update power
  powerValue.textContent = _pn_power.toFixed(0);

  // Update load
  loadValue.textContent = _pn_load.toFixed(0);
  if (_pn_load > 100) {
    loadValue.setAttribute('fill', '#ff0000');
  } else if (_pn_load > 90) {
    loadValue.setAttribute('fill', '#ffaa00');
  } else {
    loadValue.setAttribute('fill', '#1976d2');
  }

  // Update fuel level
  fuelValue.textContent = _pn_fuelLevel.toFixed(0) + '%';
  const barHeight = (_pn_fuelLevel / 100) * 38;
  fuelBar.setAttribute('height', barHeight);
  fuelBar.setAttribute('y', 18 - barHeight);

  if (_pn_fuelLevel <= criticalFuelThreshold) {
    fuelBar.setAttribute('fill', '#ff0000');
    fuelValue.setAttribute('fill', '#ff0000');
  } else if (_pn_fuelLevel <= lowFuelThreshold) {
    fuelBar.setAttribute('fill', '#ffaa00');
    fuelValue.setAttribute('fill', '#ffaa00');
  } else {
    fuelBar.setAttribute('fill', '#00ff00');
    fuelValue.setAttribute('fill', '#1976d2');
  }

  // Update runtime
  const hours = Math.floor(_pn_runtime / 3600);
  const minutes = Math.floor((_pn_runtime % 3600) / 60);
  const secs = _pn_runtime % 60;
  const pad = (num) => num < 10 ? '0' + num : num;
  runtimeValue.textContent = pad(hours) + ':' + pad(minutes) + ':' + pad(secs);

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
    statusIndicator.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';
  } else if (isRunning) {
    statusIndicator.setAttribute('class', 'status-ok');
    statusIndicator.innerHTML = '';
  } else {
    statusIndicator.setAttribute('class', 'status-off');
    statusIndicator.innerHTML = '';
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_running') {
    _pn_running = num;
  } else if (id === '_pn_voltage') {
    _pn_voltage = num;
  } else if (id === '_pn_frequency') {
    _pn_frequency = num;
  } else if (id === '_pn_power') {
    _pn_power = num;
  } else if (id === '_pn_load') {
    _pn_load = num;
  } else if (id === '_pn_fuelLevel') {
    _pn_fuelLevel = num;
  } else if (id === '_pn_runtime') {
    _pn_runtime = Math.floor(num);
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
