<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 550" id="generator">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00ff88; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .status-off { fill: #666666; }
      .gen-body { fill: #2a3a4a; stroke: #1a2a3a; stroke-width: 2; }
      .fuel-fill { fill: #ffaa00; }
      .exhaust { fill: #666666; opacity: 0.5; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="530" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">EMERGENCY GENERATOR</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-off" cx="370" cy="25" r="8"/>

  <!-- Generator Visual -->
  <g id="generatorVisual" transform="translate(200, 120)">
    <!-- Generator Body -->
    <rect class="gen-body" x="-80" y="-40" width="160" height="80" rx="5"/>

    <!-- Cooling Vents -->
    <line stroke="#1a2a3a" stroke-width="2" x1="-60" y1="-30" x2="-60" y2="30"/>
    <line stroke="#1a2a3a" stroke-width="2" x1="-50" y1="-30" x2="-50" y2="30"/>
    <line stroke="#1a2a3a" stroke-width="2" x1="-40" y1="-30" x2="-40" y2="30"/>

    <!-- Rotating Indicator (when running) -->
    <g id="rotatingIndicator">
      <circle fill="#00ff88" cx="20" cy="0" r="15" opacity="0.3"/>
      <line stroke="#00ff88" stroke-width="3" x1="20" y1="0" x2="20" y2="-12"/>
    </g>

    <!-- Exhaust Animation (when running) -->
    <circle id="exhaust1" class="exhaust" cx="70" cy="-30" r="5" opacity="0">
      <animate attributeName="cy" from="-30" to="-60" dur="2s" repeatCount="indefinite"/>
      <animate attributeName="r" from="5" to="15" dur="2s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.5;0;0" dur="2s" repeatCount="indefinite"/>
    </circle>
    <circle id="exhaust2" class="exhaust" cx="70" cy="-30" r="5" opacity="0">
      <animate attributeName="cy" from="-30" to="-60" dur="2s" begin="0.7s" repeatCount="indefinite"/>
      <animate attributeName="r" from="5" to="15" dur="2s" begin="0.7s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.5;0;0" dur="2s" begin="0.7s" repeatCount="indefinite"/>
    </circle>

    <!-- Status Label -->
    <text id="genStatusText" class="label-text" x="0" y="60" text-anchor="middle">STANDBY</text>
  </g>

  <!-- Run Status Display -->
  <g id="runStatusDisplay">
    <rect class="meter-bg" x="25" y="195" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="215" text-anchor="middle">GENERATOR STATUS</text>
    <text id="runStatus" class="value-text" x="200" y="237" text-anchor="middle" fill="#666666">STOPPED</text>
  </g>

  <!-- Voltage and Frequency -->
  <g id="voltageDisplay">
    <rect class="meter-bg" x="25" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="280" text-anchor="middle">VOLTAGE</text>
    <text id="voltageValue" class="value-text" x="107.5" y="310" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="330" text-anchor="middle">V</text>
  </g>

  <g id="frequencyDisplay">
    <rect class="meter-bg" x="210" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="280" text-anchor="middle">FREQUENCY</text>
    <text id="frequencyValue" class="value-text" x="292.5" y="310" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="330" text-anchor="middle">Hz</text>
  </g>

  <!-- Power Output and Load -->
  <g id="powerDisplay">
    <rect class="meter-bg" x="25" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="375" text-anchor="middle">POWER OUTPUT</text>
    <text id="powerValue" class="value-text" x="107.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="425" text-anchor="middle">kW</text>
  </g>

  <g id="loadDisplay">
    <rect class="meter-bg" x="210" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="375" text-anchor="middle">LOAD</text>
    <text id="loadValue" class="value-text" x="292.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="292.5" y="425" text-anchor="middle">%</text>
  </g>

  <!-- Fuel Level Display -->
  <g id="fuelDisplay">
    <rect class="meter-bg" x="25" y="450" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="470" text-anchor="middle">FUEL LEVEL</text>

    <!-- Fuel Tank Visualization -->
    <g transform="translate(107.5, 500)">
      <rect x="-25" y="-20" width="50" height="40" rx="3" fill="#1a2a3a" stroke="#404040" stroke-width="1"/>
      <rect id="fuelBar" class="fuel-fill" x="-23" y="18" width="46" height="0" rx="2"/>
    </g>

    <text id="fuelValue" class="value-text" x="107.5" y="515" text-anchor="middle" font-size="16">0%</text>
  </g>

  <!-- Runtime Display -->
  <g id="runtimeDisplay">
    <rect class="meter-bg" x="210" y="450" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="470" text-anchor="middle">RUNTIME</text>
    <text id="runtimeValue" class="value-text" x="292.5" y="500" text-anchor="middle" font-size="18">0:00:00</text>
    <text class="unit-text" x="292.5" y="520" text-anchor="middle">HH:MM:SS</text>
  </g>

  <script><![CDATA[
//!export-start
let _pb_isRunning = false;
//!export-end

function init() {
  update();
}

// FUXA Variable Mappings
let variables = {
      running: 'generator_running',           // boolean
      voltage: 'generator_voltage',           // V
      frequency: 'generator_frequency',       // Hz
      power: 'generator_power',               // kW
      load: 'generator_load',                 // %
      fuelLevel: 'generator_fuel_level',      // %
      runtime: 'generator_runtime',           // seconds
      alarm: 'generator_alarm'                // boolean
    };

    // Configuration
let config = {
      nominalVoltage: 480,    // V
      nominalFreq: 60,        // Hz
      maxPower: 500,          // kW
      lowFuelThreshold: 25,   // %
      criticalFuelThreshold: 10 // %
    };

    // Update function called by FUXA
    function updateValues(tag, value) {
      try {
        switch(tag) {
          case variables.running:
            updateRunning(value);
            break;
          case variables.voltage:
            updateVoltage(value);
            break;
          case variables.frequency:
            updateFrequency(value);
            break;
          case variables.power:
            updatePower(value);
            break;
          case variables.load:
            updateLoad(value);
            break;
          case variables.fuelLevel:
            updateFuelLevel(value);
            break;
          case variables.runtime:
            updateRuntime(value);
            break;
          case variables.alarm:
            updateAlarmStatus(value);
            break;
        }
      } catch(e) {
        console.error('Error updating generator:', e);
      }
    }

    function updateRunning(value) {
      _pb_isRunning = Boolean(value);
const statusText = document.getElementById('runStatus');
const genStatusText = document.getElementById('genStatusText');
const statusIndicator = document.getElementById('statusIndicator');
const rotatingIndicator = document.getElementById('rotatingIndicator');
let exhausts = [document.getElementById('exhaust1'), document.getElementById('exhaust2')];

      if (_pb_isRunning) {
        statusText.textContent = 'RUNNING';
        statusText.setAttribute('fill', '#00ff00');
        genStatusText.textContent = 'ONLINE';
        statusIndicator.setAttribute('class', 'status-ok');

        // Add rotation animation
let animateTransform = document.createElementNS('http://www.w3.org/2000/svg', 'animateTransform');
        animateTransform.setAttribute('attributeName', 'transform');
        animateTransform.setAttribute('type', 'rotate');
        animateTransform.setAttribute('from', '0 20 0');
        animateTransform.setAttribute('to', '360 20 0');
        animateTransform.setAttribute('dur', '2s');
        animateTransform.setAttribute('repeatCount', 'indefinite');
let oldAnims = rotatingIndicator.getElementsByTagName('animateTransform');
        while (oldAnims.length > 0) {
          rotatingIndicator.removeChild(oldAnims[0]);
        }

        rotatingIndicator.appendChild(animateTransform);

        // Show exhaust
        exhausts.forEach(function(exhaust) {
          exhaust.style.display = 'block';
        });
      } else {
        statusText.textContent = 'STOPPED';
        statusText.setAttribute('fill', '#666666');
        genStatusText.textContent = 'STANDBY';
        statusIndicator.setAttribute('class', 'status-off');

        // Remove rotation animation
let oldAnims = rotatingIndicator.getElementsByTagName('animateTransform');
        while (oldAnims.length > 0) {
          rotatingIndicator.removeChild(oldAnims[0]);
        }

        // Hide exhaust
        exhausts.forEach(function(exhaust) {
          exhaust.style.display = 'none';
        });
      }
    }

    function updateVoltage(value) {
let voltage = parseFloat(value) || 0;
      document.getElementById('voltageValue').textContent = voltage.toFixed(0);
const valueText = document.getElementById('voltageValue');
let deviation = Math.abs(voltage - config.nominalVoltage) / config.nominalVoltage;

      if (_pb_isRunning && deviation > 0.1) {
        valueText.setAttribute('fill', '#ff0000');
      } else if (_pb_isRunning && deviation > 0.05) {
        valueText.setAttribute('fill', '#ffaa00');
      } else {
        valueText.setAttribute('fill', '#ffffff');
      }
    }

    function updateFrequency(value) {
let freq = parseFloat(value) || 0;
      document.getElementById('frequencyValue').textContent = freq.toFixed(1);
const valueText = document.getElementById('frequencyValue');
let deviation = Math.abs(freq - config.nominalFreq) / config.nominalFreq;

      if (_pb_isRunning && deviation > 0.03) {
        valueText.setAttribute('fill', '#ff0000');
      } else if (_pb_isRunning && deviation > 0.01) {
        valueText.setAttribute('fill', '#ffaa00');
      } else {
        valueText.setAttribute('fill', '#ffffff');
      }
    }

    function updatePower(value) {
let power = parseFloat(value) || 0;
      document.getElementById('powerValue').textContent = power.toFixed(0);
    }

    function updateLoad(value) {
let load = parseFloat(value) || 0;
      document.getElementById('loadValue').textContent = load.toFixed(0);
const valueText = document.getElementById('loadValue');
      if (load > 100) {
        valueText.setAttribute('fill', '#ff0000');
      } else if (load > 90) {
        valueText.setAttribute('fill', '#ffaa00');
      } else {
        valueText.setAttribute('fill', '#ffffff');
      }
    }

    function updateFuelLevel(value) {
let fuel = parseFloat(value) || 0;
      document.getElementById('fuelValue').textContent = fuel.toFixed(0) + '%';

      // Update fuel bar (inverted - fills from bottom)
let barHeight = (fuel / 100) * 38;
const fuelBar = document.getElementById('fuelBar');
      fuelBar.setAttribute('height', barHeight);
      fuelBar.setAttribute('y', 18 - barHeight);

      // Change color based on fuel level
const valueText = document.getElementById('fuelValue');
      if (fuel <= config.criticalFuelThreshold) {
        fuelBar.setAttribute('fill', '#ff0000');
        valueText.setAttribute('fill', '#ff0000');
      } else if (fuel <= config.lowFuelThreshold) {
        fuelBar.setAttribute('fill', '#ffaa00');
        valueText.setAttribute('fill', '#ffaa00');
      } else {
        fuelBar.setAttribute('fill', '#00ff00');
        valueText.setAttribute('fill', '#ffffff');
      }
    }

    function updateRuntime(value) {
let seconds = parseInt(value) || 0;
let hours = Math.floor(seconds / 3600);
let minutes = Math.floor((seconds % 3600) / 60);
let secs = seconds % 60;
let timeStr = pad(hours) + ':' + pad(minutes) + ':' + pad(secs);
      document.getElementById('runtimeValue').textContent = timeStr;
    }

    function pad(num) {
      return num < 10 ? '0' + num : num;
    }

    function updateAlarmStatus(value) {
let alarm = Boolean(value);
const indicator = document.getElementById('statusIndicator');

      if (alarm) {
        indicator.setAttribute('class', 'status-alarm');

        // Add pulse animation
        indicator.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';
      } else if (_pb_isRunning) {
        indicator.setAttribute('class', 'status-ok');
        indicator.innerHTML = '';
      } else {
        indicator.setAttribute('class', 'status-off');
        indicator.innerHTML = '';
      }
    }

    // Initialize
    if (typeof window !== 'undefined') {
      window.updateValues = updateValues;
    }

function putValue(id, value) {
  if (id === '_pb_isRunning') {
    _pb_isRunning = !!value;
    update();
  }
}

init();

]]></script>
</svg>
