<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 550" id="btu-meter">
  <defs>
    <style>
      .meter-bg { fill: #f5f7fa; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #ff6600; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #1976d2; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #546e7a; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .supply-color { fill: #ff4444; }
      .return-color { fill: #4444ff; }
      .delta-color { fill: #ffaa00; }
      .gauge-bg { fill: none; stroke: #333; stroke-width: 6; }
      .gauge-fill { fill: none; stroke: #ff6600; stroke-width: 6; stroke-linecap: round; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="530" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">BTU ENERGY METER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- BTU Rate Display (Large) -->
  <g id="btuRateDisplay">
    <text class="label-text" x="200" y="65" text-anchor="middle">ENERGY RATE</text>
    <text id="btuRateValue" class="value-text" x="200" y="95" text-anchor="middle" font-size="32">0</text>
    <text class="unit-text" x="200" y="115" text-anchor="middle">MBTU/Hr</text>
  </g>

  <!-- Energy Gauge -->
  <g id="energyGauge" transform="translate(200, 180)">
    <circle class="gauge-bg" r="50" cx="0" cy="0"/>
    <circle id="energyGaugeFill" class="gauge-fill" r="50" cx="0" cy="0"
            stroke-dasharray="314" stroke-dashoffset="314"
            transform="rotate(-90)"/>
    <text id="energyPercent" class="value-text" x="0" y="5" text-anchor="middle" font-size="14">0%</text>
  </g>

  <!-- Temperature Displays -->
  <g id="supplyTempDisplay">
    <rect class="meter-bg" x="25" y="250" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="270" text-anchor="middle">SUPPLY TEMP</text>
    <circle class="supply-color" cx="70" cy="265" r="4"/>
    <text id="supplyTempValue" class="value-text" x="107.5" y="300" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="320" text-anchor="middle">°F</text>
  </g>

  <g id="returnTempDisplay">
    <rect class="meter-bg" x="210" y="250" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="270" text-anchor="middle">RETURN TEMP</text>
    <circle class="return-color" cx="255" cy="265" r="4"/>
    <text id="returnTempValue" class="value-text" x="292.5" y="300" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="320" text-anchor="middle">°F</text>
  </g>

  <!-- Delta-T Display -->
  <g id="deltaTDisplay">
    <rect class="meter-bg" x="25" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="365" text-anchor="middle">DELTA-T</text>
    <circle class="delta-color" cx="70" cy="360" r="4"/>
    <text id="deltaTValue" class="value-text" x="107.5" y="395" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="415" text-anchor="middle">°F</text>
  </g>

  <!-- Flow Rate Display -->
  <g id="flowRateDisplay">
    <rect class="meter-bg" x="210" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="365" text-anchor="middle">FLOW RATE</text>
    <text id="flowRateValue" class="value-text" x="292.5" y="395" text-anchor="middle">0.0</text>
    <text class="unit-text" x="292.5" y="415" text-anchor="middle">GPM</text>
  </g>

  <!-- Total Energy Display -->
  <g id="totalEnergyDisplay">
    <rect class="meter-bg" x="25" y="440" width="350" height="70" rx="5"/>
    <text class="label-text" x="200" y="460" text-anchor="middle">TOTAL ENERGY CONSUMED</text>
    <text id="totalEnergyValue" class="value-text" x="200" y="490" text-anchor="middle">0.00</text>
    <text class="unit-text" x="280" y="490">MMBTU</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_btuRate = 0;         // Energy rate (BTU/Hr)
let _pn_supplyTemp = 0;      // Supply temperature (°F)
let _pn_returnTemp = 0;      // Return temperature (°F)
let _pn_deltaT = 0;          // Delta-T (°F)
let _pn_flowRate = 0;        // Flow rate (GPM)
let _pn_totalEnergy = 0;     // Total energy (MMBTU - Million BTU)
let _pn_alarm = 0;           // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const btuRateValue = document.getElementById('btuRateValue');
  const energyPercent = document.getElementById('energyPercent');
  const gaugeFill = document.getElementById('energyGaugeFill');
  const supplyTempValue = document.getElementById('supplyTempValue');
  const returnTempValue = document.getElementById('returnTempValue');
  const deltaTValue = document.getElementById('deltaTValue');
  const flowRateValue = document.getElementById('flowRateValue');
  const totalEnergyValue = document.getElementById('totalEnergyValue');
  const statusIndicator = document.getElementById('statusIndicator');

  if (!btuRateValue) return;

  // Configuration
  const maxBTURate = 10000;  // MBTU/Hr
  const minDeltaT = 5;       // °F
  const maxDeltaT = 50;      // °F

  // Display BTU rate in MBTU/Hr (thousands)
  const displayValue = _pn_btuRate / 1000;
  btuRateValue.textContent = displayValue.toFixed(0);

  // Update gauge
  const percent = Math.min((_pn_btuRate / maxBTURate) * 100, 100);
  energyPercent.textContent = percent.toFixed(0) + '%';
  const circumference = 2 * Math.PI * 50;
  const offset = circumference - (percent / 100) * circumference;
  gaugeFill.setAttribute('stroke-dashoffset', offset);

  // Change color based on load
  if (percent > 90) {
    gaugeFill.setAttribute('stroke', '#ff0000');
  } else if (percent > 75) {
    gaugeFill.setAttribute('stroke', '#ffaa00');
  } else {
    gaugeFill.setAttribute('stroke', '#ff6600');
  }

  // Update supply temperature
  supplyTempValue.textContent = _pn_supplyTemp.toFixed(1);

  // Update return temperature
  returnTempValue.textContent = _pn_returnTemp.toFixed(1);

  // Update delta-T
  deltaTValue.textContent = _pn_deltaT.toFixed(1);
  if (_pn_deltaT < minDeltaT) {
    deltaTValue.setAttribute('fill', '#ffaa00');
  } else if (_pn_deltaT > maxDeltaT) {
    deltaTValue.setAttribute('fill', '#ff0000');
  } else {
    deltaTValue.setAttribute('fill', '#1976d2');
  }

  // Update flow rate
  flowRateValue.textContent = _pn_flowRate.toFixed(1);

  // Update total energy
  totalEnergyValue.textContent = _pn_totalEnergy.toFixed(2);

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
  } else {
    statusIndicator.setAttribute('class', 'status-ok');
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_btuRate') {
    _pn_btuRate = num;
  } else if (id === '_pn_supplyTemp') {
    _pn_supplyTemp = num;
  } else if (id === '_pn_returnTemp') {
    _pn_returnTemp = num;
  } else if (id === '_pn_deltaT') {
    _pn_deltaT = num;
  } else if (id === '_pn_flowRate') {
    _pn_flowRate = num;
  } else if (id === '_pn_totalEnergy') {
    _pn_totalEnergy = num;
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
