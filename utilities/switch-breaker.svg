<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 450" id="switch-breaker">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00d4ff; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .status-off { fill: #666666; }
      .breaker-body { fill: #2a2a3e; stroke: #404060; stroke-width: 2; }
      .switch-handle { fill: #606080; stroke: #404060; stroke-width: 2; }
      .contact-closed { stroke: #00ff00; stroke-width: 4; }
      .contact-open { stroke: #ff0000; stroke-width: 4; stroke-dasharray: 5,5; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="430" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">CIRCUIT BREAKER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Breaker Name/ID -->
  <g id="breakerID">
    <text class="label-text" x="200" y="60" text-anchor="middle">BREAKER ID</text>
    <text id="breakerName" class="value-text" x="200" y="82" text-anchor="middle" font-size="16">CB-001</text>
  </g>

  <!-- Visual Breaker Representation -->
  <g id="breakerVisual" transform="translate(200, 180)">
    <!-- Breaker Body -->
    <rect class="breaker-body" x="-60" y="-80" width="120" height="160" rx="10"/>

    <!-- Trip Indicator -->
    <circle id="tripIndicator" class="status-off" cx="0" cy="-50" r="8"/>
    <text class="label-text" x="0" y="-28" text-anchor="middle">TRIP</text>

    <!-- Switch Handle -->
    <g id="switchHandle">
      <rect class="switch-handle" x="-15" y="-10" width="30" height="60" rx="5"/>
      <circle class="status-off" cx="0" cy="20" r="8"/>
    </g>

    <!-- Position Labels -->
    <text class="label-text" x="-45" y="-5" text-anchor="end">ON</text>
    <text class="label-text" x="45" y="45" text-anchor="start">OFF</text>

    <!-- Contacts Visualization -->
    <g transform="translate(0, 100)">
      <line id="contactLine" class="contact-open" x1="-30" y1="-10" x2="30" y2="-10"/>
      <circle class="status-off" cx="-30" cy="-10" r="5"/>
      <circle class="status-off" cx="30" cy="-10" r="5"/>
    </g>
  </g>

  <!-- Status Display -->
  <g id="statusDisplay">
    <rect class="meter-bg" x="25" y="280" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="300" text-anchor="middle">STATUS</text>
    <text id="statusText" class="value-text" x="200" y="322" text-anchor="middle" fill="#666666">OFF</text>
  </g>

  <!-- Current Display -->
  <g id="currentDisplay">
    <rect class="meter-bg" x="25" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="365" text-anchor="middle">CURRENT</text>
    <text id="currentValue" class="value-text" x="107.5" y="395" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="415" text-anchor="middle">A</text>
  </g>

  <!-- Rating Display -->
  <g id="ratingDisplay">
    <rect class="meter-bg" x="210" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="365" text-anchor="middle">RATING</text>
    <text id="ratingValue" class="value-text" x="292.5" y="395" text-anchor="middle">100</text>
    <text class="unit-text" x="292.5" y="415" text-anchor="middle">A</text>
  </g>

  <script type="text/javascript">
  <![CDATA[
    // FUXA Variable Mappings
    var variables = {
      status: 'breaker_status',           // boolean (true=ON, false=OFF)
      current: 'breaker_current',         // Amps
      rating: 'breaker_rating',           // Amps (max rating)
      tripped: 'breaker_tripped',         // boolean
      name: 'breaker_name',               // string
      command: 'breaker_command'          // boolean (control)
    };

    // Configuration
    var config = {
      tripThreshold: 0.9,    // 90% of rating
      warnThreshold: 0.75    // 75% of rating
    };

    var currentRating = 100;  // Default rating
    var isOn = false;
    var isTripped = false;

    // Update function called by FUXA
    function updateValues(tag, value) {
      try {
        switch(tag) {
          case variables.status:
            updateStatus(value);
            break;
          case variables.current:
            updateCurrent(value);
            break;
          case variables.rating:
            updateRating(value);
            break;
          case variables.tripped:
            updateTripped(value);
            break;
          case variables.name:
            updateName(value);
            break;
          case variables.command:
            handleCommand(value);
            break;
        }
      } catch(e) {
        console.error('Error updating breaker:', e);
      }
    }

    function updateStatus(value) {
      isOn = Boolean(value);
      updateBreakerVisualization();
    }

    function updateCurrent(value) {
      var current = parseFloat(value) || 0;
      document.getElementById('currentValue').textContent = current.toFixed(1);

      // Check for overload
      var loadPercent = current / currentRating;
      var valueText = document.getElementById('currentValue');

      if (loadPercent >= config.tripThreshold) {
        valueText.setAttribute('fill', '#ff0000');
      } else if (loadPercent >= config.warnThreshold) {
        valueText.setAttribute('fill', '#ffaa00');
      } else {
        valueText.setAttribute('fill', '#ffffff');
      }

      // Auto-trip if overload and breaker is on
      if (isOn && loadPercent >= 1.0 && !isTripped) {
        updateTripped(true);
      }
    }

    function updateRating(value) {
      currentRating = parseFloat(value) || 100;
      document.getElementById('ratingValue').textContent = currentRating.toFixed(0);
    }

    function updateTripped(value) {
      isTripped = Boolean(value);

      var tripIndicator = document.getElementById('tripIndicator');
      var statusIndicator = document.getElementById('statusIndicator');

      if (isTripped) {
        tripIndicator.setAttribute('class', 'status-alarm');
        statusIndicator.setAttribute('class', 'status-alarm');

        // Add pulsing animation
        tripIndicator.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';

        // Force breaker off
        isOn = false;
        updateBreakerVisualization();
      } else {
        tripIndicator.setAttribute('class', 'status-off');
        tripIndicator.innerHTML = '';

        if (isOn) {
          statusIndicator.setAttribute('class', 'status-ok');
        } else {
          statusIndicator.setAttribute('class', 'status-off');
        }
      }
    }

    function updateName(value) {
      document.getElementById('breakerName').textContent = value || 'CB-001';
    }

    function handleCommand(value) {
      var command = Boolean(value);

      // Cannot close if tripped
      if (command && isTripped) {
        console.warn('Cannot close breaker - TRIPPED');
        return;
      }

      updateStatus(command);
    }

    function updateBreakerVisualization() {
      var handle = document.getElementById('switchHandle');
      var statusText = document.getElementById('statusText');
      var contactLine = document.getElementById('contactLine');
      var statusIndicator = document.getElementById('statusIndicator');

      if (isOn && !isTripped) {
        // ON position
        handle.setAttribute('transform', 'rotate(-30)');
        statusText.textContent = 'ON';
        statusText.setAttribute('fill', '#00ff00');
        contactLine.setAttribute('class', 'contact-closed');
        statusIndicator.setAttribute('class', 'status-ok');

        // Animate switch
        animateSwitch(handle, -30);
      } else {
        // OFF position
        handle.setAttribute('transform', 'rotate(30)');
        statusText.textContent = isTripped ? 'TRIPPED' : 'OFF';
        statusText.setAttribute('fill', isTripped ? '#ff0000' : '#666666');
        contactLine.setAttribute('class', 'contact-open');

        if (!isTripped) {
          statusIndicator.setAttribute('class', 'status-off');
        }

        // Animate switch
        animateSwitch(handle, 30);
      }
    }

    function animateSwitch(element, toAngle) {
      // Simple rotation animation
      var animateTransform = document.createElementNS('http://www.w3.org/2000/svg', 'animateTransform');
      animateTransform.setAttribute('attributeName', 'transform');
      animateTransform.setAttribute('type', 'rotate');
      animateTransform.setAttribute('from', '0 0 0');
      animateTransform.setAttribute('to', toAngle + ' 0 0');
      animateTransform.setAttribute('dur', '0.3s');
      animateTransform.setAttribute('fill', 'freeze');

      // Remove old animations
      var oldAnims = element.getElementsByTagName('animateTransform');
      while (oldAnims.length > 0) {
        element.removeChild(oldAnims[0]);
      }

      element.appendChild(animateTransform);
      animateTransform.beginElement();
    }

    // Initialize
    if (typeof window !== 'undefined') {
      window.updateValues = updateValues;
    }

    // Initialize display
    updateBreakerVisualization();
  ]]>
  </script>
</svg>
