<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 450" id="switch-breaker">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00d4ff; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .status-off { fill: #666666; }
      .breaker-body { fill: #2a2a3e; stroke: #404060; stroke-width: 2; }
      .switch-handle { fill: #606080; stroke: #404060; stroke-width: 2; }
      .contact-closed { stroke: #00ff00; stroke-width: 4; }
      .contact-open { stroke: #ff0000; stroke-width: 4; stroke-dasharray: 5,5; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="430" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">CIRCUIT BREAKER</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- Breaker Name/ID -->
  <g id="breakerID">
    <text class="label-text" x="200" y="60" text-anchor="middle">BREAKER ID</text>
    <text id="breakerName" class="value-text" x="200" y="82" text-anchor="middle" font-size="16">CB-001</text>
  </g>

  <!-- Visual Breaker Representation -->
  <g id="breakerVisual" transform="translate(200, 180)">
    <!-- Breaker Body -->
    <rect class="breaker-body" x="-60" y="-80" width="120" height="160" rx="10"/>

    <!-- Trip Indicator -->
    <circle id="tripIndicator" class="status-off" cx="0" cy="-50" r="8"/>
    <text class="label-text" x="0" y="-28" text-anchor="middle">TRIP</text>

    <!-- Switch Handle -->
    <g id="switchHandle">
      <rect class="switch-handle" x="-15" y="-10" width="30" height="60" rx="5"/>
      <circle class="status-off" cx="0" cy="20" r="8"/>
    </g>

    <!-- Position Labels -->
    <text class="label-text" x="-45" y="-5" text-anchor="end">ON</text>
    <text class="label-text" x="45" y="45" text-anchor="start">OFF</text>

    <!-- Contacts Visualization -->
    <g transform="translate(0, 100)">
      <line id="contactLine" class="contact-open" x1="-30" y1="-10" x2="30" y2="-10"/>
      <circle class="status-off" cx="-30" cy="-10" r="5"/>
      <circle class="status-off" cx="30" cy="-10" r="5"/>
    </g>
  </g>

  <!-- Status Display -->
  <g id="statusDisplay">
    <rect class="meter-bg" x="25" y="280" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="300" text-anchor="middle">STATUS</text>
    <text id="statusText" class="value-text" x="200" y="322" text-anchor="middle" fill="#666666">OFF</text>
  </g>

  <!-- Current Display -->
  <g id="currentDisplay">
    <rect class="meter-bg" x="25" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="365" text-anchor="middle">CURRENT</text>
    <text id="currentValue" class="value-text" x="107.5" y="395" text-anchor="middle">0.0</text>
    <text class="unit-text" x="107.5" y="415" text-anchor="middle">A</text>
  </g>

  <!-- Rating Display -->
  <g id="ratingDisplay">
    <rect class="meter-bg" x="210" y="345" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="365" text-anchor="middle">RATING</text>
    <text id="ratingValue" class="value-text" x="292.5" y="395" text-anchor="middle">100</text>
    <text class="unit-text" x="292.5" y="415" text-anchor="middle">A</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_status = 0;          // Status: 0=OFF, 1=ON
let _pn_current = 0;         // Current (Amps)
let _pn_rating = 100;        // Rating (Amps)
let _pn_tripped = 0;         // Tripped: 0=normal, 1=tripped
let _ps_name = "CB-001";     // Breaker name/ID
//!export-end

function init() {
  update();
}

function update() {
  const handle = document.getElementById('switchHandle');
  const statusText = document.getElementById('statusText');
  const contactLine = document.getElementById('contactLine');
  const statusIndicator = document.getElementById('statusIndicator');
  const tripIndicator = document.getElementById('tripIndicator');
  const currentValue = document.getElementById('currentValue');
  const ratingValue = document.getElementById('ratingValue');
  const breakerName = document.getElementById('breakerName');

  if (!handle) return;

  // Configuration
  const tripThreshold = 0.9;   // 90% of rating
  const warnThreshold = 0.75;  // 75% of rating

  const isOn = _pn_status > 0;
  const isTripped = _pn_tripped > 0;

  // Update breaker name
  breakerName.textContent = _ps_name;

  // Update current display
  currentValue.textContent = _pn_current.toFixed(1);
  const loadPercent = _pn_current / _pn_rating;

  if (loadPercent >= tripThreshold) {
    currentValue.setAttribute('fill', '#ff0000');
  } else if (loadPercent >= warnThreshold) {
    currentValue.setAttribute('fill', '#ffaa00');
  } else {
    currentValue.setAttribute('fill', '#ffffff');
  }

  // Update rating display
  ratingValue.textContent = _pn_rating.toFixed(0);

  // Update trip indicator
  if (isTripped) {
    tripIndicator.setAttribute('class', 'status-alarm');
    statusIndicator.setAttribute('class', 'status-alarm');
    tripIndicator.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';
  } else {
    tripIndicator.setAttribute('class', 'status-off');
    tripIndicator.innerHTML = '';

    if (isOn) {
      statusIndicator.setAttribute('class', 'status-ok');
    } else {
      statusIndicator.setAttribute('class', 'status-off');
    }
  }

  // Update breaker visualization
  if (isOn && !isTripped) {
    // ON position
    handle.setAttribute('transform', 'rotate(-30)');
    statusText.textContent = 'ON';
    statusText.setAttribute('fill', '#00ff00');
    contactLine.setAttribute('class', 'contact-closed');
    statusIndicator.setAttribute('class', 'status-ok');

    animateSwitch(handle, -30);
  } else {
    // OFF position
    handle.setAttribute('transform', 'rotate(30)');
    statusText.textContent = isTripped ? 'TRIPPED' : 'OFF';
    statusText.setAttribute('fill', isTripped ? '#ff0000' : '#666666');
    contactLine.setAttribute('class', 'contact-open');

    if (!isTripped) {
      statusIndicator.setAttribute('class', 'status-off');
    }

    animateSwitch(handle, 30);
  }
}

function animateSwitch(element, toAngle) {
  const animateTransform = document.createElementNS('http://www.w3.org/2000/svg', 'animateTransform');
  animateTransform.setAttribute('attributeName', 'transform');
  animateTransform.setAttribute('type', 'rotate');
  animateTransform.setAttribute('from', '0 0 0');
  animateTransform.setAttribute('to', toAngle + ' 0 0');
  animateTransform.setAttribute('dur', '0.3s');
  animateTransform.setAttribute('fill', 'freeze');

  let oldAnims = element.getElementsByTagName('animateTransform');
  while (oldAnims.length > 0) {
    element.removeChild(oldAnims[0]);
  }

  element.appendChild(animateTransform);
  animateTransform.beginElement();
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_status') {
    _pn_status = num;
  } else if (id === '_pn_current') {
    _pn_current = num;
  } else if (id === '_pn_rating') {
    _pn_rating = num;
  } else if (id === '_pn_tripped') {
    _pn_tripped = num;
  } else if (id === '_ps_name') {
    _ps_name = String(value);
  }

  update();
}

init();
]]></script>
</svg>
