<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 420 500" id="power-meter-enhanced">
  <defs>
    <style>
      /* Meter Body */
      .meter-body { fill: url(#meterBodyGradient); stroke: #ffffff; stroke-width: 2; }
      .meter-bezel { fill: url(#bezelGradient); stroke: #e0e0e0; stroke-width: 1.5; }
      .display-bg { fill: #263238; stroke: #546e7a; stroke-width: 1; }

      /* Text Styles */
      .title-text { font-family: 'Segoe UI', Arial, sans-serif; font-size: 18px; fill: #1976d2; font-weight: 700; text-anchor: middle; letter-spacing: 1px; }
      .label-text { font-family: 'Segoe UI', Arial, sans-serif; font-size: 11px; fill: #b0bec5; font-weight: 600; text-anchor: middle; }
      .value-text { font-family: 'Orbitron', 'Consolas', monospace; font-size: 22px; fill: #1976d2; font-weight: 700; text-anchor: middle; }
      .value-text-large { font-family: 'Orbitron', 'Consolas', monospace; font-size: 36px; fill: #1976d2; font-weight: 700; text-anchor: middle; }
      .unit-text { font-family: 'Segoe UI', Arial, sans-serif; font-size: 13px; fill: #64b5f6; font-weight: 600; }
      .sub-value { font-family: 'Consolas', monospace; font-size: 16px; fill: #1976d2; font-weight: 600; text-anchor: middle; }

      /* Status Indicators */
      .status-ok { fill: #27ae60; }
      .status-warning { fill: #f39c12; }
      .status-alarm { fill: #e74c3c; }
      .status-inactive { fill: #f5f7fa; }

      /* Gauge Elements */
      .gauge-bg { fill: none; stroke: #ffffff; stroke-width: 10; stroke-linecap: round; }
      .gauge-track { fill: none; stroke: #e0e0e0; stroke-width: 10; stroke-linecap: round; }
      .gauge-fill-low { fill: none; stroke: #27ae60; stroke-width: 10; stroke-linecap: round; }
      .gauge-fill-med { fill: none; stroke: #f39c12; stroke-width: 10; stroke-linecap: round; }
      .gauge-fill-high { fill: none; stroke: #e74c3c; stroke-width: 10; stroke-linecap: round; }

      /* Data Boxes */
      .data-box { fill: #e0e0e0; stroke: #ffffff; stroke-width: 1.5; }
      .data-box-highlight { fill: rgba(52, 152, 219, 0.1); }

      /* LED segments */
      .led-segment { fill: #1976d2; filter: url(#glow); }
      .led-dot { fill: #1976d2; }

      /* Animations */
      .power-pulse { animation: powerPulse 2s ease-in-out infinite; }
      .alarm-flash { animation: alarmFlash 0.8s ease-in-out infinite; }

      @keyframes powerPulse {
        0%, 100% { opacity: 0.8; }
        50% { opacity: 1; }
      }
      @keyframes alarmFlash {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
      }
    </style>

    <!-- Gradients -->
    <linearGradient id="meterBodyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f5f7fa;stop-opacity:1" />
    </linearGradient>

    <linearGradient id="bezelGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#cfd8dc;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#b0bec5;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#90a4ae;stop-opacity:1" />
    </linearGradient>

    <!-- Filters -->
    <filter id="glow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <filter id="dropShadow">
      <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
      <feOffset dx="0" dy="4" result="offsetblur"/>
      <feComponentTransfer>
        <feFuncA type="linear" slope="0.15"/>
      </feComponentTransfer>
      <feMerge>
        <feMergeNode/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Meter Body -->
  <rect class="meter-body" x="10" y="10" width="400" height="480" rx="15" filter="url(#dropShadow)"/>

  <!-- Bezel Frame -->
  <rect class="meter-bezel" x="20" y="20" width="380" height="460" rx="10"/>

  <!-- Header Section -->
  <g id="header">
    <circle id="statusIndicator" cx="375" cy="45" r="9" class="status-ok"/>
  </g>

  <!-- Main Power Display -->
  <g id="mainDisplay">
    <rect class="display-bg" x="35" y="40" width="350" height="110" rx="8"/>
    <rect class="data-box-highlight" x="35" y="40" width="350" height="25" rx="8"/>
    <text class="label-text" x="210" y="57">REAL POWER</text>

    <text id="powerValue" class="value-text-large" x="210" y="100">0.00</text>
    <text class="unit-text" x="210" y="128">kW</text>

    <!-- Power bar indicator -->
    <rect x="50" y="135" width="320" height="8" rx="4" fill="#e0e0e0"/>
    <rect id="powerBar" x="50" y="135" width="0" height="8" rx="4" fill="url(#powerBarGradient)"/>

    <linearGradient id="powerBarGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#27ae60"/>
      <stop offset="70%" style="stop-color:#f39c12"/>
      <stop offset="100%" style="stop-color:#e74c3c"/>
    </linearGradient>
  </g>

  <!-- Circular Power Gauge -->
  <g id="powerGauge" transform="translate(210, 245)">
    <circle class="gauge-track" r="70" cx="0" cy="0" transform="rotate(-90)"/>
    <circle id="powerGaugeFill" class="gauge-fill-low" r="70" cx="0" cy="0"
            stroke-dasharray="439.8" stroke-dashoffset="439.8" transform="rotate(-90)"/>

    <!-- Center display -->
    <circle cx="0" cy="0" r="55" class="display-bg"/>
    <text id="powerPercent" class="value-text" x="0" y="-5">0</text>
    <text class="unit-text" x="0" y="15" text-anchor="middle">% LOAD</text>
  </g>

  <!-- Electrical Parameters Grid -->
  <g id="parametersGrid">
    <!-- Row 1: Voltage and Current -->
    <g id="voltage">
      <rect class="data-box" x="35" y="340" width="165" height="70" rx="6"/>
      <text class="label-text" x="117.5" y="358">VOLTAGE (Ph-Ph)</text>
      <text id="voltageValue" class="sub-value" x="117.5" y="385">0</text>
      <text class="unit-text" x="117.5" y="403" text-anchor="middle">V</text>
    </g>

    <g id="current">
      <rect class="data-box" x="220" y="340" width="165" height="70" rx="6"/>
      <text class="label-text" x="302.5" y="358">CURRENT (per phase)</text>
      <text id="currentValue" class="sub-value" x="302.5" y="385">0.0</text>
      <text class="unit-text" x="302.5" y="403" text-anchor="middle">A</text>
    </g>

    <!-- Row 2: Power Factor and Frequency -->
    <g id="powerFactor">
      <rect class="data-box" x="35" y="420" width="165" height="60" rx="6"/>
      <text class="label-text" x="117.5" y="438">POWER FACTOR</text>
      <text id="pfValue" class="sub-value" x="117.5" y="463">1.00</text>
      <circle id="pfIndicator" cx="117.5" cy="472" r="4" class="status-ok"/>
    </g>

    <g id="frequency">
      <rect class="data-box" x="220" y="420" width="80" height="60" rx="6"/>
      <text class="label-text" x="260" y="438">FREQ</text>
      <text id="freqValue" class="sub-value" x="260" y="463" font-size="14">60.0</text>
      <text class="unit-text" x="260" y="475" text-anchor="middle" font-size="9">Hz</text>
    </g>

    <g id="demand">
      <rect class="data-box" x="310" y="420" width="75" height="60" rx="6"/>
      <text class="label-text" x="347.5" y="438">DEMAND</text>
      <text id="demandValue" class="sub-value" x="347.5" y="463" font-size="13">0</text>
      <text class="unit-text" x="347.5" y="475" text-anchor="middle" font-size="9">kW</text>
    </g>
  </g>

  <script><![CDATA[
//!export-start
// Power Meter datapoints mapped to BMS_Device_Datapoint_Catalog.csv
let _pn_realPower = 0;           // Real Power (kW)
let _pn_voltage = 0;             // Voltage Ph-Ph (V)
let _pn_current = 0;             // Current per phase (A)
let _pn_powerFactor = 1.0;       // Power Factor (PF)
let _pn_frequency = 60;          // Frequency (Hz)
let _pn_energy = 0;              // Energy (kWh)
let _pn_demand = 0;              // Demand (kW)
let _pn_alarm = 0;               // Alarm status (0=normal, 1=alarm)
let _pn_maxPower = 500;          // Maximum power rating (kW) for % calculation
//!export-end

function init() {
  update();
}

function update() {
  updatePowerDisplay();
  updateGauge();
  updateParameters();
  updateStatus();
}

function updatePowerDisplay() {
  const powerValueEl = document.getElementById('powerValue');
  const powerBar = document.getElementById('powerBar');

  if (powerValueEl) {
    powerValueEl.textContent = _pn_realPower.toFixed(2);
  }

  // Update power bar (0-320px width)
  if (powerBar) {
    const percentage = Math.min((_pn_realPower / _pn_maxPower) * 100, 100);
    const barWidth = (percentage / 100) * 320;
    powerBar.setAttribute('width', barWidth);
  }
}

function updateGauge() {
  const gaugeFill = document.getElementById('powerGaugeFill');
  const powerPercent = document.getElementById('powerPercent');

  if (!gaugeFill || !powerPercent) return;

  const percentage = Math.min((_pn_realPower / _pn_maxPower) * 100, 100);
  const circumference = 439.8;
  const offset = circumference - (percentage / 100) * circumference;

  gaugeFill.setAttribute('stroke-dashoffset', offset);
  powerPercent.textContent = Math.round(percentage);

  // Change gauge color based on load
  if (percentage < 60) {
    gaugeFill.setAttribute('class', 'gauge-fill-low power-pulse');
  } else if (percentage < 85) {
    gaugeFill.setAttribute('class', 'gauge-fill-med');
  } else {
    gaugeFill.setAttribute('class', 'gauge-fill-high');
  }
}

function updateParameters() {
  // Voltage
  const voltageEl = document.getElementById('voltageValue');
  if (voltageEl) voltageEl.textContent = Math.round(_pn_voltage);

  // Current
  const currentEl = document.getElementById('currentValue');
  if (currentEl) currentEl.textContent = _pn_current.toFixed(1);

  // Power Factor
  const pfEl = document.getElementById('pfValue');
  const pfIndicator = document.getElementById('pfIndicator');
  if (pfEl) pfEl.textContent = _pn_powerFactor.toFixed(2);

  if (pfIndicator) {
    if (_pn_powerFactor >= 0.95) {
      pfIndicator.setAttribute('class', 'status-ok');
    } else if (_pn_powerFactor >= 0.85) {
      pfIndicator.setAttribute('class', 'status-warning');
    } else {
      pfIndicator.setAttribute('class', 'status-alarm');
    }
  }

  // Frequency
  const freqEl = document.getElementById('freqValue');
  if (freqEl) freqEl.textContent = _pn_frequency.toFixed(1);

  // Demand
  const demandEl = document.getElementById('demandValue');
  if (demandEl) demandEl.textContent = Math.round(_pn_demand);
}

function updateStatus() {
  const statusInd = document.getElementById('statusIndicator');
  if (!statusInd) return;

  if (_pn_alarm === 1) {
    statusInd.setAttribute('class', 'status-alarm alarm-flash');
  } else {
    const loadPercent = (_pn_realPower / _pn_maxPower) * 100;
    if (loadPercent > 90 || _pn_powerFactor < 0.85) {
      statusInd.setAttribute('class', 'status-warning');
    } else {
      statusInd.setAttribute('class', 'status-ok');
    }
  }
}

function putValue(id, value) {
  switch(id) {
    case '_pn_realPower':
      _pn_realPower = Number(value) || 0;
      break;
    case '_pn_voltage':
      _pn_voltage = Number(value) || 0;
      break;
    case '_pn_current':
      _pn_current = Number(value) || 0;
      break;
    case '_pn_powerFactor':
      _pn_powerFactor = Number(value) || 1.0;
      break;
    case '_pn_frequency':
      _pn_frequency = Number(value) || 60;
      break;
    case '_pn_energy':
      _pn_energy = Number(value) || 0;
      break;
    case '_pn_demand':
      _pn_demand = Number(value) || 0;
      break;
    case '_pn_alarm':
      _pn_alarm = Number(value) || 0;
      break;
    case '_pn_maxPower':
      _pn_maxPower = Number(value) || 500;
      break;
  }
  update();
}

init();
]]></script>
</svg>
