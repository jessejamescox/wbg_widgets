<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 550" id="ups">
  <defs>
    <style>
      .meter-bg { fill: #1a1a2e; stroke: #16213e; stroke-width: 2; }
      .title-text { fill: #00d4ff; font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; }
      .label-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 12px; }
      .value-text { fill: #ffffff; font-family: 'Courier New', monospace; font-size: 20px; font-weight: bold; }
      .unit-text { fill: #a0a0a0; font-family: Arial, sans-serif; font-size: 14px; }
      .status-ok { fill: #00ff00; }
      .status-warning { fill: #ffaa00; }
      .status-alarm { fill: #ff0000; }
      .status-off { fill: #666666; }
      .ups-body { fill: #2a2a3e; stroke: #404060; stroke-width: 2; }
      .battery-fill { fill: #00ff00; }
      .battery-outline { fill: none; stroke: #606080; stroke-width: 3; }
      .input-color { fill: #4444ff; }
      .output-color { fill: #00ff00; }
      .bypass-color { fill: #ffaa00; }
    </style>
  </defs>

  <!-- Background -->
  <rect class="meter-bg" x="10" y="10" width="380" height="530" rx="10"/>

  <!-- Title -->
  <text class="title-text" x="200" y="35" text-anchor="middle">UPS SYSTEM</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" class="status-ok" cx="370" cy="25" r="8"/>

  <!-- UPS Visual -->
  <g id="upsVisual" transform="translate(200, 120)">
    <!-- UPS Body -->
    <rect class="ups-body" x="-70" y="-50" width="140" height="100" rx="5"/>

    <!-- Power Flow Diagram -->
    <g id="powerFlow">
      <!-- Input -->
      <circle class="input-color" cx="-90" cy="0" r="5"/>
      <line stroke="#4444ff" stroke-width="2" x1="-85" y1="0" x2="-70" y2="0"/>
      <text class="label-text" x="-90" y="-10" text-anchor="middle">IN</text>

      <!-- Battery -->
      <rect class="battery-outline" x="-30" y="-20" width="60" height="40" rx="3"/>
      <rect id="batteryFill" class="battery-fill" x="-28" y="18" width="56" height="0" rx="2"/>
      <rect class="battery-outline" x="30" y="-5" width="8" height="10"/>

      <!-- Output -->
      <line stroke="#00ff00" stroke-width="2" x1="70" y1="0" x2="85" y2="0"/>
      <circle class="output-color" cx="90" cy="0" r="5"/>
      <text class="label-text" x="90" y="-10" text-anchor="middle">OUT</text>

      <!-- Bypass Indicator -->
      <line id="bypassLine" stroke="#ffaa00" stroke-width="2" stroke-dasharray="5,5"
            x1="-70" y1="30" x2="70" y2="30" opacity="0"/>
      <text id="bypassText" class="label-text" x="0" y="45" text-anchor="middle" opacity="0">BYPASS</text>
    </g>
  </g>

  <!-- Operating Mode Display -->
  <g id="modeDisplay">
    <rect class="meter-bg" x="25" y="195" width="350" height="50" rx="5"/>
    <text class="label-text" x="200" y="215" text-anchor="middle">OPERATING MODE</text>
    <text id="modeText" class="value-text" x="200" y="237" text-anchor="middle">ONLINE</text>
  </g>

  <!-- Battery Status -->
  <g id="batteryDisplay">
    <rect class="meter-bg" x="25" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="280" text-anchor="middle">BATTERY LEVEL</text>
    <text id="batteryValue" class="value-text" x="107.5" y="310" text-anchor="middle">100</text>
    <text class="unit-text" x="107.5" y="330" text-anchor="middle">%</text>
  </g>

  <!-- Runtime Remaining -->
  <g id="runtimeDisplay">
    <rect class="meter-bg" x="210" y="260" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="280" text-anchor="middle">RUNTIME LEFT</text>
    <text id="runtimeValue" class="value-text" x="292.5" y="310" text-anchor="middle" font-size="18">--:--</text>
    <text class="unit-text" x="292.5" y="330" text-anchor="middle">MM:SS</text>
  </g>

  <!-- Input Voltage -->
  <g id="inputVoltageDisplay">
    <rect class="meter-bg" x="25" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="107.5" y="375" text-anchor="middle">INPUT VOLTAGE</text>
    <circle class="input-color" cx="70" cy="370" r="4"/>
    <text id="inputVoltage" class="value-text" x="107.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="107.5" y="425" text-anchor="middle">V</text>
  </g>

  <!-- Output Voltage -->
  <g id="outputVoltageDisplay">
    <rect class="meter-bg" x="210" y="355" width="165" height="80" rx="5"/>
    <text class="label-text" x="292.5" y="375" text-anchor="middle">OUTPUT VOLTAGE</text>
    <circle class="output-color" cx="255" cy="370" r="4"/>
    <text id="outputVoltage" class="value-text" x="292.5" y="405" text-anchor="middle">0</text>
    <text class="unit-text" x="292.5" y="425" text-anchor="middle">V</text>
  </g>

  <!-- Load Display -->
  <g id="loadDisplay">
    <rect class="meter-bg" x="25" y="450" width="350" height="70" rx="5"/>
    <text class="label-text" x="200" y="470" text-anchor="middle">LOAD</text>
    <text id="loadValue" class="value-text" x="200" y="500" text-anchor="middle">0</text>
    <text class="unit-text" x="240" y="500">%</text>

    <!-- Load Bar -->
    <rect x="30" y="510" width="340" height="5" rx="2" fill="#333"/>
    <rect id="loadBar" class="battery-fill" x="30" y="510" width="0" height="5" rx="2"/>
  </g>

  <script><![CDATA[
//!export-start
let _pn_batteryLevel = 0;        // Battery level (%)
let _pn_runtimeRemaining = 0;    // Runtime remaining (minutes)
let _pn_inputVoltage = 0;        // Input voltage (V)
let _pn_outputVoltage = 0;       // Output voltage (V)
let _pn_load = 0;                // Load (%)
let _ps_mode = "online";         // Operating mode: online, battery, bypass, charging, fault
let _pn_bypassActive = 0;        // Bypass active: 0=no, 1=yes
let _pn_alarm = 0;               // Alarm status: 0=normal, 1=alarm
//!export-end

function init() {
  update();
}

function update() {
  const batteryValue = document.getElementById('batteryValue');
  const batteryFill = document.getElementById('batteryFill');
  const runtimeValue = document.getElementById('runtimeValue');
  const inputVoltage = document.getElementById('inputVoltage');
  const outputVoltage = document.getElementById('outputVoltage');
  const loadValue = document.getElementById('loadValue');
  const loadBar = document.getElementById('loadBar');
  const modeText = document.getElementById('modeText');
  const bypassLine = document.getElementById('bypassLine');
  const bypassText = document.getElementById('bypassText');
  const statusIndicator = document.getElementById('statusIndicator');

  if (!batteryValue) return;

  // Configuration
  const nominalVoltage = 120;  // V
  const criticalBattery = 20;  // %
  const lowBattery = 40;       // %
  const highLoad = 90;         // %
  const warnLoad = 75;         // %

  // Update battery level
  batteryValue.textContent = _pn_batteryLevel.toFixed(0);

  // Update battery fill (inverted - fills from bottom)
  const barHeight = (_pn_batteryLevel / 100) * 38;
  batteryFill.setAttribute('height', barHeight);
  batteryFill.setAttribute('y', 18 - barHeight);

  // Change color based on battery level
  if (_pn_batteryLevel <= criticalBattery) {
    batteryFill.setAttribute('fill', '#ff0000');
    batteryValue.setAttribute('fill', '#ff0000');
  } else if (_pn_batteryLevel <= lowBattery) {
    batteryFill.setAttribute('fill', '#ffaa00');
    batteryValue.setAttribute('fill', '#ffaa00');
  } else {
    batteryFill.setAttribute('fill', '#00ff00');
    batteryValue.setAttribute('fill', '#ffffff');
  }

  // Update runtime
  const mode = String(_ps_mode).toLowerCase();
  if (mode === 'battery' && _pn_runtimeRemaining >= 0) {
    const hours = Math.floor(_pn_runtimeRemaining / 60);
    const mins = _pn_runtimeRemaining % 60;
    const pad = (num) => num < 10 ? '0' + num : num;

    let timeStr;
    if (hours > 0) {
      timeStr = hours + 'h ' + pad(mins) + 'm';
    } else {
      timeStr = mins + ' min';
    }

    runtimeValue.textContent = timeStr;

    if (_pn_runtimeRemaining < 5) {
      runtimeValue.setAttribute('fill', '#ff0000');
    } else if (_pn_runtimeRemaining < 15) {
      runtimeValue.setAttribute('fill', '#ffaa00');
    } else {
      runtimeValue.setAttribute('fill', '#ffffff');
    }
  } else {
    runtimeValue.textContent = '--:--';
    runtimeValue.setAttribute('fill', '#a0a0a0');
  }

  // Update input voltage
  inputVoltage.textContent = _pn_inputVoltage.toFixed(0);
  const inputDeviation = Math.abs(_pn_inputVoltage - nominalVoltage) / nominalVoltage;
  if (_pn_inputVoltage === 0 || inputDeviation > 0.2) {
    inputVoltage.setAttribute('fill', '#ff0000');
  } else if (inputDeviation > 0.1) {
    inputVoltage.setAttribute('fill', '#ffaa00');
  } else {
    inputVoltage.setAttribute('fill', '#ffffff');
  }

  // Update output voltage
  outputVoltage.textContent = _pn_outputVoltage.toFixed(0);
  const outputDeviation = Math.abs(_pn_outputVoltage - nominalVoltage) / nominalVoltage;
  if (outputDeviation > 0.05) {
    outputVoltage.setAttribute('fill', '#ffaa00');
  } else {
    outputVoltage.setAttribute('fill', '#ffffff');
  }

  // Update load
  loadValue.textContent = _pn_load.toFixed(0);

  // Update load bar
  const barWidth = (_pn_load / 100) * 340;
  loadBar.setAttribute('width', Math.min(barWidth, 340));

  // Change color based on load
  if (_pn_load >= highLoad) {
    loadBar.setAttribute('fill', '#ff0000');
    loadValue.setAttribute('fill', '#ff0000');
  } else if (_pn_load >= warnLoad) {
    loadBar.setAttribute('fill', '#ffaa00');
    loadValue.setAttribute('fill', '#ffaa00');
  } else {
    loadBar.setAttribute('fill', '#00ff00');
    loadValue.setAttribute('fill', '#ffffff');
  }

  // Update mode
  switch(mode) {
    case 'online':
    case 'normal':
      modeText.textContent = 'ONLINE';
      modeText.setAttribute('fill', '#00ff00');
      break;
    case 'battery':
    case 'on_battery':
      modeText.textContent = 'ON BATTERY';
      modeText.setAttribute('fill', '#ffaa00');
      break;
    case 'bypass':
      modeText.textContent = 'BYPASS';
      modeText.setAttribute('fill', '#ffaa00');
      break;
    case 'charging':
      modeText.textContent = 'CHARGING';
      modeText.setAttribute('fill', '#00d4ff');
      break;
    case 'fault':
      modeText.textContent = 'FAULT';
      modeText.setAttribute('fill', '#ff0000');
      break;
    default:
      modeText.textContent = 'UNKNOWN';
      modeText.setAttribute('fill', '#666666');
  }

  // Update bypass
  if (_pn_bypassActive) {
    bypassLine.setAttribute('opacity', '1');
    bypassText.setAttribute('opacity', '1');
  } else {
    bypassLine.setAttribute('opacity', '0');
    bypassText.setAttribute('opacity', '0');
  }

  // Update alarm status
  if (_pn_alarm) {
    statusIndicator.setAttribute('class', 'status-alarm');
    statusIndicator.innerHTML = '<animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>';
  } else {
    statusIndicator.setAttribute('class', 'status-ok');
    statusIndicator.innerHTML = '';
  }
}

function putValue(id, value) {
  const num = Number(value) || 0;

  if (id === '_pn_batteryLevel') {
    _pn_batteryLevel = num;
  } else if (id === '_pn_runtimeRemaining') {
    _pn_runtimeRemaining = Math.floor(num);
  } else if (id === '_pn_inputVoltage') {
    _pn_inputVoltage = num;
  } else if (id === '_pn_outputVoltage') {
    _pn_outputVoltage = num;
  } else if (id === '_pn_load') {
    _pn_load = num;
  } else if (id === '_ps_mode') {
    _ps_mode = String(value);
  } else if (id === '_pn_bypassActive') {
    _pn_bypassActive = num;
  } else if (id === '_pn_alarm') {
    _pn_alarm = num;
  }

  update();
}

init();
]]></script>
</svg>
