<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150" id="trend-mini">
  <defs>
    <style>
      .trend-bg { fill: #1a1a1a; }
      .trend-line { fill: none; stroke: #2196f3; stroke-width: 2; }
      .trend-area { fill: url(#trendGradient); opacity: 0.3; }
      .trend-grid { stroke: #333; stroke-width: 0.5; }
      .trend-text { fill: #fff; font-family: Arial, sans-serif; }
      .trend-value { font-size: 20px; font-weight: bold; }
      .trend-label { font-size: 11px; }
      .trend-dot { fill: #2196f3; stroke: #fff; stroke-width: 2; }
      .trend-stats { font-size: 10px; fill: #999; }
    </style>
    <linearGradient id="trendGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#2196f3;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#2196f3;stop-opacity:0.1" />
    </linearGradient>
  </defs>

  <!-- Background -->
  <rect width="300" height="150" class="trend-bg"/>

  <!-- Title -->
  <text id="titleText" x="10" y="15" class="trend-text trend-label">Trend (24 points)</text>

  <!-- Grid lines -->
  <g id="grid">
    <line x1="20" y1="30" x2="280" y2="30" class="trend-grid"/>
    <line x1="20" y1="60" x2="280" y2="60" class="trend-grid"/>
    <line x1="20" y1="90" x2="280" y2="90" class="trend-grid"/>
    <line x1="20" y1="120" x2="280" y2="120" class="trend-grid"/>
  </g>

  <!-- Chart area -->
  <clipPath id="chartClip">
    <rect x="20" y="25" width="260" height="100"/>
  </clipPath>

  <g clip-path="url(#chartClip)">
    <!-- Area fill -->
    <path id="areaPath" class="trend-area" d="M 20,120 L 20,120 L 280,120 Z"/>

    <!-- Line path -->
    <path id="linePath" class="trend-line" d="M 20,90"/>
  </g>

  <!-- Current value dot -->
  <circle id="currentDot" cx="280" cy="90" r="4" class="trend-dot"/>

  <!-- Value displays -->
  <text id="currentValue" x="290" y="95" class="trend-text trend-value" text-anchor="end">0</text>
  <text id="minValue" x="10" y="128" class="trend-text trend-stats" text-anchor="start">Min: 0</text>
  <text id="maxValue" x="10" y="138" class="trend-text trend-stats" text-anchor="start">Max: 0</text>
  <text id="avgValue" x="10" y="148" class="trend-text trend-stats" text-anchor="start">Avg: 0</text>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      var svg = document.getElementById('trend-mini');
      var linePath = document.getElementById('linePath');
      var areaPath = document.getElementById('areaPath');
      var currentDot = document.getElementById('currentDot');
      var currentValue = document.getElementById('currentValue');
      var minValue = document.getElementById('minValue');
      var maxValue = document.getElementById('maxValue');
      var avgValue = document.getElementById('avgValue');

      // Configuration
      var config = {
        maxPoints: 24,
        decimals: 1,
        unit: '',
        autoScale: true,
        minScale: 0,
        maxScale: 100
      };

      // Data storage
      var dataPoints = [];

      // Chart dimensions
      var chartX = 20;
      var chartY = 25;
      var chartWidth = 260;
      var chartHeight = 100;

      // FUXA interface
      svg.setValue = function(value) {
        if (value === null || value === undefined) return;
        addDataPoint(parseFloat(value));
        updateChart();
      };

      svg.setOptions = function(options) {
        if (options.maxPoints !== undefined) config.maxPoints = parseInt(options.maxPoints);
        if (options.decimals !== undefined) config.decimals = parseInt(options.decimals);
        if (options.unit !== undefined) config.unit = options.unit;
        if (options.autoScale !== undefined) config.autoScale = options.autoScale;
        if (options.minScale !== undefined) config.minScale = parseFloat(options.minScale);
        if (options.maxScale !== undefined) config.maxScale = parseFloat(options.maxScale);
        updateChart();
      };

      svg.clearData = function() {
        dataPoints = [];
        updateChart();
      };

      function addDataPoint(value) {
        dataPoints.push(value);
        if (dataPoints.length > config.maxPoints) {
          dataPoints.shift();
        }
      }

      function updateChart() {
        if (dataPoints.length === 0) {
          linePath.setAttribute('d', 'M ' + chartX + ',' + (chartY + chartHeight/2));
          areaPath.setAttribute('d', 'M ' + chartX + ',' + (chartY + chartHeight) +
                                      ' L ' + chartX + ',' + (chartY + chartHeight) +
                                      ' L ' + (chartX + chartWidth) + ',' + (chartY + chartHeight) + ' Z');
          currentValue.textContent = '0';
          return;
        }

        // Calculate statistics
        var min = Math.min.apply(null, dataPoints);
        var max = Math.max.apply(null, dataPoints);
        var sum = dataPoints.reduce(function(a, b) { return a + b; }, 0);
        var avg = sum / dataPoints.length;

        // Determine scale
        var scaleMin = config.autoScale ? min : config.minScale;
        var scaleMax = config.autoScale ? max : config.maxScale;

        // Prevent division by zero
        if (scaleMax === scaleMin) {
          scaleMax = scaleMin + 1;
        }

        // Build path
        var pointSpacing = chartWidth / (config.maxPoints - 1);
        var linePathData = 'M ';
        var areaPathData = 'M ' + chartX + ',' + (chartY + chartHeight) + ' L ';

        for (var i = 0; i < dataPoints.length; i++) {
          var x = chartX + (i * pointSpacing);
          var normalizedValue = (dataPoints[i] - scaleMin) / (scaleMax - scaleMin);
          var y = chartY + chartHeight - (normalizedValue * chartHeight);

          linePathData += x + ',' + y + ' ';
          areaPathData += x + ',' + y + ' ';
        }

        areaPathData += ' L ' + (chartX + ((dataPoints.length - 1) * pointSpacing)) + ',' +
                       (chartY + chartHeight) + ' Z';

        linePath.setAttribute('d', linePathData);
        areaPath.setAttribute('d', areaPathData);

        // Update current value dot
        var lastValue = dataPoints[dataPoints.length - 1];
        var lastX = chartX + ((dataPoints.length - 1) * pointSpacing);
        var lastNormalized = (lastValue - scaleMin) / (scaleMax - scaleMin);
        var lastY = chartY + chartHeight - (lastNormalized * chartHeight);

        currentDot.setAttribute('cx', lastX);
        currentDot.setAttribute('cy', lastY);

        // Update text displays
        var unitStr = config.unit ? ' ' + config.unit : '';
        currentValue.textContent = lastValue.toFixed(config.decimals) + unitStr;
        minValue.textContent = 'Min: ' + min.toFixed(config.decimals) + unitStr;
        maxValue.textContent = 'Max: ' + max.toFixed(config.decimals) + unitStr;
        avgValue.textContent = 'Avg: ' + avg.toFixed(config.decimals) + unitStr;
      }

      // Initialize with some demo data
      for (var i = 0; i < 24; i++) {
        addDataPoint(50 + Math.sin(i / 3) * 20 + (Math.random() - 0.5) * 10);
      }
      updateChart();

      // Expose getValue for FUXA
      svg.getValue = function() {
        return dataPoints.length > 0 ? dataPoints[dataPoints.length - 1] : 0;
      };
    })();
    ]]>
  </script>
</svg>
