<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 120" id="status-led">
  <defs>
    <style>
      .led-bg { fill: #1a1a1a; }
      .led-text { fill: #fff; font-family: Arial, sans-serif; }
      .led-label { font-size: 16px; font-weight: bold; }
      .led-sublabel { font-size: 12px; fill: #999; }
      .led-circle { stroke-width: 3; }
      .led-glow { opacity: 0; }
    </style>

    <!-- Radial gradients for LED states -->
    <radialGradient id="ledOff">
      <stop offset="0%" style="stop-color:#555;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#222;stop-opacity:1" />
    </radialGradient>
    <radialGradient id="ledGreen">
      <stop offset="0%" style="stop-color:#8fff8f;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#4caf50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2e7d32;stop-opacity:1" />
    </radialGradient>
    <radialGradient id="ledYellow">
      <stop offset="0%" style="stop-color:#ffff8f;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#ffc107;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f57f17;stop-opacity:1" />
    </radialGradient>
    <radialGradient id="ledRed">
      <stop offset="0%" style="stop-color:#ff8f8f;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#f44336;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#c62828;stop-opacity:1" />
    </radialGradient>
    <radialGradient id="ledBlue">
      <stop offset="0%" style="stop-color:#8fd6ff;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#2196f3;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1565c0;stop-opacity:1" />
    </radialGradient>

    <!-- Glow filters -->
    <filter id="glowGreen">
      <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    <filter id="glowYellow">
      <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    <filter id="glowRed">
      <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    <filter id="glowBlue">
      <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Background -->
  <rect width="200" height="120" class="led-bg"/>

  <!-- LED container with border -->
  <rect x="10" y="10" width="180" height="100" rx="5" fill="#0a0a0a" stroke="#333" stroke-width="2"/>

  <!-- LED circle with glow -->
  <g id="ledGlow" class="led-glow">
    <circle cx="60" cy="60" r="35" fill="#4caf50" opacity="0.3"/>
  </g>

  <!-- LED circle -->
  <circle id="ledCircle" cx="60" cy="60" r="25" fill="url(#ledOff)" class="led-circle" stroke="#000"/>

  <!-- Highlight for 3D effect -->
  <ellipse cx="52" cy="50" rx="10" ry="8" fill="#fff" opacity="0.3"/>

  <!-- Label -->
  <text id="labelText" x="110" y="55" class="led-text led-label" text-anchor="start">Status</text>
  <text id="stateText" x="110" y="75" class="led-text led-sublabel" text-anchor="start">OFF</text>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      var svg = document.getElementById('status-led');
      var ledCircle = document.getElementById('ledCircle');
      var ledGlow = document.getElementById('ledGlow');
      var labelText = document.getElementById('labelText');
      var stateText = document.getElementById('stateText');

      // Configuration
      var config = {
        state: 0, // 0=off, 1=green, 2=yellow, 3=red, 4=blue
        label: 'Status',
        blink: false,
        blinkInterval: 500
      };

      // State definitions
      var states = {
        0: { name: 'OFF', fill: 'url(#ledOff)', stroke: '#000', glow: false, filter: 'none' },
        1: { name: 'OK', fill: 'url(#ledGreen)', stroke: '#4caf50', glow: true, filter: 'url(#glowGreen)', glowColor: '#4caf50' },
        2: { name: 'WARNING', fill: 'url(#ledYellow)', stroke: '#ffc107', glow: true, filter: 'url(#glowYellow)', glowColor: '#ffc107' },
        3: { name: 'ALARM', fill: 'url(#ledRed)', stroke: '#f44336', glow: true, filter: 'url(#glowRed)', glowColor: '#ff0000' },
        4: { name: 'RUNNING', fill: 'url(#ledBlue)', stroke: '#2196f3', glow: true, filter: 'url(#glowBlue)', glowColor: '#2196f3' }
      };

      var blinkTimer = null;
      var blinkState = false;

      // FUXA interface
      svg.setValue = function(value) {
        if (value === null || value === undefined) return;
        config.state = parseInt(value);
        if (config.state < 0) config.state = 0;
        if (config.state > 4) config.state = 4;
        updateLED();
      };

      svg.setOptions = function(options) {
        if (options.label !== undefined) {
          config.label = options.label;
          labelText.textContent = config.label;
        }
        if (options.blink !== undefined) {
          config.blink = options.blink;
          setupBlink();
        }
        if (options.blinkInterval !== undefined) {
          config.blinkInterval = parseInt(options.blinkInterval);
          if (config.blink) setupBlink();
        }
        updateLED();
      };

      function updateLED(forceOff) {
        var currentState = states[config.state];
        var isOff = forceOff || false;

        if (isOff) {
          currentState = states[0];
        }

        ledCircle.setAttribute('fill', currentState.fill);
        ledCircle.setAttribute('stroke', currentState.stroke);

        if (currentState.glow && !isOff) {
          ledCircle.setAttribute('filter', currentState.filter);
          var glowCircle = ledGlow.querySelector('circle');
          glowCircle.setAttribute('fill', currentState.glowColor);
          ledGlow.setAttribute('opacity', '1');
        } else {
          ledCircle.setAttribute('filter', 'none');
          ledGlow.setAttribute('opacity', '0');
        }

        stateText.textContent = isOff ? 'OFF' : currentState.name;
      }

      function setupBlink() {
        if (blinkTimer) {
          clearInterval(blinkTimer);
          blinkTimer = null;
        }

        if (config.blink && config.state > 0) {
          blinkTimer = setInterval(function() {
            blinkState = !blinkState;
            updateLED(blinkState);
          }, config.blinkInterval);
        } else {
          updateLED();
        }
      }

      // Initialize
      updateLED();

      // Expose getValue for FUXA
      svg.getValue = function() {
        return config.state;
      };
    })();
    ]]>
  </script>
</svg>
