<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 80" id="alarm-banner">
  <defs>
    <style>
      .banner-bg { fill: #1a1a1a; }
      .banner-critical { fill: #f44336; }
      .banner-high { fill: #ff9800; }
      .banner-medium { fill: #ffc107; }
      .banner-low { fill: #2196f3; }
      .banner-none { fill: #333; }
      .banner-text { fill: #fff; font-family: Arial, sans-serif; }
      .banner-priority { font-size: 14px; font-weight: bold; }
      .banner-timestamp { font-size: 11px; fill: #ccc; }
      .banner-message { font-size: 16px; font-weight: bold; }
      .banner-button { cursor: pointer; }
      .banner-button-rect { fill: #4caf50; stroke: #fff; stroke-width: 2; rx: 5; }
      .banner-button-rect:hover { fill: #66bb6a; }
      .banner-button-text { font-size: 14px; font-weight: bold; fill: #fff; }
      .banner-icon { fill: #fff; }
      .banner-scroll-area { overflow: hidden; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="600" height="80" class="banner-bg"/>

  <!-- Priority indicator bar -->
  <rect id="priorityBar" x="0" y="0" width="10" height="80" class="banner-none"/>

  <!-- Icon area -->
  <g id="alarmIcon" transform="translate(20, 25)">
    <!-- Bell icon -->
    <path class="banner-icon" d="M 15,5 C 15,5 12,5 12,8 L 12,18 C 12,18 8,20 8,23 L 22,23 C 22,20 18,18 18,18 L 18,8 C 18,5 15,5 15,5 Z M 13,25 C 13,27 17,27 17,25 Z"/>
    <circle cx="21" cy="8" r="3" fill="#f44336" id="notificationDot"/>
  </g>

  <!-- Content area with clipping for scroll effect -->
  <clipPath id="messageClip">
    <rect x="50" y="0" width="450" height="80"/>
  </clipPath>

  <g clip-path="url(#messageClip)">
    <g id="scrollContainer" transform="translate(50, 0)">
      <!-- Priority text -->
      <text id="priorityText" x="0" y="25" class="banner-text banner-priority">CRITICAL</text>

      <!-- Timestamp -->
      <text id="timestampText" x="0" y="40" class="banner-text banner-timestamp">2025-10-09 14:30:45</text>

      <!-- Message -->
      <text id="messageText" x="0" y="60" class="banner-text banner-message">High temperature alarm on Tank 101</text>
    </g>
  </g>

  <!-- Acknowledge button -->
  <g id="ackButton" class="banner-button" transform="translate(510, 20)">
    <rect class="banner-button-rect" width="80" height="40" rx="5"/>
    <text x="40" y="25" class="banner-text banner-button-text" text-anchor="middle">ACK</text>
  </g>

  <!-- Alarm count badge -->
  <g id="countBadge" transform="translate(520, 5)">
    <circle cx="0" cy="0" r="12" fill="#f44336" stroke="#fff" stroke-width="2"/>
    <text id="countText" x="0" y="4" class="banner-text" font-size="10" text-anchor="middle" font-weight="bold">1</text>
  </g>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      var svg = document.getElementById('alarm-banner');
      var priorityBar = document.getElementById('priorityBar');
      var priorityText = document.getElementById('priorityText');
      var timestampText = document.getElementById('timestampText');
      var messageText = document.getElementById('messageText');
      var ackButton = document.getElementById('ackButton');
      var scrollContainer = document.getElementById('scrollContainer');
      var notificationDot = document.getElementById('notificationDot');
      var countBadge = document.getElementById('countBadge');
      var countText = document.getElementById('countText');

      // Configuration
      var config = {
        priority: 0, // 0=none, 1=low, 2=medium, 3=high, 4=critical
        message: 'No active alarms',
        timestamp: '',
        acknowledged: false,
        scroll: true,
        scrollSpeed: 50, // pixels per second
        alarmCount: 0
      };

      // Priority definitions
      var priorities = {
        0: { name: 'INFO', class: 'banner-none', color: '#333' },
        1: { name: 'LOW', class: 'banner-low', color: '#2196f3' },
        2: { name: 'MEDIUM', class: 'banner-medium', color: '#ffc107' },
        3: { name: 'HIGH', class: 'banner-high', color: '#ff9800' },
        4: { name: 'CRITICAL', class: 'banner-critical', color: '#f44336' }
      };

      var scrollPosition = 0;
      var scrollAnimationFrame = null;
      var messageWidth = 0;
      var lastTime = Date.now();

      // FUXA interface
      svg.setValue = function(value) {
        // Value can be alarm object or priority number
        if (typeof value === 'object' && value !== null) {
          if (value.priority !== undefined) config.priority = parseInt(value.priority);
          if (value.message !== undefined) config.message = value.message;
          if (value.timestamp !== undefined) config.timestamp = value.timestamp;
          if (value.acknowledged !== undefined) config.acknowledged = value.acknowledged;
          if (value.count !== undefined) config.alarmCount = parseInt(value.count);
        } else if (value !== null && value !== undefined) {
          config.priority = parseInt(value);
        }
        updateBanner();
      };

      svg.setOptions = function(options) {
        if (options.scroll !== undefined) {
          config.scroll = options.scroll;
          if (config.scroll) startScroll();
          else stopScroll();
        }
        if (options.scrollSpeed !== undefined) config.scrollSpeed = parseFloat(options.scrollSpeed);
        if (options.message !== undefined) config.message = options.message;
        if (options.timestamp !== undefined) config.timestamp = options.timestamp;
        updateBanner();
      };

      svg.acknowledge = function() {
        config.acknowledged = true;
        updateBanner();
        // Emit event for FUXA
        var event = new CustomEvent('alarm-acknowledged', {
          detail: { priority: config.priority, message: config.message }
        });
        svg.dispatchEvent(event);
      };

      function updateBanner() {
        var priority = priorities[config.priority] || priorities[0];

        // Update priority bar
        priorityBar.setAttribute('class', 'banner-bg ' + priority.class);

        // Update priority text
        priorityText.textContent = priority.name;
        priorityText.setAttribute('fill', priority.color);

        // Update timestamp
        if (config.timestamp) {
          timestampText.textContent = config.timestamp;
        } else {
          var now = new Date();
          timestampText.textContent = now.toISOString().replace('T', ' ').substring(0, 19);
        }

        // Update message
        messageText.textContent = config.message;

        // Update notification dot
        if (config.priority > 0 && !config.acknowledged) {
          notificationDot.setAttribute('opacity', '1');
        } else {
          notificationDot.setAttribute('opacity', '0');
        }

        // Update alarm count badge
        if (config.alarmCount > 0) {
          countBadge.setAttribute('opacity', '1');
          countText.textContent = config.alarmCount > 99 ? '99+' : config.alarmCount;
        } else {
          countBadge.setAttribute('opacity', '0');
        }

        // Update button visibility
        if (config.priority > 0 && !config.acknowledged) {
          ackButton.setAttribute('opacity', '1');
          ackButton.style.pointerEvents = 'auto';
        } else {
          ackButton.setAttribute('opacity', '0.3');
          ackButton.style.pointerEvents = 'none';
        }

        // Calculate message width for scrolling
        messageWidth = messageText.getBBox().width;

        // Start/restart scroll if enabled
        if (config.scroll && messageWidth > 450) {
          scrollPosition = 0;
          startScroll();
        } else {
          stopScroll();
          scrollContainer.setAttribute('transform', 'translate(50, 0)');
        }
      }

      function startScroll() {
        if (scrollAnimationFrame) return;

        function animate() {
          var currentTime = Date.now();
          var deltaTime = (currentTime - lastTime) / 1000; // Convert to seconds
          lastTime = currentTime;

          scrollPosition += config.scrollSpeed * deltaTime;

          // Reset when message scrolls off screen
          if (scrollPosition > messageWidth + 100) {
            scrollPosition = -450;
          }

          scrollContainer.setAttribute('transform', 'translate(' + (50 - scrollPosition) + ', 0)');

          scrollAnimationFrame = requestAnimationFrame(animate);
        }

        lastTime = Date.now();
        scrollAnimationFrame = requestAnimationFrame(animate);
      }

      function stopScroll() {
        if (scrollAnimationFrame) {
          cancelAnimationFrame(scrollAnimationFrame);
          scrollAnimationFrame = null;
        }
      }

      // Button click handler
      ackButton.addEventListener('click', function() {
        if (!config.acknowledged && config.priority > 0) {
          svg.acknowledge();
        }
      });

      // Initialize with demo alarm
      config.priority = 4;
      config.message = 'High temperature alarm on Tank 101 - Immediate action required';
      config.alarmCount = 3;
      updateBanner();

      // Expose getValue for FUXA
      svg.getValue = function() {
        return {
          priority: config.priority,
          message: config.message,
          timestamp: config.timestamp,
          acknowledged: config.acknowledged,
          count: config.alarmCount
        };
      };
    })();
    ]]>
  </script>
</svg>
