<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 200" id="gauge-semicircle">
  <defs>
    <style>
      .gauge-bg { fill: #1a1a1a; }
      .gauge-arc { fill: none; stroke-width: 20; }
      .gauge-green { stroke: #4caf50; }
      .gauge-yellow { stroke: #ffc107; }
      .gauge-red { stroke: #f44336; }
      .gauge-needle { fill: #ff9800; stroke: #fff; stroke-width: 1; }
      .gauge-center { fill: #333; stroke: #fff; stroke-width: 2; }
      .gauge-text { fill: #fff; font-family: Arial, sans-serif; }
      .gauge-value { font-size: 28px; font-weight: bold; }
      .gauge-label { font-size: 14px; }
      .gauge-tick { stroke: #999; stroke-width: 1; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="300" height="200" class="gauge-bg"/>

  <!-- Colored zones (green 0-60%, yellow 60-80%, red 80-100%) -->
  <path id="greenZone" class="gauge-arc gauge-green"
        d="M 50,150 A 100,100 0 0,1 110,56.7"/>
  <path id="yellowZone" class="gauge-arc gauge-yellow"
        d="M 110,56.7 A 100,100 0 0,1 170,30"/>
  <path id="redZone" class="gauge-arc gauge-red"
        d="M 170,30 A 100,100 0 0,1 250,150"/>

  <!-- Tick marks -->
  <g id="tickMarks">
    <line x1="50" y1="150" x2="40" y2="150" class="gauge-tick"/>
    <line x1="60" y1="100" x2="52" y2="95" class="gauge-tick"/>
    <line x1="90" y1="62" x2="84" y2="55" class="gauge-tick"/>
    <line x1="150" y1="50" x2="150" y2="40" class="gauge-tick"/>
    <line x1="210" y1="62" x2="216" y2="55" class="gauge-tick"/>
    <line x1="240" y1="100" x2="248" y2="95" class="gauge-tick"/>
    <line x1="250" y1="150" x2="260" y2="150" class="gauge-tick"/>
  </g>

  <!-- Scale labels -->
  <text x="35" y="155" class="gauge-text gauge-label" text-anchor="middle">0</text>
  <text x="60" y="90" class="gauge-text gauge-label" text-anchor="middle">25</text>
  <text x="150" y="35" class="gauge-text gauge-label" text-anchor="middle">50</text>
  <text x="240" y="90" class="gauge-text gauge-label" text-anchor="middle">75</text>
  <text x="265" y="155" class="gauge-text gauge-label" text-anchor="middle">100</text>

  <!-- Needle -->
  <g id="needle" transform="rotate(-90 150 150)">
    <polygon points="150,150 155,55 150,45 145,55" class="gauge-needle"/>
  </g>

  <!-- Center hub -->
  <circle cx="150" cy="150" r="12" class="gauge-center"/>

  <!-- Value display -->
  <text id="valueText" x="150" y="180" class="gauge-text gauge-value" text-anchor="middle">0</text>
  <text id="unitText" x="150" y="195" class="gauge-text gauge-label" text-anchor="middle">Units</text>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      var svg = document.getElementById('gauge-semicircle');
      var needle = document.getElementById('needle');
      var valueText = document.getElementById('valueText');
      var unitText = document.getElementById('unitText');

      // Configuration
      var config = {
        min: 0,
        max: 100,
        value: 0,
        unit: 'Units',
        decimals: 1
      };

      // FUXA interface
      svg.setValue = function(value) {
        if (value === null || value === undefined) return;
        config.value = parseFloat(value);
        updateGauge();
      };

      svg.setOptions = function(options) {
        if (options.min !== undefined) config.min = parseFloat(options.min);
        if (options.max !== undefined) config.max = parseFloat(options.max);
        if (options.unit !== undefined) {
          config.unit = options.unit;
          unitText.textContent = config.unit;
        }
        if (options.decimals !== undefined) config.decimals = parseInt(options.decimals);
        updateGauge();
      };

      function updateGauge() {
        // Clamp value between min and max
        var clampedValue = Math.max(config.min, Math.min(config.max, config.value));

        // Calculate percentage
        var percent = ((clampedValue - config.min) / (config.max - config.min)) * 100;

        // Calculate needle angle (0% = -90deg, 100% = 90deg)
        var angle = -90 + (percent * 180 / 100);

        // Update needle rotation
        needle.setAttribute('transform', 'rotate(' + angle + ' 150 150)');

        // Update value text
        valueText.textContent = clampedValue.toFixed(config.decimals);
      }

      // Initialize
      updateGauge();

      // Expose getValue for FUXA
      svg.getValue = function() {
        return config.value;
      };
    })();
    ]]>
  </script>
</svg>
