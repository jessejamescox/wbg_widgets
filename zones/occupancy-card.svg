<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 320">
  <defs>
    <style>
      .occ-bg { fill: #1a1a2e; }
      .occ-header { fill: #16213e; }
      .occ-card { fill: #2d3748; }
      .occ-text-primary { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 16px; font-weight: 600; }
      .occ-text-secondary { fill: #a0aec0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 13px; }
      .occ-text-large { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 48px; font-weight: 700; }
      .occ-text-medium { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 20px; font-weight: 600; }
      .occ-text-small { fill: #cbd5e0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 12px; }
      .occ-icon { fill: none; stroke: #4299e1; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round; }
      .occ-active { fill: #48bb78; }
      .occ-inactive { fill: #718096; }
      .occ-border { fill: none; stroke: #2d3748; stroke-width: 2; }
      .occ-gauge-bg { fill: #2d3748; }
      .occ-gauge-fill { fill: #4299e1; }
    </style>
  </defs>

  <!-- Main Background -->
  <rect class="occ-bg" x="0" y="0" width="400" height="320" rx="12"/>
  <rect class="occ-border" x="0" y="0" width="400" height="320" rx="12"/>

  <!-- Header -->
  <rect class="occ-header" x="0" y="0" width="400" height="50" rx="12"/>
  <rect class="occ-header" x="0" y="25" width="400" height="25"/>
  <text class="occ-text-primary" x="20" y="32" id="spaceName">Occupancy Monitor</text>

  <!-- People Count Display -->
  <g transform="translate(80, 110)">
    <!-- People Icon -->
    <g class="occ-icon" transform="translate(0, -30)">
      <circle cx="20" cy="10" r="10"/>
      <path d="M 5 50 Q 5 25, 20 25 Q 35 25, 35 50"/>
      <circle cx="45" cy="10" r="10"/>
      <path d="M 30 50 Q 30 25, 45 25 Q 60 25, 60 50"/>
    </g>

    <text class="occ-text-large" x="30" y="30" id="peopleCount">8</text>
    <text class="occ-text-secondary" x="30" y="55">People Present</text>
  </g>

  <!-- Capacity Gauge -->
  <g transform="translate(240, 90)">
    <text class="occ-text-secondary" x="0" y="0">Capacity</text>
    <g transform="translate(0, 10)">
      <rect class="occ-gauge-bg" x="0" y="0" width="120" height="20" rx="10"/>
      <rect class="occ-gauge-fill" x="0" y="0" width="80" height="20" rx="10" id="capacityBar"/>
    </g>
    <text class="occ-text-medium" x="60" y="50" text-anchor="middle" id="capacityPercent">80%</text>
    <text class="occ-text-small" x="60" y="65" text-anchor="middle" id="capacityText">8 of 10</text>
  </g>

  <!-- Motion Detection Card -->
  <g transform="translate(20, 180)">
    <rect class="occ-card" x="0" y="0" width="170" height="110" rx="8"/>
    <rect class="occ-border" x="0" y="0" width="170" height="110" rx="8"/>

    <text class="occ-text-secondary" x="15" y="25">Motion Detected</text>

    <!-- Motion Icon -->
    <g transform="translate(20, 40)">
      <circle id="motionIndicator" class="occ-inactive" cx="0" cy="0" r="20"/>
      <g class="occ-icon" opacity="0.8">
        <path d="M -8 -8 L -8 8 M 0 -8 L 0 8 M 8 -8 L 8 8"/>
      </g>
    </g>

    <g transform="translate(70, 50)">
      <text class="occ-text-medium" x="0" y="0" id="motionStatus">Active</text>
      <text class="occ-text-small" x="0" y="20" id="motionTime">2 min ago</text>
    </g>
  </g>

  <!-- Lighting Status Card -->
  <g transform="translate(210, 180)">
    <rect class="occ-card" x="0" y="0" width="170" height="110" rx="8"/>
    <rect class="occ-border" x="0" y="0" width="170" height="110" rx="8"/>

    <text class="occ-text-secondary" x="15" y="25">Lighting Status</text>

    <!-- Light Bulb Icon -->
    <g transform="translate(30, 55)">
      <circle id="lightIndicator" class="occ-active" cx="0" cy="-5" r="15"/>
      <g class="occ-icon">
        <line x1="-5" y1="10" x2="5" y2="10" stroke-width="3"/>
        <line x1="-3" y1="15" x2="3" y2="15" stroke-width="2"/>
      </g>
      <!-- Light rays -->
      <g id="lightRays" stroke="#fbbf24" stroke-width="2" opacity="0.8">
        <line x1="0" y1="-25" x2="0" y2="-30"/>
        <line x1="18" y1="-18" x2="22" y2="-22"/>
        <line x1="18" y1="8" x2="22" y2="12"/>
        <line x1="-18" y1="-18" x2="-22" y2="-22"/>
        <line x1="-18" y1="8" x2="-22" y2="12"/>
      </g>
    </g>

    <g transform="translate(70, 50)">
      <text class="occ-text-medium" x="0" y="0" id="lightStatus">On</text>
      <text class="occ-text-small" x="0" y="20" id="lightLevel">85%</text>
    </g>
  </g>

  <!-- Last Activity Timestamp -->
  <g transform="translate(20, 305)">
    <text class="occ-text-small" x="0" y="0">Last Activity:</text>
    <text class="occ-text-small" x="90" y="0" id="lastActivity">2:45 PM</text>
  </g>

  <script><![CDATA[
//!export-start
let _ps_spaceName = "Occupancy Monitor"; // Space name
let _pn_peopleCount = 8;                  // Number of people present
let _pn_capacity = 10;                    // Maximum capacity
let _pn_motionDetected = 1;               // Motion detected: 0=no, 1=yes
let _ps_motionTime = "2 min ago";         // Time since last motion
let _pn_lightingOn = 1;                   // Lighting on/off: 0=off, 1=on
let _pn_lightLevel = 85;                  // Light level (%)
let _ps_lastActivity = "2:45 PM";         // Last activity timestamp
//!export-end

function init() {
  update();
}

function update() {
  const spaceNameElem = document.getElementById('spaceName');
  const peopleCountElem = document.getElementById('peopleCount');
  const capacityBar = document.getElementById('capacityBar');
  const capacityPercentElem = document.getElementById('capacityPercent');
  const capacityTextElem = document.getElementById('capacityText');
  const motionIndicator = document.getElementById('motionIndicator');
  const motionStatusElem = document.getElementById('motionStatus');
  const motionTimeElem = document.getElementById('motionTime');
  const lightIndicator = document.getElementById('lightIndicator');
  const lightStatusElem = document.getElementById('lightStatus');
  const lightRays = document.getElementById('lightRays');
  const lightLevelElem = document.getElementById('lightLevel');
  const lastActivityElem = document.getElementById('lastActivity');

  if (!spaceNameElem) return;

  // Update space name
  spaceNameElem.textContent = _ps_spaceName;

  // Update people count
  peopleCountElem.textContent = _pn_peopleCount;

  // Update capacity gauge
  const percentage = _pn_capacity > 0 ? (_pn_peopleCount / _pn_capacity) * 100 : 0;
  const cappedPercent = Math.min(100, percentage);
  const barWidth = (cappedPercent / 100) * 120;
  capacityBar.setAttribute('width', barWidth);

  // Color code based on capacity
  if (cappedPercent >= 90) {
    capacityBar.setAttribute('fill', '#f56565');
  } else if (cappedPercent >= 75) {
    capacityBar.setAttribute('fill', '#ed8936');
  } else if (cappedPercent >= 50) {
    capacityBar.setAttribute('fill', '#4299e1');
  } else {
    capacityBar.setAttribute('fill', '#48bb78');
  }

  capacityPercentElem.textContent = Math.round(cappedPercent) + '%';
  capacityTextElem.textContent = _pn_peopleCount + ' of ' + _pn_capacity;

  // Update motion detection
  if (_pn_motionDetected) {
    motionIndicator.setAttribute('class', 'occ-active');
    motionStatusElem.textContent = 'Active';
  } else {
    motionIndicator.setAttribute('class', 'occ-inactive');
    motionStatusElem.textContent = 'Inactive';
  }
  motionTimeElem.textContent = _ps_motionTime;

  // Update lighting status
  if (_pn_lightingOn) {
    lightIndicator.setAttribute('class', 'occ-active');
    lightIndicator.setAttribute('fill', '#fbbf24');
    lightStatusElem.textContent = 'On';
    lightRays.style.display = 'block';
  } else {
    lightIndicator.setAttribute('class', 'occ-inactive');
    lightStatusElem.textContent = 'Off';
    lightRays.style.display = 'none';
  }

  // Update light level
  lightLevelElem.textContent = Math.round(_pn_lightLevel) + '%';

  // Update last activity
  lastActivityElem.textContent = _ps_lastActivity;
}

function putValue(id, value) {
  if (id === '_ps_spaceName') {
    _ps_spaceName = String(value);
  } else if (id === '_pn_peopleCount') {
    _pn_peopleCount = Number(value) || 0;
  } else if (id === '_pn_capacity') {
    _pn_capacity = Number(value) || 0;
  } else if (id === '_pn_motionDetected') {
    _pn_motionDetected = Number(value) || 0;
  } else if (id === '_ps_motionTime') {
    _ps_motionTime = String(value);
  } else if (id === '_pn_lightingOn') {
    _pn_lightingOn = Number(value) || 0;
  } else if (id === '_pn_lightLevel') {
    _pn_lightLevel = Number(value) || 0;
  } else if (id === '_ps_lastActivity') {
    _ps_lastActivity = String(value);
  }

  update();
}

init();

]]></script>
</svg>
