<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 320">
  <defs>
    <style>
      .occ-bg { fill: #1a1a2e; }
      .occ-header { fill: #16213e; }
      .occ-card { fill: #2d3748; }
      .occ-text-primary { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 16px; font-weight: 600; }
      .occ-text-secondary { fill: #a0aec0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 13px; }
      .occ-text-large { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 48px; font-weight: 700; }
      .occ-text-medium { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 20px; font-weight: 600; }
      .occ-text-small { fill: #cbd5e0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 12px; }
      .occ-icon { fill: none; stroke: #4299e1; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round; }
      .occ-active { fill: #48bb78; }
      .occ-inactive { fill: #718096; }
      .occ-border { fill: none; stroke: #2d3748; stroke-width: 2; }
      .occ-gauge-bg { fill: #2d3748; }
      .occ-gauge-fill { fill: #4299e1; }
    </style>
  </defs>

  <!-- Main Background -->
  <rect class="occ-bg" x="0" y="0" width="400" height="320" rx="12"/>
  <rect class="occ-border" x="0" y="0" width="400" height="320" rx="12"/>

  <!-- Header -->
  <rect class="occ-header" x="0" y="0" width="400" height="50" rx="12"/>
  <rect class="occ-header" x="0" y="25" width="400" height="25"/>
  <text class="occ-text-primary" x="20" y="32" id="spaceName">Occupancy Monitor</text>

  <!-- People Count Display -->
  <g transform="translate(80, 110)">
    <!-- People Icon -->
    <g class="occ-icon" transform="translate(0, -30)">
      <circle cx="20" cy="10" r="10"/>
      <path d="M 5 50 Q 5 25, 20 25 Q 35 25, 35 50"/>
      <circle cx="45" cy="10" r="10"/>
      <path d="M 30 50 Q 30 25, 45 25 Q 60 25, 60 50"/>
    </g>

    <text class="occ-text-large" x="30" y="30" id="peopleCount">8</text>
    <text class="occ-text-secondary" x="30" y="55">People Present</text>
  </g>

  <!-- Capacity Gauge -->
  <g transform="translate(240, 90)">
    <text class="occ-text-secondary" x="0" y="0">Capacity</text>
    <g transform="translate(0, 10)">
      <rect class="occ-gauge-bg" x="0" y="0" width="120" height="20" rx="10"/>
      <rect class="occ-gauge-fill" x="0" y="0" width="80" height="20" rx="10" id="capacityBar"/>
    </g>
    <text class="occ-text-medium" x="60" y="50" text-anchor="middle" id="capacityPercent">80%</text>
    <text class="occ-text-small" x="60" y="65" text-anchor="middle" id="capacityText">8 of 10</text>
  </g>

  <!-- Motion Detection Card -->
  <g transform="translate(20, 180)">
    <rect class="occ-card" x="0" y="0" width="170" height="110" rx="8"/>
    <rect class="occ-border" x="0" y="0" width="170" height="110" rx="8"/>

    <text class="occ-text-secondary" x="15" y="25">Motion Detected</text>

    <!-- Motion Icon -->
    <g transform="translate(20, 40)">
      <circle id="motionIndicator" class="occ-inactive" cx="0" cy="0" r="20"/>
      <g class="occ-icon" opacity="0.8">
        <path d="M -8 -8 L -8 8 M 0 -8 L 0 8 M 8 -8 L 8 8"/>
      </g>
    </g>

    <g transform="translate(70, 50)">
      <text class="occ-text-medium" x="0" y="0" id="motionStatus">Active</text>
      <text class="occ-text-small" x="0" y="20" id="motionTime">2 min ago</text>
    </g>
  </g>

  <!-- Lighting Status Card -->
  <g transform="translate(210, 180)">
    <rect class="occ-card" x="0" y="0" width="170" height="110" rx="8"/>
    <rect class="occ-border" x="0" y="0" width="170" height="110" rx="8"/>

    <text class="occ-text-secondary" x="15" y="25">Lighting Status</text>

    <!-- Light Bulb Icon -->
    <g transform="translate(30, 55)">
      <circle id="lightIndicator" class="occ-active" cx="0" cy="-5" r="15"/>
      <g class="occ-icon">
        <line x1="-5" y1="10" x2="5" y2="10" stroke-width="3"/>
        <line x1="-3" y1="15" x2="3" y2="15" stroke-width="2"/>
      </g>
      <!-- Light rays -->
      <g id="lightRays" stroke="#fbbf24" stroke-width="2" opacity="0.8">
        <line x1="0" y1="-25" x2="0" y2="-30"/>
        <line x1="18" y1="-18" x2="22" y2="-22"/>
        <line x1="18" y1="8" x2="22" y2="12"/>
        <line x1="-18" y1="-18" x2="-22" y2="-22"/>
        <line x1="-18" y1="8" x2="-22" y2="12"/>
      </g>
    </g>

    <g transform="translate(70, 50)">
      <text class="occ-text-medium" x="0" y="0" id="lightStatus">On</text>
      <text class="occ-text-small" x="0" y="20" id="lightLevel">85%</text>
    </g>
  </g>

  <!-- Last Activity Timestamp -->
  <g transform="translate(20, 305)">
    <text class="occ-text-small" x="0" y="0">Last Activity:</text>
    <text class="occ-text-small" x="90" y="0" id="lastActivity">2:45 PM</text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_count = 0;
let _pn_capacity = 10;
//!export-end

function init() {
  update();
}

(function() {
      // FUXA Variable Bindings
let variables = {
        spaceName: 'occ_space_name',
        peopleCount: 'occ_people_count',
        _pn_capacity: 'occ_capacity',
        motionDetected: 'occ_motion_detected',
        lightingOn: 'occ_lighting_on',
        lightLevel: 'occ_light_level',
        lastMotionTime: 'occ_last_motion'
      };

      function formatTimestamp(timestamp) {
        if (!timestamp) return 'N/A';
let date = new Date(timestamp);
let hours = date.getHours();
let minutes = date.getMinutes();
let ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        return hours + ':' + minutes + ' ' + ampm;
      }

      function getTimeSince(timestamp) {
        if (!timestamp) return 'N/A';
let now = new Date();
let past = new Date(timestamp);
let diffMs = now - past;
let diffMins = Math.floor(diffMs / 60000);

        if (diffMins < 1) return 'Just now';
        if (diffMins < 60) return diffMins + ' min ago';
let diffHours = Math.floor(diffMins / 60);
        if (diffHours < 24) return diffHours + ' hr ago';
let diffDays = Math.floor(diffHours / 24);
        return diffDays + ' day' + (diffDays > 1 ? 's' : '') + ' ago';
      }

      function updateWidget(data) {
        try {
          // Update space name
          if (data[variables.spaceName] !== undefined) {
            document.getElementById('spaceName').textContent = data[variables.spaceName];
          }

          // Update people _pn_count

          if (data[variables.peopleCount] !== undefined) {
            _pn_count = parseInt(data[variables.peopleCount]);
            document.getElementById('peopleCount').textContent = _pn_count;
          }

          if (data[variables._pn_capacity] !== undefined) {
            _pn_capacity = parseInt(data[variables._pn_capacity]);
          }

          // Update _pn_capacity gauge
let percentage = _pn_capacity > 0 ? (_pn_count / _pn_capacity) * 100 : 0;
          percentage = Math.min(100, percentage);
let barWidth = (percentage / 100) * 120;
const capacityBar = document.getElementById('capacityBar');
          capacityBar.setAttribute('width', barWidth);

          // Color code based on _pn_capacity
          if (percentage >= 90) {
            capacityBar.setAttribute('fill', '#f56565');
          } else if (percentage >= 75) {
            capacityBar.setAttribute('fill', '#ed8936');
          } else if (percentage >= 50) {
            capacityBar.setAttribute('fill', '#4299e1');
          } else {
            capacityBar.setAttribute('fill', '#48bb78');
          }

          document.getElementById('capacityPercent').textContent = Math.round(percentage) + '%';
          document.getElementById('capacityText').textContent = _pn_count + ' of ' + _pn_capacity;

          // Update motion detection
          if (data[variables.motionDetected] !== undefined) {
let motionDetected = data[variables.motionDetected];
const motionIndicator = document.getElementById('motionIndicator');
const motionStatus = document.getElementById('motionStatus');

            if (motionDetected) {
              motionIndicator.setAttribute('class', 'occ-active');
              motionStatus.textContent = 'Active';
            } else {
              motionIndicator.setAttribute('class', 'occ-inactive');
              motionStatus.textContent = 'Inactive';
            }
          }

          // Update motion time
          if (data[variables.lastMotionTime] !== undefined) {
let motionTime = getTimeSince(data[variables.lastMotionTime]);
            document.getElementById('motionTime').textContent = motionTime;
            document.getElementById('lastActivity').textContent =
              formatTimestamp(data[variables.lastMotionTime]);
          }

          // Update lighting status
          if (data[variables.lightingOn] !== undefined) {
let lightingOn = data[variables.lightingOn];
const lightIndicator = document.getElementById('lightIndicator');
const lightStatus = document.getElementById('lightStatus');
const lightRays = document.getElementById('lightRays');

            if (lightingOn) {
              lightIndicator.setAttribute('class', 'occ-active');
              lightIndicator.setAttribute('fill', '#fbbf24');
              lightStatus.textContent = 'On';
              lightRays.style.display = 'block';
            } else {
              lightIndicator.setAttribute('class', 'occ-inactive');
              lightStatus.textContent = 'Off';
              lightRays.style.display = 'none';
            }
          }

          // Update light level
          if (data[variables.lightLevel] !== undefined) {
let lightLevel = parseFloat(data[variables.lightLevel]);
            document.getElementById('lightLevel').textContent = Math.round(lightLevel) + '%';
          }

        } catch (error) {
          console.error('Occupancy Card update error:', error);
        }
      }

      // Register with FUXA
      if (window.fuxa) {
        window.fuxa.registerWidget({
          id: 'occupancy-card',
          variables: Object.values(variables),
          update: updateWidget
        });
      }

      // Make update function globally accessible
      window.updateOccupancyCard = updateWidget;

      // Simulate periodic updates for demo purposes
      if (window.location.search.includes('demo=true')) {
        setInterval(function() {
let demoData = {};
          demoData[variables.peopleCount] = Math.floor(Math.random() * 10);
          demoData[variables.motionDetected] = Math.random() > 0.5;
          demoData[variables.lightingOn] = Math.random() > 0.3;
          demoData[variables.lightLevel] = 50 + Math.random() * 50;
          updateWidget(demoData);
        }, 5000);
      }
    })();

function putValue(id, value) {
  if (id === '_pn_count') {
    _pn_count = Number(value) || 0;
    update();
  } else if (id === '_pn_capacity') {
    _pn_capacity = Number(value) || 0;
    update();
  }
}

init();

]]></script>
</svg>
