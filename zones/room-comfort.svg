<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 350">
  <defs>
    <style>
      .comfort-bg { fill: #1a1a2e; }
      .comfort-header { fill: #16213e; }
      .comfort-card { fill: #2d3748; }
      .comfort-text-primary { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 16px; font-weight: 600; }
      .comfort-text-secondary { fill: #a0aec0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 13px; }
      .comfort-text-large { fill: #ffffff; font-family: 'Segoe UI', Arial, sans-serif; font-size: 32px; font-weight: 700; }
      .comfort-text-small { fill: #cbd5e0; font-family: 'Segoe UI', Arial, sans-serif; font-size: 11px; }
      .comfort-icon { fill: none; stroke: #4299e1; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round; }
      .comfort-excellent { fill: #48bb78; }
      .comfort-good { fill: #68d391; }
      .comfort-fair { fill: #ed8936; }
      .comfort-poor { fill: #f56565; }
      .comfort-border { fill: none; stroke: #2d3748; stroke-width: 2; }
    </style>

    <linearGradient id="comfortGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#f56565;stop-opacity:1" />
      <stop offset="33%" style="stop-color:#ed8936;stop-opacity:1" />
      <stop offset="66%" style="stop-color:#68d391;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#48bb78;stop-opacity:1" />
    </linearGradient>
  </defs>

  <!-- Main Background -->
  <rect class="comfort-bg" x="0" y="0" width="500" height="350" rx="12"/>
  <rect class="comfort-border" x="0" y="0" width="500" height="350" rx="12"/>

  <!-- Header -->
  <rect class="comfort-header" x="0" y="0" width="500" height="50" rx="12"/>
  <rect class="comfort-header" x="0" y="25" width="500" height="25"/>
  <text class="comfort-text-primary" x="20" y="32" id="roomName">Room Comfort Monitor</text>

  <!-- Comfort Score Circle -->
  <g transform="translate(250, 120)">
    <!-- Background circle -->
    <circle fill="#2d3748" cx="0" cy="0" r="55"/>
    <!-- Score ring -->
    <circle fill="none" stroke="#4299e1" stroke-width="8" cx="0" cy="0" r="50"
            stroke-dasharray="314" stroke-dashoffset="0" id="scoreRing"
            transform="rotate(-90)"/>
    <!-- Score text -->
    <text class="comfort-text-large" x="0" y="10" text-anchor="middle" id="comfortScore">85</text>
    <text class="comfort-text-small" x="0" y="28" text-anchor="middle">Comfort Score</text>
  </g>

  <!-- Temperature Card -->
  <g transform="translate(20, 200)">
    <rect class="comfort-card" x="0" y="0" width="100" height="120" rx="8"/>
    <rect class="comfort-border" x="0" y="0" width="100" height="120" rx="8"/>

    <!-- Temperature Icon -->
    <g transform="translate(35, 25)" class="comfort-icon">
      <rect x="0" y="0" width="15" height="30" rx="7.5"/>
      <circle cx="7.5" cy="35" r="10"/>
      <line x1="7.5" y1="10" x2="7.5" y2="25" stroke="#f56565" stroke-width="3"/>
    </g>

    <text class="comfort-text-large" x="50" y="80" text-anchor="middle" id="tempValue">72</text>
    <text class="comfort-text-small" x="50" y="95" text-anchor="middle">°F</text>
    <text class="comfort-text-secondary" x="50" y="110" text-anchor="middle">Temperature</text>
  </g>

  <!-- Humidity Card -->
  <g transform="translate(140, 200)">
    <rect class="comfort-card" x="0" y="0" width="100" height="120" rx="8"/>
    <rect class="comfort-border" x="0" y="0" width="100" height="120" rx="8"/>

    <!-- Humidity Icon -->
    <g transform="translate(35, 25)" class="comfort-icon">
      <path d="M 7.5 0 Q 15 10, 15 20 Q 15 30, 7.5 35 Q 0 30, 0 20 Q 0 10, 7.5 0 Z"/>
    </g>

    <text class="comfort-text-large" x="50" y="80" text-anchor="middle" id="humidityValue">45</text>
    <text class="comfort-text-small" x="50" y="95" text-anchor="middle">%</text>
    <text class="comfort-text-secondary" x="50" y="110" text-anchor="middle">Humidity</text>
  </g>

  <!-- CO2 Card -->
  <g transform="translate(260, 200)">
    <rect class="comfort-card" x="0" y="0" width="100" height="120" rx="8"/>
    <rect class="comfort-border" x="0" y="0" width="100" height="120" rx="8"/>

    <!-- CO2 Icon -->
    <g transform="translate(30, 25)" class="comfort-icon">
      <circle cx="7.5" cy="15" r="7"/>
      <text fill="#4299e1" x="7.5" y="19" text-anchor="middle" font-size="10px" font-weight="bold">C</text>
      <circle cx="22.5" cy="15" r="7"/>
      <text fill="#4299e1" x="22.5" y="19" text-anchor="middle" font-size="10px" font-weight="bold">O₂</text>
    </g>

    <text class="comfort-text-large" x="50" y="80" text-anchor="middle" id="co2Value">650</text>
    <text class="comfort-text-small" x="50" y="95" text-anchor="middle">ppm</text>
    <text class="comfort-text-secondary" x="50" y="110" text-anchor="middle">CO₂ Level</text>
  </g>

  <!-- Occupancy Card -->
  <g transform="translate(380, 200)">
    <rect class="comfort-card" x="0" y="0" width="100" height="120" rx="8"/>
    <rect class="comfort-border" x="0" y="0" width="100" height="120" rx="8"/>

    <!-- Occupancy Icon -->
    <g transform="translate(35, 20)" class="comfort-icon">
      <circle cx="7.5" cy="7.5" r="7.5"/>
      <path d="M 0 35 Q 0 20, 7.5 20 Q 15 20, 15 35"/>
    </g>

    <text class="comfort-text-large" x="50" y="80" text-anchor="middle" id="occupancyValue">4</text>
    <text class="comfort-text-small" x="50" y="95" text-anchor="middle">people</text>
    <text class="comfort-text-secondary" x="50" y="110" text-anchor="middle">Occupancy</text>
  </g>

  <!-- Comfort Status Bar -->
  <g transform="translate(20, 70)">
    <text class="comfort-text-secondary" x="0" y="-5">Status:</text>
    <text class="comfort-text-primary" x="60" y="-5" id="comfortStatus">Good</text>
    <rect x="0" y="5" width="460" height="20" rx="10" fill="url(#comfortGradient)" opacity="0.3"/>
    <rect x="0" y="5" width="345" height="20" rx="10" fill="url(#comfortGradient)" id="statusBar"/>
    <circle cx="345" cy="15" r="8" fill="#ffffff" id="statusMarker"/>
  </g>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      // FUXA Variable Bindings
      var variables = {
        roomName: 'room_comfort_name',
        temperature: 'room_temp',
        humidity: 'room_humidity',
        co2: 'room_co2',
        occupancy: 'room_occupancy'
      };

      // Comfort calculation parameters
      var comfortParams = {
        temp: { ideal: 72, min: 68, max: 76 },
        humidity: { ideal: 45, min: 30, max: 60 },
        co2: { good: 600, fair: 800, max: 1000 },
        occupancy: { capacity: 10 }
      };

      function calculateComfortScore(temp, humidity, co2, occupancy) {
        var scores = [];

        // Temperature score (0-100)
        var tempDiff = Math.abs(temp - comfortParams.temp.ideal);
        var tempRange = (comfortParams.temp.max - comfortParams.temp.min) / 2;
        var tempScore = Math.max(0, 100 - (tempDiff / tempRange) * 100);
        scores.push(tempScore);

        // Humidity score (0-100)
        var humidityDiff = Math.abs(humidity - comfortParams.humidity.ideal);
        var humidityRange = (comfortParams.humidity.max - comfortParams.humidity.min) / 2;
        var humidityScore = Math.max(0, 100 - (humidityDiff / humidityRange) * 100);
        scores.push(humidityScore);

        // CO2 score (0-100)
        var co2Score = 100;
        if (co2 > comfortParams.co2.good) {
          co2Score = 100 - ((co2 - comfortParams.co2.good) /
                      (comfortParams.co2.max - comfortParams.co2.good)) * 100;
        }
        co2Score = Math.max(0, Math.min(100, co2Score));
        scores.push(co2Score);

        // Average score
        return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
      }

      function getComfortStatus(score) {
        if (score >= 85) return 'Excellent';
        if (score >= 70) return 'Good';
        if (score >= 50) return 'Fair';
        return 'Poor';
      }

      function getComfortColor(score) {
        if (score >= 85) return '#48bb78';
        if (score >= 70) return '#68d391';
        if (score >= 50) return '#ed8936';
        return '#f56565';
      }

      function updateWidget(data) {
        try {
          // Update room name
          if (data[variables.roomName] !== undefined) {
            document.getElementById('roomName').textContent = data[variables.roomName];
          }

          // Get current values
          var temp = data[variables.temperature] !== undefined ?
                    parseFloat(data[variables.temperature]) : 72;
          var humidity = data[variables.humidity] !== undefined ?
                        parseFloat(data[variables.humidity]) : 45;
          var co2 = data[variables.co2] !== undefined ?
                   parseFloat(data[variables.co2]) : 650;
          var occupancy = data[variables.occupancy] !== undefined ?
                         parseInt(data[variables.occupancy]) : 0;

          // Update temperature
          document.getElementById('tempValue').textContent = Math.round(temp);

          // Update humidity
          document.getElementById('humidityValue').textContent = Math.round(humidity);

          // Update CO2
          document.getElementById('co2Value').textContent = Math.round(co2);

          // Update occupancy
          document.getElementById('occupancyValue').textContent = occupancy;

          // Calculate and update comfort score
          var comfortScore = calculateComfortScore(temp, humidity, co2, occupancy);
          document.getElementById('comfortScore').textContent = comfortScore;

          // Update score ring
          var circumference = 314;
          var offset = circumference - (comfortScore / 100) * circumference;
          var scoreRing = document.getElementById('scoreRing');
          scoreRing.setAttribute('stroke-dashoffset', offset);
          scoreRing.setAttribute('stroke', getComfortColor(comfortScore));

          // Update comfort status
          var status = getComfortStatus(comfortScore);
          document.getElementById('comfortStatus').textContent = status;

          // Update status bar
          var statusBarWidth = (comfortScore / 100) * 460;
          document.getElementById('statusBar').setAttribute('width', statusBarWidth);
          document.getElementById('statusMarker').setAttribute('cx', statusBarWidth);
          document.getElementById('statusMarker').setAttribute('fill', getComfortColor(comfortScore));

        } catch (error) {
          console.error('Room Comfort update error:', error);
        }
      }

      // Register with FUXA
      if (window.fuxa) {
        window.fuxa.registerWidget({
          id: 'room-comfort',
          variables: Object.values(variables),
          update: updateWidget
        });
      }

      // Make update function globally accessible
      window.updateRoomComfort = updateWidget;
    })();
    ]]>
  </script>
</svg>
