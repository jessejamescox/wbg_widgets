<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100%" height="100%">
  <defs>
    <style>
      .comp-body { fill: #f5f7fa; stroke: #ffffff; stroke-width: 2; }
      .comp-head { fill: #ffffff; stroke: #1a1a1a; stroke-width: 2; }
      .pipe-suction { fill: none; stroke: #1976d2; stroke-width: 4; }
      .pipe-discharge { fill: none; stroke: #e74c3c; stroke-width: 4; }
      .motor { fill: #546e7a; stroke: #ffffff; stroke-width: 1.5; }
      .status-on { fill: #27ae60; }
      .status-off { fill: #546e7a; }
      .label-text { font-family: Arial, sans-serif; font-size: 9px; fill: #ffffff; text-anchor: middle; font-weight: bold; }
      .value-text { font-family: Arial, sans-serif; font-size: 11px; fill: #ffffff; text-anchor: middle; font-weight: bold; }
    </style>
  </defs>

  <!-- Suction Line -->
  <line x1="5" y1="60" x2="30" y2="60" class="pipe-suction"/>
  <text x="17" y="73" class="label-text" font-size="7" fill="#546e7a">SUCTION</text>

  <!-- Compressor Body -->
  <ellipse cx="50" cy="55" rx="20" ry="25" class="comp-body"/>

  <!-- Compressor Head/Cylinder -->
  <rect x="40" y="35" width="20" height="15" class="comp-head" rx="2"/>

  <!-- Piston (animated) -->
  <g id="piston">
    <rect x="47" y="42" width="6" height="12" fill="#95a5a6" stroke="#7f8c8d" stroke-width="1"/>
  </g>

  <!-- Motor -->
  <rect x="43" y="75" width="14" height="10" class="motor" rx="2"/>
  <line x1="50" y1="75" x2="50" y2="68" stroke="#ffffff" stroke-width="2"/>

  <!-- Discharge Line -->
  <line x1="70" y1="45" x2="95" y2="45" class="pipe-discharge"/>
  <text x="82" y="38" class="label-text" font-size="7" fill="#546e7a">DISCHARGE</text>

  <!-- Status Indicator -->
  <circle id="statusIndicator" cx="50" cy="15" r="6" class="status-off"/>
  <text id="statusText" x="50" y="10" class="label-text">OFF</text>

  <!-- Runtime/Status Display -->
  <rect x="25" y="90" width="50" height="9" fill="#2c3e50" stroke="#95a5a6" stroke-width="1" rx="2"/>
  <text id="infoText" x="50" y="97" class="label-text" font-size="8">STANDBY</text>

  <script><![CDATA[
//!export-start
let _pn_status = 0;        // Compressor status: 0=off, 1=running
let _pn_alarmState = 0;    // Alarm state: 0=normal, 1=alarm
let _pn_loadPercent = 0;   // Compressor load percentage (0-100%)
let _pn_runtime = 0;       // Total runtime in hours
//!export-end

// Internal animation variables
let _pn_pistonY = 42;
let _pn_pistonDir = 1;
let animationId = null;

function init() {
  update();
}

function update() {
  const piston = document.getElementById('piston');
  const indicator = document.getElementById('statusIndicator');
  const statusText = document.getElementById('statusText');
  const infoText = document.getElementById('infoText');

  if (!piston || !indicator || !statusText || !infoText) return;

  if (_pn_status === 1) {
    // Running
    indicator.setAttribute('class', 'status-on');
    statusText.textContent = 'RUN';

    // Display runtime or load percentage
    if (_pn_runtime > 0 && _pn_loadPercent > 0) {
      infoText.textContent = _pn_loadPercent.toFixed(0) + '% | ' + Math.round(_pn_runtime) + ' hrs';
    } else if (_pn_runtime > 0) {
      infoText.textContent = Math.round(_pn_runtime) + ' hrs';
    } else if (_pn_loadPercent > 0) {
      infoText.textContent = _pn_loadPercent.toFixed(0) + '% LOAD';
    } else {
      infoText.textContent = 'RUNNING';
    }

    // Animate piston
    if (!animationId) {
      animationId = setInterval(function() {
        _pn_pistonY += _pn_pistonDir * 0.5;
        if (_pn_pistonY > 46 || _pn_pistonY < 38) {
          _pn_pistonDir *= -1;
        }
        const pistonRect = piston.querySelector('rect');
        if (pistonRect) {
          pistonRect.setAttribute('y', _pn_pistonY);
        }
      }, 50);
    }
  } else {
    // Stopped
    if (animationId) {
      clearInterval(animationId);
      animationId = null;
    }
    indicator.setAttribute('class', 'status-off');
    statusText.textContent = 'OFF';
    infoText.textContent = 'STANDBY';
    const pistonRect = piston.querySelector('rect');
    if (pistonRect) {
      pistonRect.setAttribute('y', '42');
    }
  }

  // Alarm state
  if (_pn_alarmState === 1) {
    indicator.setAttribute('fill', '#e74c3c');
    statusText.textContent = 'ALARM';
    infoText.textContent = 'FAULT';
  }
}

function putValue(id, value) {
  if (id === '_pn_status') {
    _pn_status = Number(value) || 0;
    update();
  } else if (id === '_pn_alarmState') {
    _pn_alarmState = Number(value) || 0;
    update();
  } else if (id === '_pn_loadPercent') {
    _pn_loadPercent = Number(value) || 0;
    update();
  } else if (id === '_pn_runtime') {
    _pn_runtime = Number(value) || 0;
    update();
  }
}
init();

]]></script>
</svg>
