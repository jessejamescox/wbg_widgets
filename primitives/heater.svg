<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 90" width="100%" height="100%">
  <defs>
    <style>
      .heater-body { fill: #e74c3c; stroke: #c0392b; stroke-width: 2; }
      .heater-off { fill: #95a5a6; stroke: #7f8c8d; stroke-width: 2; }
      .heating-element { fill: none; stroke: #f39c12; stroke-width: 3; stroke-linecap: round; }
      .heating-element-off { stroke: #bdc3c7; }
      .status-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; text-anchor: middle; font-weight: bold; }
      .value-text { font-family: Arial, sans-serif; font-size: 12px; fill: #2c3e50; text-anchor: middle; font-weight: bold; }
    </style>
    <linearGradient id="heatGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#e74c3c;stop-opacity:0.3" />
      <stop offset="100%" style="stop-color:#e74c3c;stop-opacity:0" />
    </linearGradient>
  </defs>

  <!-- Heater Body -->
  <rect id="heaterBody" x="20" y="35" width="40" height="30" class="heater-off" rx="3"/>

  <!-- Heating Elements (3 coils) -->
  <g id="elements">
    <path d="M 25 42 Q 30 40, 30 45 Q 30 50, 25 48" class="heating-element-off"/>
    <path d="M 35 42 Q 40 40, 40 45 Q 40 50, 35 48" class="heating-element-off"/>
    <path d="M 45 42 Q 50 40, 50 45 Q 50 50, 45 48" class="heating-element-off"/>
    <path d="M 25 52 Q 30 50, 30 55 Q 30 60, 25 58" class="heating-element-off"/>
    <path d="M 35 52 Q 40 50, 40 55 Q 40 60, 35 58" class="heating-element-off"/>
    <path d="M 45 52 Q 50 50, 50 55 Q 60 60, 45 58" class="heating-element-off"/>
  </g>

  <!-- Heat Waves (animated when on) -->
  <g id="heatWaves" opacity="0">
    <path d="M 30 25 Q 32 20, 34 25" fill="none" stroke="url(#heatGradient)" stroke-width="2"/>
    <path d="M 38 25 Q 40 20, 42 25" fill="none" stroke="url(#heatGradient)" stroke-width="2"/>
    <path d="M 46 25 Q 48 20, 50 25" fill="none" stroke="url(#heatGradient)" stroke-width="2"/>
  </g>

  <!-- Status Display -->
  <rect x="15" y="72" width="50" height="14" fill="#ecf0f1" stroke="#95a5a6" stroke-width="1" rx="2"/>
  <text id="statusText" x="40" y="82" class="status-text">OFF</text>

  <!-- Capacity/Output Display -->
  <text id="outputText" x="40" y="12" class="value-text">0%</text>

  <script><![CDATA[
//!export-start
let _pn_status = 0;
let _pn_capacity = 0;
let _pn_outputKW = 0;
let _pn_waveOffset = 0;
//!export-end

function init() {
  update();
}

let animationId = null;

    function update() {
const body = document.getElementById('heaterBody');
const elements = document.getElementById('elements');
const statusText = document.getElementById('statusText');
const outputText = document.getElementById('outputText');
const heatWaves = document.getElementById('heatWaves');

  if (!body || !elements || !statusText || !outputText || !heatWaves) return;

  if (!body || !elements || !statusText || !outputText || !heatWaves) return;

      if (_pn_status === 1 && _pn_capacity > 0) {
        // Heating
        body.setAttribute('class', 'heater-body');
let paths = elements.querySelectorAll('path');
        paths.forEach(function(path) {
          path.setAttribute('class', 'heating-element');
        });

        statusText.textContent = 'HEATING';
        outputText.textContent = Math.round(_pn_capacity) + '%';

        // Animate heat waves
        heatWaves.setAttribute('opacity', _pn_capacity / 100);
        if (!animationId) {
          animationId = setInterval(function() {
            _pn_waveOffset += 1;
let waves = heatWaves.querySelectorAll('path');
            waves.forEach(function(wave, i) {
let offset = (_pn_waveOffset + i * 10) % 30;
              wave.setAttribute('transform', 'translate(0, ' + (-offset) + ')');
              wave.setAttribute('opacity', 1 - offset / 30);
            });
          }, 100);
        }
      } else {
        // Off
        if (animationId) {
          clearInterval(animationId);
          animationId = null;
        }
        body.setAttribute('class', 'heater-off');
let paths = elements.querySelectorAll('path');
        paths.forEach(function(path) {
          path.setAttribute('class', 'heating-element-off');
        });
        heatWaves.setAttribute('opacity', '0');
        statusText.textContent = 'OFF';
        outputText.textContent = '0%';
      }
    }

function putValue(id, value) {
  if (id === '_pn_status') {
    _pn_status = Number(value) || 0;
    update();
  } else if (id === '_pn_capacity') {
    _pn_capacity = Number(value) || 0;
    update();
  } else if (id === '_pn_outputKW') {
    _pn_outputKW = Number(value) || 0;
    update();
  } else if (id === '_pn_waveOffset') {
    _pn_waveOffset = Number(value) || 0;
    update();
  }
}

init();

]]></script>
</svg>
