<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100%" height="100%">
  <defs>
    <style>
      .valve-body { fill: #7f8c8d; stroke: #2c3e50; stroke-width: 2; }
      .valve-ball { fill: #95a5a6; stroke: #2c3e50; stroke-width: 2; }
      .pipe { fill: none; stroke: #34495e; stroke-width: 4; }
      .flow-indicator { fill: #3498db; opacity: 0.6; }
      .port-label { font-family: Arial, sans-serif; font-size: 9px; fill: #2c3e50; text-anchor: middle; }
      .position-text { font-family: Arial, sans-serif; font-size: 11px; fill: #ffffff; text-anchor: middle; font-weight: bold; }
    </style>
  </defs>

  <!-- Inlet Pipe (A - bottom) -->
  <line x1="50" y1="85" x2="50" y2="65" class="pipe"/>
  <text x="50" y="95" class="port-label">A</text>

  <!-- Outlet Pipe 1 (B - left) -->
  <line x1="15" y1="50" x2="35" y2="50" class="pipe"/>
  <text x="8" y="53" class="port-label">B</text>

  <!-- Outlet Pipe 2 (C - right) -->
  <line x1="65" y1="50" x2="85" y2="50" class="pipe"/>
  <text x="92" y="53" class="port-label">C</text>

  <!-- Valve Body (Y-shape) -->
  <circle cx="50" cy="50" r="18" class="valve-body"/>

  <!-- Internal Ball/Diverter -->
  <g id="valveBall" transform-origin="50 50">
    <path class="valve-ball" d="M 50 50 L 35 50 L 50 65 Z"/>
  </g>

  <!-- Flow Indicators -->
  <circle id="flowA" cx="50" cy="72" r="3" class="flow-indicator"/>
  <circle id="flowB" cx="28" cy="50" r="3" class="flow-indicator" opacity="0"/>
  <circle id="flowC" cx="72" cy="50" r="3" class="flow-indicator" opacity="0"/>

  <!-- Position Display -->
  <rect x="32" y="15" width="36" height="18" fill="#2c3e50" rx="3"/>
  <text id="positionText" x="50" y="28" class="position-text">A→B</text>

  <script><![CDATA[
//!export-start
let _pn_position = 0;      // Valve position: 0=A→B, 100=A→C, 50=mixed
let _pn_command = 0;       // Commanded position (0-100%)
let _pn_feedback = 0;      // Actual position feedback (0-100%)
//!export-end

function init() {
  update();
}

    function update() {
const ball = document.getElementById('valveBall');
const posText = document.getElementById('positionText');
const flowB = document.getElementById('flowB');
const flowC = document.getElementById('flowC');

  if (!ball || !posText || !flowB || !flowC) return;

      // Use feedback if available, otherwise use position
let displayPos = _pn_feedback > 0 ? _pn_feedback : _pn_position;
      displayPos = Math.max(0, Math.min(100, displayPos));

      // Rotate ball based on position (0° = A→B, 90° = A→C)
let angle = (displayPos / 100) * 90;
      ball.setAttribute('transform', 'rotate(' + angle + ' 50 50)');

      // Update flow indicators
      if (displayPos < 25) {
        // Mostly to B
        flowB.setAttribute('opacity', '0.8');
        flowC.setAttribute('opacity', '0.1');
        posText.textContent = 'A→B';
      } else if (displayPos > 75) {
        // Mostly to C
        flowB.setAttribute('opacity', '0.1');
        flowC.setAttribute('opacity', '0.8');
        posText.textContent = 'A→C';
      } else {
        // Mixed position
let ratioB = 1 - (displayPos / 100);
let ratioC = displayPos / 100;
        flowB.setAttribute('opacity', ratioB * 0.8);
        flowC.setAttribute('opacity', ratioC * 0.8);
        posText.textContent = 'MIX ' + Math.round(displayPos) + '%';
      }
    }

function putValue(id, value) {
  if (id === '_pn_position') {
    _pn_position = Number(value) || 0;
    update();
  } else if (id === '_pn_command') {
    _pn_command = Number(value) || 0;
    update();
  } else if (id === '_pn_feedback') {
    _pn_feedback = Number(value) || 0;
    update();
  }
}

init();

]]></script>
</svg>
