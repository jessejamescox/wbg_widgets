<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 400" id="expansion-tank-widget">
  <defs>
    <linearGradient id="waterGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#0277bd;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#01579b;stop-opacity:0.9" />
    </linearGradient>
    <linearGradient id="airGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#e3f2fd;stop-opacity:0.6" />
      <stop offset="100%" style="stop-color:#bbdefb;stop-opacity:0.7" />
    </linearGradient>
    <linearGradient id="tankMetal" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#90a4ae;stop-opacity:0.9" />
      <stop offset="50%" style="stop-color:#cfd8dc;stop-opacity:0.95" />
      <stop offset="100%" style="stop-color:#90a4ae;stop-opacity:0.9" />
    </linearGradient>
    <radialGradient id="pressureGaugeGradient">
      <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#e0e0e0;stop-opacity:1" />
    </radialGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Background -->
  <rect width="300" height="400" fill="#f5f5f5"/>

  <!-- Title -->
  <text x="150" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#333">
    Expansion Tank
  </text>

  <!-- Tank Container (Diaphragm type) -->
  <g id="tank-container">
    <!-- Tank shell -->
    <ellipse cx="150" cy="160" rx="80" ry="110" fill="url(#tankMetal)" stroke="#546e7a" stroke-width="3"/>

    <!-- Air chamber (top) -->
    <ellipse id="air-chamber" cx="150" cy="100" rx="75" ry="55" fill="url(#airGradient)" stroke="#546e7a" stroke-width="1" opacity="0.8"/>

    <!-- Water chamber (bottom) -->
    <path id="water-chamber" d="M 75 160 Q 75 240 150 260 Q 225 240 225 160 Z" fill="url(#waterGradient)" stroke="#546e7a" stroke-width="1" opacity="0.9"/>

    <!-- Diaphragm/bladder separator line -->
    <ellipse id="diaphragm" cx="150" cy="160" rx="73" ry="8" fill="none" stroke="#333" stroke-width="2" stroke-dasharray="5,3"/>

    <!-- System connection (bottom) -->
    <g id="system-connection">
      <rect x="140" y="265" width="20" height="25" fill="#757575" stroke="#333" stroke-width="2"/>
      <rect x="135" y="287" width="30" height="8" fill="#757575" stroke="#333" stroke-width="2"/>
      <text x="150" y="308" font-family="Arial" font-size="10" text-anchor="middle" fill="#333">SYSTEM</text>
    </g>

    <!-- Air valve (top) -->
    <g id="air-valve">
      <rect x="145" y="40" width="10" height="15" fill="#333" stroke="#333" stroke-width="1"/>
      <circle cx="150" cy="38" r="4" fill="#ff9800" stroke="#333" stroke-width="1"/>
      <text x="150" y="28" font-family="Arial" font-size="9" text-anchor="middle" fill="#333">AIR</text>
    </g>
  </g>

  <!-- Pressure Gauge -->
  <g id="pressure-gauge" transform="translate(40, 140)">
    <circle cx="0" cy="0" r="35" fill="url(#pressureGaugeGradient)" stroke="#333" stroke-width="2"/>
    <circle cx="0" cy="0" r="30" fill="none" stroke="#666" stroke-width="1"/>

    <!-- Gauge markings -->
    <g id="gauge-marks">
      <line x1="0" y1="-25" x2="0" y2="-22" stroke="#333" stroke-width="2"/>
      <line x1="17.7" y1="-17.7" x2="15.6" y2="-15.6" stroke="#333" stroke-width="1.5"/>
      <line x1="25" y1="0" x2="22" y2="0" stroke="#333" stroke-width="2"/>
      <line x1="17.7" y1="17.7" x2="15.6" y2="15.6" stroke="#333" stroke-width="1.5"/>
      <line x1="0" y1="25" x2="0" y2="22" stroke="#333" stroke-width="1.5"/>

      <text x="0" y="-15" font-family="Arial" font-size="8" text-anchor="middle" fill="#333">30</text>
      <text x="15" y="5" font-family="Arial" font-size="8" text-anchor="middle" fill="#333">15</text>
      <text x="0" y="18" font-family="Arial" font-size="8" text-anchor="middle" fill="#333">0</text>
    </g>

    <!-- Pressure needle -->
    <line id="pressure-needle" x1="0" y1="0" x2="0" y2="-20" stroke="#ff5252" stroke-width="2" stroke-linecap="round"/>
    <circle cx="0" cy="0" r="3" fill="#333"/>

    <!-- PSI label -->
    <text x="0" y="32" font-family="Arial" font-size="8" text-anchor="middle" fill="#333">PSI</text>
  </g>

  <!-- Pre-charge pressure indicator -->
  <g id="precharge-indicator">
    <rect x="15" y="195" width="50" height="30" fill="#ffffff" stroke="#333" stroke-width="1.5" rx="3"/>
    <text x="40" y="208" font-family="Arial" font-size="9" text-anchor="middle" fill="#666">Pre-Chg</text>
    <text x="40" y="220" font-family="Arial" font-size="11" font-weight="bold" text-anchor="middle" fill="#333">
      <tspan id="precharge-psi">12</tspan> PSI
    </text>
  </g>

  <!-- Level indicator -->
  <g id="level-indicator">
    <rect x="240" y="80" width="30" height="160" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>
    <rect id="level-fill" x="242" y="160" width="26" height="78" fill="#0277bd" rx="3"/>

    <!-- Level markings -->
    <line x1="240" y1="100" x2="245" y2="100" stroke="#333" stroke-width="1"/>
    <line x1="240" y1="140" x2="245" y2="140" stroke="#333" stroke-width="1"/>
    <line x1="240" y1="180" x2="245" y2="180" stroke="#333" stroke-width="1"/>
    <line x1="240" y1="220" x2="245" y2="220" stroke="#333" stroke-width="1"/>

    <text x="255" y="95" font-family="Arial" font-size="9" text-anchor="middle" fill="#333">100</text>
    <text x="255" y="145" font-family="Arial" font-size="9" text-anchor="middle" fill="#333">50</text>
    <text x="255" y="225" font-family="Arial" font-size="9" text-anchor="middle" fill="#333">0</text>

    <text x="255" y="75" font-family="Arial" font-size="8" text-anchor="middle" fill="#666">LEVEL %</text>
  </g>

  <!-- Status indicators -->
  <g id="status-indicators">
    <!-- Overpressure warning -->
    <circle cx="230" cy="120" r="6" fill="#4caf50" id="overpressure-light" opacity="0.3"/>
    <text x="240" y="124" font-family="Arial" font-size="9" fill="#333">Over P</text>

    <!-- Low pressure warning -->
    <circle cx="230" cy="210" r="6" fill="#ffa726" id="lowpressure-light" opacity="0.3"/>
    <text x="240" y="214" font-family="Arial" font-size="9" fill="#333">Low P</text>
  </g>

  <!-- Info Panel -->
  <g id="info-panel">
    <rect x="20" y="260" width="260" height="125" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>

    <!-- Pressure Display -->
    <text x="150" y="280" font-family="Arial" font-size="14" font-weight="bold" text-anchor="middle" fill="#333">
      System Pressure: <tspan id="system-pressure">18</tspan> PSI
    </text>

    <!-- Level Display -->
    <text x="30" y="302" font-family="Arial" font-size="12" fill="#555">
      Water Level: <tspan id="level-percent" font-weight="bold">65</tspan>%
    </text>

    <!-- Capacity -->
    <text x="30" y="320" font-family="Arial" font-size="12" fill="#555">
      Capacity: <tspan id="tank-capacity">20</tspan> gal
    </text>

    <!-- Acceptance Volume -->
    <text x="30" y="338" font-family="Arial" font-size="12" fill="#555">
      Acceptance: <tspan id="acceptance-volume">13</tspan> gal
    </text>

    <!-- Temperature -->
    <text x="170" y="302" font-family="Arial" font-size="12" fill="#555">
      Temp: <tspan id="temp-value">68</tspan>Â°F
    </text>

    <!-- Working pressure range -->
    <text x="170" y="320" font-family="Arial" font-size="11" fill="#555">
      Range: <tspan id="min-pressure">12</tspan>-<tspan id="max-pressure">30</tspan> PSI
    </text>

    <!-- Status -->
    <text x="150" y="360" font-family="Arial" font-size="13" text-anchor="middle" fill="#666">
      Status: <tspan id="tank-status" fill="#4caf50" font-weight="bold">NORMAL</tspan>
    </text>

    <!-- Connection Status -->
    <text x="150" y="378" font-family="Arial" font-size="11" text-anchor="middle" fill="#666">
      <tspan id="connection-status" fill="#2196f3">CONNECTED</tspan>
    </text>
  </g>

  <script><![CDATA[
//!export-start
let _ps_path = 'M 75 ' + diaphragmY + ' Q 75 240 150 260 Q 225 240 225 ' + diaphragmY + ' Z';
let _ps_status = 'NORMAL';
let _ps_statusColor = '#4caf50';
let _pn_pressureFluctuation = 0;
//!export-end

function init() {
  update();
}

(function() {
      // FUXA Interface
let gaugeStatus = { id: 'expansion-tank', type: 'svg-ext' };

      // Default values
let settings = {
        pressure: 18,          // Current system pressure (PSI)
        preCharge: 12,         // Pre-charge pressure (PSI)
        waterLevel: 65,        // Water level percentage (0-100)
        capacity: 20,          // Tank capacity in gallons
        temperature: 68,       // Temperature in Fahrenheit
        minPressure: 12,       // Minimum working pressure
        maxPressure: 30,       // Maximum working pressure
        connected: true        // System connection _ps_status
      };

      // Initialize
      if (window.svgData) {
        gaugeStatus.onaction = function (data) {
          // No actions for this widget
        };

        gaugeStatus.onsignal = function (signal) {
          // Update based on FUXA signals
          if (signal.id === 'pressure' && signal.value !== undefined) {
            settings.pressure = parseFloat(signal.value);
          }
          if (signal.id === 'preCharge' && signal.value !== undefined) {
            settings.preCharge = parseFloat(signal.value);
          }
          if (signal.id === 'waterLevel' && signal.value !== undefined) {
            settings.waterLevel = parseFloat(signal.value);
          }
          if (signal.id === 'capacity' && signal.value !== undefined) {
            settings.capacity = parseFloat(signal.value);
          }
          if (signal.id === 'temperature' && signal.value !== undefined) {
            settings.temperature = parseFloat(signal.value);
          }
          if (signal.id === 'connected' && signal.value !== undefined) {
            settings.connected = signal.value === true || signal.value === 1 || signal.value === '1';
          }
          updateTank();
        };

        gaugeStatus.oninit = function (data) {
          if (data) {
            if (data.pressure !== undefined) settings.pressure = data.pressure;
            if (data.preCharge !== undefined) settings.preCharge = data.preCharge;
            if (data.waterLevel !== undefined) settings.waterLevel = data.waterLevel;
            if (data.capacity !== undefined) settings.capacity = data.capacity;
            if (data.temperature !== undefined) settings.temperature = data.temperature;
            if (data.connected !== undefined) settings.connected = data.connected;
          }
          updateTank();
        };

        window.svgData.init(gaugeStatus);
      }

      function updateTank() {
        // Update pressure gauge needle
const pressureNeedle = document.getElementById('pressure-needle');
        if (pressureNeedle) {
          // Gauge range 0-30 PSI, angle from -90 (0 PSI) to +90 (30 PSI) degrees
let angle = ((settings.pressure / 30) * 180) - 90;
          angle = Math.max(-90, Math.min(90, angle));
          pressureNeedle.setAttribute('transform', 'rotate(' + angle + ')');

          // Color based on pressure range
          if (settings.pressure > settings.maxPressure) {
            pressureNeedle.setAttribute('stroke', '#ff5252');
          } else if (settings.pressure < settings.preCharge) {
            pressureNeedle.setAttribute('stroke', '#ffa726');
          } else {
            pressureNeedle.setAttribute('stroke', '#4caf50');
          }
        }

        // Update displays
const systemPressureEl = document.getElementById('system-pressure');
        if (systemPressureEl) {
          systemPressureEl.textContent = settings.pressure.toFixed(1);
        }
const preChargePsiEl = document.getElementById('precharge-psi');
        if (preChargePsiEl) {
          preChargePsiEl.textContent = settings.preCharge.toFixed(0);
        }

        // Update water level
const levelFill = document.getElementById('level-fill');
let waterLevel = Math.max(0, Math.min(100, settings.waterLevel));

        if (levelFill) {
let levelHeight = (waterLevel / 100) * 158;
let levelY = 238 - levelHeight;
          levelFill.setAttribute('y', levelY);
          levelFill.setAttribute('height', levelHeight);
        }
const levelPercentEl = document.getElementById('level-percent');
        if (levelPercentEl) {
          levelPercentEl.textContent = waterLevel.toFixed(0);
        }

        // Update diaphragm position based on water level
const diaphragm = document.getElementById('diaphragm');
        if (diaphragm) {
let diaphragmY = 80 + (waterLevel / 100) * 160;
          diaphragm.setAttribute('cy', diaphragmY);
        }

        // Update water chamber _ps_path
const waterChamber = document.getElementById('water-chamber');
        if (waterChamber) {
let diaphragmY = 80 + (waterLevel / 100) * 160;

          waterChamber.setAttribute('d', _ps_path);
        }

        // Update air chamber
const airChamber = document.getElementById('air-chamber');
        if (airChamber) {
let diaphragmY = 80 + (waterLevel / 100) * 160;
let airHeight = diaphragmY - 50;
          airChamber.setAttribute('cy', 50 + airHeight / 2);
          airChamber.setAttribute('ry', airHeight / 2);
        }

        // Calculate acceptance volume
let acceptanceVolume = (settings.waterLevel / 100) * settings.capacity;
const acceptanceVolumeEl = document.getElementById('acceptance-volume');
        if (acceptanceVolumeEl) {
          acceptanceVolumeEl.textContent = acceptanceVolume.toFixed(1);
        }

        // Update capacity
const capacityEl = document.getElementById('tank-capacity');
        if (capacityEl) {
          capacityEl.textContent = settings.capacity.toFixed(0);
        }

        // Update temperature
const tempValueEl = document.getElementById('temp-value');
        if (tempValueEl) {
          tempValueEl.textContent = settings.temperature.toFixed(0);
        }

        // Update pressure range display
const minPressureEl = document.getElementById('min-pressure');
const maxPressureEl = document.getElementById('max-pressure');
        if (minPressureEl) {
          minPressureEl.textContent = settings.minPressure.toFixed(0);
        }
        if (maxPressureEl) {
          maxPressureEl.textContent = settings.maxPressure.toFixed(0);
        }

        // Update _ps_status indicators
const overpressureLight = document.getElementById('overpressure-light');
const lowpressureLight = document.getElementById('lowpressure-light');

        if (settings.pressure > settings.maxPressure) {
          if (overpressureLight) {
            overpressureLight.setAttribute('fill', '#ff5252');
            overpressureLight.setAttribute('opacity', '1');
            overpressureLight.setAttribute('filter', 'url(#glow)');
          }
        } else {
          if (overpressureLight) {
            overpressureLight.setAttribute('fill', '#4caf50');
            overpressureLight.setAttribute('opacity', '0.3');
            overpressureLight.removeAttribute('filter');
          }
        }

        if (settings.pressure < settings.preCharge) {
          if (lowpressureLight) {
            lowpressureLight.setAttribute('fill', '#ffa726');
            lowpressureLight.setAttribute('opacity', '1');
            lowpressureLight.setAttribute('filter', 'url(#glow)');
          }
        } else {
          if (lowpressureLight) {
            lowpressureLight.setAttribute('fill', '#4caf50');
            lowpressureLight.setAttribute('opacity', '0.3');
            lowpressureLight.removeAttribute('filter');
          }
        }

        // Determine _ps_status
const tankStatus = document.getElementById('tank-_ps_status');

        if (!settings.connected) {
          _ps_status = 'DISCONNECTED';
          _ps_statusColor = '#757575';
        } else if (settings.pressure > settings.maxPressure) {
          _ps_status = 'OVERPRESSURE';
          _ps_statusColor = '#ff5252';
        } else if (settings.pressure < settings.preCharge) {
          _ps_status = 'LOW PRESSURE';
          _ps_statusColor = '#ffa726';
        } else if (waterLevel > 95) {
          _ps_status = 'WATERLOGGED';
          _ps_statusColor = '#ff9800';
        }

        if (tankStatus) {
          tankStatus.textContent = _ps_status;
          tankStatus.setAttribute('fill', _ps_statusColor);
        }

        // Update connection _ps_status
const connectionStatus = document.getElementById('connection-_ps_status');
        if (connectionStatus) {
          if (settings.connected) {
            connectionStatus.textContent = 'CONNECTED';
            connectionStatus.setAttribute('fill', '#2196f3');
          } else {
            connectionStatus.textContent = 'DISCONNECTED';
            connectionStatus.setAttribute('fill', '#757575');
          }
        }
      }

      // Initial update
      updateTank();

      // Animation for pressure fluctuation

      setInterval(function() {
        if (settings.connected) {
          _pn_pressureFluctuation += 0.1;
let fluctuation = Math.sin(_pn_pressureFluctuation) * 0.2;
const pressureNeedle = document.getElementById('pressure-needle');
          if (pressureNeedle) {
let baseAngle = ((settings.pressure / 30) * 180) - 90;
let angle = baseAngle + fluctuation;
            angle = Math.max(-90, Math.min(90, angle));
            pressureNeedle.setAttribute('transform', 'rotate(' + angle + ')');
          }
        }
      }, 100);
    })();

function putValue(id, value) {
  if (id === '_ps_path') {
    _ps_path = String(value) || "";
    update();
  } else if (id === '_ps_status') {
    _ps_status = String(value) || "";
    update();
  } else if (id === '_ps_statusColor') {
    _ps_statusColor = String(value) || "";
    update();
  } else if (id === '_pn_pressureFluctuation') {
    _pn_pressureFluctuation = Number(value) || 0;
    update();
  }
}

init();

]]></script>
</svg>
