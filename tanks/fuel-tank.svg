<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 400" id="fuel-tank-widget">
  <defs>
    <linearGradient id="fuelGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#ffd54f;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#f57f17;stop-opacity:0.9" />
    </linearGradient>
    <linearGradient id="tankBodyGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#424242;stop-opacity:0.8" />
      <stop offset="50%" style="stop-color:#616161;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#424242;stop-opacity:0.8" />
    </linearGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    <pattern id="leakPattern" patternUnits="userSpaceOnUse" width="4" height="4">
      <circle cx="2" cy="2" r="1" fill="#ff5252" opacity="0.6"/>
    </pattern>
  </defs>

  <!-- Background -->
  <rect width="300" height="400" fill="#f5f5f5"/>

  <!-- Title -->
  <text x="150" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#333">
    Fuel Storage Tank
  </text>

  <!-- Tank Container -->
  <g id="tank-container">
    <!-- Tank body (cylindrical) -->
    <ellipse cx="150" cy="70" rx="70" ry="15" fill="#757575" stroke="#333" stroke-width="2"/>
    <rect x="80" y="70" width="140" height="200" fill="url(#tankBodyGradient)" stroke="#333" stroke-width="2"/>
    <ellipse cx="150" cy="270" rx="70" ry="15" fill="#424242" stroke="#333" stroke-width="2"/>

    <!-- Fuel fill (animated) -->
    <g id="fuel-fill">
      <rect id="fuel-level" x="82" y="170" width="136" height="98" fill="url(#fuelGradient)" opacity="0.85"/>
      <ellipse id="fuel-surface" cx="150" cy="170" rx="68" ry="13" fill="#ffd54f" opacity="0.7"/>
    </g>

    <!-- Level gauge (vertical) -->
    <g id="level-gauge">
      <rect x="235" y="70" width="30" height="200" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>
      <rect id="gauge-fill" x="237" y="170" width="26" height="98" fill="#4caf50" rx="3"/>

      <!-- Gauge markings -->
      <line x1="235" y1="95" x2="240" y2="95" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="120" x2="240" y2="120" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="145" x2="240" y2="145" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="170" x2="240" y2="170" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="195" x2="240" y2="195" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="220" x2="240" y2="220" stroke="#333" stroke-width="1"/>
      <line x1="235" y1="245" x2="240" y2="245" stroke="#333" stroke-width="1"/>
    </g>

    <!-- Temperature indicator -->
    <g id="temp-indicator">
      <rect x="30" y="70" width="35" height="120" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>
      <rect id="temp-fill" x="35" y="150" width="25" height="35" fill="#ff9800" rx="3"/>
      <circle cx="47.5" cy="195" r="10" fill="#ff9800" stroke="#333" stroke-width="2"/>
      <text x="47.5" y="220" font-family="Arial" font-size="10" text-anchor="middle" fill="#333">TEMP</text>
    </g>
  </g>

  <!-- Leak Detection Indicator -->
  <g id="leak-indicator">
    <circle cx="30" cy="280" r="10" fill="#4caf50" id="leak-light"/>
    <text x="45" y="285" font-family="Arial" font-size="11" fill="#333">Leak Detect</text>
    <!-- Leak droplets (hidden by default) -->
    <g id="leak-droplets" opacity="0">
      <ellipse cx="140" cy="275" rx="3" ry="5" fill="#1976d2" opacity="0.7"/>
      <ellipse cx="160" cy="278" rx="2" ry="4" fill="#1976d2" opacity="0.7"/>
      <ellipse cx="150" cy="280" rx="2.5" ry="4.5" fill="#1976d2" opacity="0.7"/>
    </g>
  </g>

  <!-- Info Panel -->
  <g id="info-panel">
    <rect x="20" y="300" width="260" height="85" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>

    <!-- Level Percentage -->
    <text x="150" y="320" font-family="Arial" font-size="14" font-weight="bold" text-anchor="middle" fill="#333">
      Level: <tspan id="level-percent">50</tspan>%
    </text>

    <!-- Volume Display -->
    <text x="30" y="340" font-family="Arial" font-size="12" fill="#555">
      Volume: <tspan id="current-volume">2500</tspan> gal
    </text>
    <text x="30" y="358" font-family="Arial" font-size="12" fill="#555">
      Capacity: <tspan id="max-capacity">5000</tspan> gal
    </text>

    <!-- Temperature -->
    <text x="170" y="340" font-family="Arial" font-size="12" fill="#555">
      Temp: <tspan id="temp-value">72</tspan>°F
    </text>

    <!-- Status -->
    <text x="150" y="378" font-family="Arial" font-size="12" text-anchor="middle" fill="#666">
      Status: <tspan id="tank-status" fill="#4caf50">NORMAL</tspan>
    </text>
  </g>

  <script type="text/javascript">
    <![CDATA[
    (function() {
      // FUXA Interface
      var gaugeStatus = { id: 'fuel-tank', type: 'svg-ext' };

      // Default values
      var settings = {
        level: 50,           // Percentage (0-100)
        capacity: 5000,      // Total capacity in gallons
        temperature: 72,     // Temperature in Fahrenheit
        leakDetected: false, // Leak detection status
        tempWarning: 100,    // Temperature warning threshold
        lowLevelWarning: 15  // Low level warning
      };

      // Initialize
      if (window.svgData) {
        gaugeStatus.onaction = function (data) {
          // No actions for this widget
        };

        gaugeStatus.onsignal = function (signal) {
          // Update based on FUXA signals
          if (signal.id === 'level' && signal.value !== undefined) {
            settings.level = parseFloat(signal.value);
          }
          if (signal.id === 'capacity' && signal.value !== undefined) {
            settings.capacity = parseFloat(signal.value);
          }
          if (signal.id === 'temperature' && signal.value !== undefined) {
            settings.temperature = parseFloat(signal.value);
          }
          if (signal.id === 'leakDetected' && signal.value !== undefined) {
            settings.leakDetected = signal.value === true || signal.value === 1 || signal.value === '1';
          }
          if (signal.id === 'tempWarning' && signal.value !== undefined) {
            settings.tempWarning = parseFloat(signal.value);
          }
          if (signal.id === 'lowLevelWarning' && signal.value !== undefined) {
            settings.lowLevelWarning = parseFloat(signal.value);
          }
          updateTank();
        };

        gaugeStatus.oninit = function (data) {
          if (data) {
            if (data.level !== undefined) settings.level = data.level;
            if (data.capacity !== undefined) settings.capacity = data.capacity;
            if (data.temperature !== undefined) settings.temperature = data.temperature;
            if (data.leakDetected !== undefined) settings.leakDetected = data.leakDetected;
            if (data.tempWarning !== undefined) settings.tempWarning = data.tempWarning;
            if (data.lowLevelWarning !== undefined) settings.lowLevelWarning = data.lowLevelWarning;
          }
          updateTank();
        };

        window.svgData.init(gaugeStatus);
      }

      function updateTank() {
        // Constrain level between 0 and 100
        var level = Math.max(0, Math.min(100, settings.level));

        // Calculate fuel height (tank body is 200px tall, from y=70 to y=270)
        var tankHeight = 200;
        var tankTop = 70;
        var tankBottom = 270;
        var fuelHeight = (level / 100) * tankHeight;
        var fuelY = tankBottom - fuelHeight;

        // Update fuel level
        var fuelLevelRect = document.getElementById('fuel-level');
        var fuelSurface = document.getElementById('fuel-surface');

        if (fuelLevelRect) {
          fuelLevelRect.setAttribute('y', fuelY);
          fuelLevelRect.setAttribute('height', fuelHeight);
        }

        if (fuelSurface) {
          fuelSurface.setAttribute('cy', fuelY);
        }

        // Update gauge fill
        var gaugeFill = document.getElementById('gauge-fill');
        if (gaugeFill) {
          gaugeFill.setAttribute('y', fuelY);
          gaugeFill.setAttribute('height', fuelHeight);

          // Color based on level
          if (level <= settings.lowLevelWarning) {
            gaugeFill.setAttribute('fill', '#ff5252');
          } else if (level <= 30) {
            gaugeFill.setAttribute('fill', '#ffa726');
          } else {
            gaugeFill.setAttribute('fill', '#4caf50');
          }
        }

        // Update level percentage display
        var levelPercent = document.getElementById('level-percent');
        if (levelPercent) {
          levelPercent.textContent = level.toFixed(1);
        }

        // Calculate current volume
        var currentVolume = (level / 100) * settings.capacity;
        var currentVolumeEl = document.getElementById('current-volume');
        var maxCapacityEl = document.getElementById('max-capacity');

        if (currentVolumeEl) {
          currentVolumeEl.textContent = currentVolume.toFixed(0);
        }
        if (maxCapacityEl) {
          maxCapacityEl.textContent = settings.capacity.toFixed(0);
        }

        // Update temperature display
        var tempValueEl = document.getElementById('temp-value');
        if (tempValueEl) {
          tempValueEl.textContent = settings.temperature.toFixed(1);
        }

        // Update temperature indicator
        var tempFill = document.getElementById('temp-fill');
        if (tempFill) {
          // Temperature scale (assume 0-150°F range for visual)
          var tempPercent = Math.min(100, (settings.temperature / 150) * 100);
          var tempHeight = (tempPercent / 100) * 115;
          var tempY = 185 - tempHeight;
          tempFill.setAttribute('y', tempY);
          tempFill.setAttribute('height', tempHeight);

          // Color based on temperature
          if (settings.temperature >= settings.tempWarning) {
            tempFill.setAttribute('fill', '#ff5252');
          } else if (settings.temperature >= settings.tempWarning * 0.8) {
            tempFill.setAttribute('fill', '#ffa726');
          } else {
            tempFill.setAttribute('fill', '#ff9800');
          }
        }

        // Update leak detection
        var leakLight = document.getElementById('leak-light');
        var leakDroplets = document.getElementById('leak-droplets');

        if (settings.leakDetected) {
          if (leakLight) {
            leakLight.setAttribute('fill', '#ff5252');
            leakLight.setAttribute('filter', 'url(#glow)');
          }
          if (leakDroplets) {
            leakDroplets.setAttribute('opacity', '1');
          }
        } else {
          if (leakLight) {
            leakLight.setAttribute('fill', '#4caf50');
            leakLight.removeAttribute('filter');
          }
          if (leakDroplets) {
            leakDroplets.setAttribute('opacity', '0');
          }
        }

        // Update status
        var tankStatus = document.getElementById('tank-status');
        var status = 'NORMAL';
        var statusColor = '#4caf50';

        if (settings.leakDetected) {
          status = 'LEAK DETECTED';
          statusColor = '#ff5252';
        } else if (settings.temperature >= settings.tempWarning) {
          status = 'HIGH TEMP';
          statusColor = '#ff5252';
        } else if (level <= settings.lowLevelWarning) {
          status = 'LOW LEVEL';
          statusColor = '#ffa726';
        }

        if (tankStatus) {
          tankStatus.textContent = status;
          tankStatus.setAttribute('fill', statusColor);
        }
      }

      // Initial update
      updateTank();

      // Animation for leak droplets
      var dropletY = [275, 278, 280];
      setInterval(function() {
        if (settings.leakDetected) {
          var leakDroplets = document.getElementById('leak-droplets');
          if (leakDroplets) {
            var droplets = leakDroplets.getElementsByTagName('ellipse');
            for (var i = 0; i < droplets.length; i++) {
              dropletY[i] += 0.5;
              if (dropletY[i] > 290) dropletY[i] = 275;
              droplets[i].setAttribute('cy', dropletY[i]);
            }
          }
        }
      }, 100);
    })();
    ]]>
  </script>
</svg>
