<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 400" id="water-tank-widget">
  <defs>
    <linearGradient id="waterGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#4fc3f7;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#0277bd;stop-opacity:0.9" />
    </linearGradient>
    <linearGradient id="tankGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#e0e0e0;stop-opacity:0.8" />
      <stop offset="50%" style="stop-color:#ffffff;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#e0e0e0;stop-opacity:0.8" />
    </linearGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Background -->
  <rect width="300" height="400" fill="#f5f5f5"/>

  <!-- Title -->
  <text x="150" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" text-anchor="middle" fill="#333">
    Water Storage Tank
  </text>

  <!-- Tank Container -->
  <g id="tank-container">
    <!-- Tank body -->
    <rect x="75" y="60" width="150" height="240" fill="url(#tankGradient)" stroke="#757575" stroke-width="3" rx="5"/>

    <!-- Tank bottom (rounded) -->
    <ellipse cx="150" cy="300" rx="75" ry="15" fill="#bdbdbd" stroke="#757575" stroke-width="3"/>
    <ellipse cx="150" cy="300" rx="75" ry="15" fill="url(#tankGradient)" opacity="0.7"/>

    <!-- Water fill (animated) -->
    <g id="water-fill">
      <rect id="water-level" x="77" y="200" width="146" height="98" fill="url(#waterGradient)" opacity="0.9"/>
      <ellipse id="water-surface" cx="150" cy="200" rx="73" ry="12" fill="#4fc3f7" opacity="0.7"/>
    </g>

    <!-- Level scale markings -->
    <g id="scale">
      <line x1="65" y1="80" x2="70" y2="80" stroke="#333" stroke-width="2"/>
      <text x="60" y="85" font-family="Arial" font-size="12" text-anchor="end" fill="#333">100%</text>

      <line x1="65" y1="135" x2="70" y2="135" stroke="#333" stroke-width="1.5"/>
      <text x="60" y="140" font-family="Arial" font-size="12" text-anchor="end" fill="#333">75%</text>

      <line x1="65" y1="190" x2="70" y2="190" stroke="#333" stroke-width="1.5"/>
      <text x="60" y="195" font-family="Arial" font-size="12" text-anchor="end" fill="#333">50%</text>

      <line x1="65" y1="245" x2="70" y2="245" stroke="#333" stroke-width="1.5"/>
      <text x="60" y="250" font-family="Arial" font-size="12" text-anchor="end" fill="#333">25%</text>

      <line x1="65" y1="300" x2="70" y2="300" stroke="#333" stroke-width="2"/>
      <text x="60" y="305" font-family="Arial" font-size="12" text-anchor="end" fill="#333">0%</text>
    </g>
  </g>

  <!-- High Level Alarm Indicator -->
  <g id="high-alarm">
    <circle cx="235" cy="90" r="8" fill="#ff5252" opacity="0" id="high-alarm-light"/>
    <text x="248" y="95" font-family="Arial" font-size="11" fill="#333">HIGH</text>
  </g>

  <!-- Low Level Alarm Indicator -->
  <g id="low-alarm">
    <circle cx="235" cy="280" r="8" fill="#ffa726" opacity="0" id="low-alarm-light"/>
    <text x="248" y="285" font-family="Arial" font-size="11" fill="#333">LOW</text>
  </g>

  <!-- Info Panel -->
  <g id="info-panel">
    <rect x="50" y="320" width="200" height="65" fill="#ffffff" stroke="#333" stroke-width="2" rx="5"/>

    <!-- Level Percentage -->
    <text x="150" y="340" font-family="Arial" font-size="14" font-weight="bold" text-anchor="middle" fill="#333">
      Level: <tspan id="level-percent">50</tspan>%
    </text>

    <!-- Volume Display -->
    <text x="150" y="360" font-family="Arial" font-size="13" text-anchor="middle" fill="#555">
      Volume: <tspan id="current-volume">5000</tspan>/<tspan id="max-capacity">10000</tspan> L
    </text>

    <!-- Status -->
    <text x="150" y="378" font-family="Arial" font-size="12" text-anchor="middle" fill="#666">
      Status: <tspan id="tank-status" fill="#4caf50">NORMAL</tspan>
    </text>
  </g>

  <script><![CDATA[
//!export-start
let _pn_tankHeight = 240;
let _pn_tankTop = 60;
let _pn_tankBottom = 300;
let _ps_status = 'NORMAL';
let _ps_statusColor = '#4caf50';
let _pn_waveOffset = 0;
//!export-end

function init() {
  update();
}

(function() {
      // FUXA Interface
let gaugeStatus = { id: 'water-tank', type: 'svg-ext' };

      // Default values
let settings = {
        level: 50,           // Percentage (0-100)
        capacity: 10000,     // Total capacity in liters
        highAlarmSetpoint: 90,
        lowAlarmSetpoint: 10
      };

      // Initialize
      if (window.svgData) {
        gaugeStatus.onaction = function (data) {
          // No actions for this widget
        };

        gaugeStatus.onsignal = function (signal) {
          // Update based on FUXA signals
          if (signal.id === 'level' && signal.value !== undefined) {
            settings.level = parseFloat(signal.value);
          }
          if (signal.id === 'capacity' && signal.value !== undefined) {
            settings.capacity = parseFloat(signal.value);
          }
          if (signal.id === 'highAlarm' && signal.value !== undefined) {
            settings.highAlarmSetpoint = parseFloat(signal.value);
          }
          if (signal.id === 'lowAlarm' && signal.value !== undefined) {
            settings.lowAlarmSetpoint = parseFloat(signal.value);
          }
          updateTank();
        };

        gaugeStatus.oninit = function (data) {
          if (data) {
            if (data.level !== undefined) settings.level = data.level;
            if (data.capacity !== undefined) settings.capacity = data.capacity;
            if (data.highAlarm !== undefined) settings.highAlarmSetpoint = data.highAlarm;
            if (data.lowAlarm !== undefined) settings.lowAlarmSetpoint = data.lowAlarm;
          }
          updateTank();
        };

        window.svgData.init(gaugeStatus);
      }

      function updateTank() {
        // Constrain level between 0 and 100
let level = Math.max(0, Math.min(100, settings.level));

        // Calculate water height (tank body is 240px tall, from y=60 to y=300)

let waterHeight = (level / 100) * _pn_tankHeight;
let waterY = _pn_tankBottom - waterHeight;

        // Update water level rectangle
const waterLevelRect = document.getElementById('water-level');
const waterSurface = document.getElementById('water-surface');

        if (waterLevelRect) {
          waterLevelRect.setAttribute('y', waterY);
          waterLevelRect.setAttribute('height', waterHeight);
        }

        if (waterSurface) {
          waterSurface.setAttribute('cy', waterY);
        }

        // Update level percentage display
const levelPercent = document.getElementById('level-percent');
        if (levelPercent) {
          levelPercent.textContent = level.toFixed(1);
        }

        // Calculate current volume
let currentVolume = (level / 100) * settings.capacity;
const currentVolumeEl = document.getElementById('current-volume');
const maxCapacityEl = document.getElementById('max-capacity');

        if (currentVolumeEl) {
          currentVolumeEl.textContent = currentVolume.toFixed(0);
        }
        if (maxCapacityEl) {
          maxCapacityEl.textContent = settings.capacity.toFixed(0);
        }

        // Update alarm indicators
const highAlarmLight = document.getElementById('high-alarm-light');
const lowAlarmLight = document.getElementById('low-alarm-light');
const tankStatus = document.getElementById('tank-_ps_status');

        if (level >= settings.highAlarmSetpoint) {
          if (highAlarmLight) {
            highAlarmLight.setAttribute('opacity', '1');
            highAlarmLight.setAttribute('filter', 'url(#glow)');
          }
          _ps_status = 'HIGH LEVEL';
          _ps_statusColor = '#ff5252';
        } else {
          if (highAlarmLight) {
            highAlarmLight.setAttribute('opacity', '0.3');
            highAlarmLight.removeAttribute('filter');
          }
        }

        if (level <= settings.lowAlarmSetpoint) {
          if (lowAlarmLight) {
            lowAlarmLight.setAttribute('opacity', '1');
            lowAlarmLight.setAttribute('filter', 'url(#glow)');
          }
          _ps_status = 'LOW LEVEL';
          _ps_statusColor = '#ffa726';
        } else {
          if (lowAlarmLight) {
            lowAlarmLight.setAttribute('opacity', '0.3');
            lowAlarmLight.removeAttribute('filter');
          }
        }

        if (tankStatus) {
          tankStatus.textContent = _ps_status;
          tankStatus.setAttribute('fill', _ps_statusColor);
        }

        // Update water color based on level
        if (level <= settings.lowAlarmSetpoint) {
          if (waterLevelRect) waterLevelRect.setAttribute('opacity', '0.6');
        } else {
          if (waterLevelRect) waterLevelRect.setAttribute('opacity', '0.9');
        }
      }

      // Initial update
      updateTank();

      // Animation loop for wave effect

      setInterval(function() {
        _pn_waveOffset += 0.5;
const waterSurface = document.getElementById('water-surface');
        if (waterSurface) {
let rx = 73 + Math.sin(_pn_waveOffset * 0.1) * 2;
          waterSurface.setAttribute('rx', rx);
        }
      }, 50);
    })();

function putValue(id, value) {
  if (id === '_pn_tankHeight') {
    _pn_tankHeight = Number(value) || 0;
    update();
  } else if (id === '_pn_tankTop') {
    _pn_tankTop = Number(value) || 0;
    update();
  } else if (id === '_pn_tankBottom') {
    _pn_tankBottom = Number(value) || 0;
    update();
  } else if (id === '_ps_status') {
    _ps_status = String(value) || "";
    update();
  } else if (id === '_ps_statusColor') {
    _ps_statusColor = String(value) || "";
    update();
  } else if (id === '_pn_waveOffset') {
    _pn_waveOffset = Number(value) || 0;
    update();
  }
}

init();

]]></script>
</svg>
